
USB_HUB_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c20  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000026d8  08008d30  08008d30  00009d30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b408  0800b408  0000d1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b408  0800b408  0000c408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b410  0800b410  0000d1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b410  0800b410  0000c410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b414  0800b414  0000c414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800b418  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c6c  200001e8  0800b600  0000d1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e54  0800b600  0000de54  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001676a  00000000  00000000  0000d211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036e6  00000000  00000000  0002397b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  00027068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000102a  00000000  00000000  00028030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d40  00000000  00000000  0002905a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab06  00000000  00000000  00042d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f4a9  00000000  00000000  0005d8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ecd49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040d4  00000000  00000000  000ecd8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00008aa3  00000000  00000000  000f0e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000f9903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008d18 	.word	0x08008d18

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08008d18 	.word	0x08008d18

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__aeabi_f2uiz>:
 8000eec:	0042      	lsls	r2, r0, #1
 8000eee:	d20e      	bcs.n	8000f0e <__aeabi_f2uiz+0x22>
 8000ef0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ef4:	d30b      	bcc.n	8000f0e <__aeabi_f2uiz+0x22>
 8000ef6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000efa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000efe:	d409      	bmi.n	8000f14 <__aeabi_f2uiz+0x28>
 8000f00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f08:	fa23 f002 	lsr.w	r0, r3, r2
 8000f0c:	4770      	bx	lr
 8000f0e:	f04f 0000 	mov.w	r0, #0
 8000f12:	4770      	bx	lr
 8000f14:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f18:	d101      	bne.n	8000f1e <__aeabi_f2uiz+0x32>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d102      	bne.n	8000f24 <__aeabi_f2uiz+0x38>
 8000f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f22:	4770      	bx	lr
 8000f24:	f04f 0000 	mov.w	r0, #0
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <MX_DMA_Init+0x2c>)
{
 8000f2e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f30:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f32:	200d      	movs	r0, #13
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f34:	f042 0201 	orr.w	r2, r2, #1
 8000f38:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f3c:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f3e:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f48:	f001 fd70 	bl	8002a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000f4c:	200d      	movs	r0, #13

}
 8000f4e:	b003      	add	sp, #12
 8000f50:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000f54:	f001 bd9a 	b.w	8002a8c <HAL_NVIC_EnableIRQ>
 8000f58:	40021000 	.word	0x40021000

08000f5c <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	2210      	movs	r2, #16
{
 8000f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f62:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	eb0d 0002 	add.w	r0, sp, r2
 8000f68:	2100      	movs	r1, #0
 8000f6a:	f004 fde6 	bl	8005b3a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6e:	4b31      	ldr	r3, [pc, #196]	@ (8001034 <MX_GPIO_Init+0xd8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000f70:	4c31      	ldr	r4, [pc, #196]	@ (8001038 <MX_GPIO_Init+0xdc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f72:	699a      	ldr	r2, [r3, #24]
                          |LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f74:	4f31      	ldr	r7, [pc, #196]	@ (800103c <MX_GPIO_Init+0xe0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f76:	f042 0220 	orr.w	r2, r2, #32
 8000f7a:	619a      	str	r2, [r3, #24]
 8000f7c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000f7e:	4620      	mov	r0, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f80:	f002 0220 	and.w	r2, r2, #32
 8000f84:	9201      	str	r2, [sp, #4]
 8000f86:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000f8a:	f24f 11c0 	movw	r1, #61888	@ 0xf1c0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	f042 0204 	orr.w	r2, r2, #4
 8000f92:	619a      	str	r2, [r3, #24]
 8000f94:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f96:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	f002 0204 	and.w	r2, r2, #4
 8000f9c:	9202      	str	r2, [sp, #8]
 8000f9e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fa2:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	f042 0208 	orr.w	r2, r2, #8
 8000faa:	619a      	str	r2, [r3, #24]
 8000fac:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000fae:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb0:	f003 0308 	and.w	r3, r3, #8
 8000fb4:	9303      	str	r3, [sp, #12]
 8000fb6:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000fb8:	f001 ffb4 	bl	8002f24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4638      	mov	r0, r7
 8000fc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fc4:	f001 ffae 	bl	8002f24 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc8:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	4638      	mov	r0, r7
 8000fcc:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fce:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fd2:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd6:	f001 fec7 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000fda:	f44f 4270 	mov.w	r2, #61440	@ 0xf000
 8000fde:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000fe4:	e9cd 2304 	strd	r2, r3, [sp, #16]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	e9cd 6806 	strd	r6, r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fee:	f001 febb 	bl	8002d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	f44f 7380 	mov.w	r3, #256	@ 0x100
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	4638      	mov	r0, r7
 8000ff8:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	e9cd 6806 	strd	r6, r8, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f001 feb1 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001006:	2340      	movs	r3, #64	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800100a:	2603      	movs	r6, #3
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 800100c:	4620      	mov	r0, r4
 800100e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001014:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8001016:	f001 fea7 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CS_Pin;
 800101a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	4620      	mov	r0, r4
 8001020:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001026:	e9cd 5606 	strd	r5, r6, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102a:	f001 fe9d 	bl	8002d68 <HAL_GPIO_Init>

}
 800102e:	b008      	add	sp, #32
 8001030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001034:	40021000 	.word	0x40021000
 8001038:	40010c00 	.word	0x40010c00
 800103c:	40010800 	.word	0x40010800

08001040 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001040:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001042:	480b      	ldr	r0, [pc, #44]	@ (8001070 <MX_I2C2_Init+0x30>)
  hi2c2.Init.ClockSpeed = 100000;
 8001044:	4a0b      	ldr	r2, [pc, #44]	@ (8001074 <MX_I2C2_Init+0x34>)
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <MX_I2C2_Init+0x38>)
 8001048:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800104c:	2300      	movs	r3, #0
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800104e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hi2c2.Init.OwnAddress1 = 0;
 8001052:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001056:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800105a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800105e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001060:	f002 f890 	bl	8003184 <HAL_I2C_Init>
 8001064:	b118      	cbz	r0, 800106e <MX_I2C2_Init+0x2e>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001066:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800106a:	f000 bc7f 	b.w	800196c <Error_Handler>
}
 800106e:	bd08      	pop	{r3, pc}
 8001070:	20000204 	.word	0x20000204
 8001074:	40005800 	.word	0x40005800
 8001078:	000186a0 	.word	0x000186a0

0800107c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800107c:	b510      	push	{r4, lr}
 800107e:	4604      	mov	r4, r0
 8001080:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	2210      	movs	r2, #16
 8001084:	2100      	movs	r1, #0
 8001086:	a802      	add	r0, sp, #8
 8001088:	f004 fd57 	bl	8005b3a <memset>
  if(i2cHandle->Instance==I2C2)
 800108c:	6822      	ldr	r2, [r4, #0]
 800108e:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <HAL_I2C_MspInit+0x68>)
 8001090:	429a      	cmp	r2, r3
 8001092:	d125      	bne.n	80010e0 <HAL_I2C_MspInit+0x64>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001094:	4c14      	ldr	r4, [pc, #80]	@ (80010e8 <HAL_I2C_MspInit+0x6c>)
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001096:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109c:	4813      	ldr	r0, [pc, #76]	@ (80010ec <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	f043 0308 	orr.w	r3, r3, #8
 80010a2:	61a3      	str	r3, [r4, #24]
 80010a4:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a8:	f003 0308 	and.w	r3, r3, #8
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b0:	2312      	movs	r3, #18
 80010b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	f001 fe55 	bl	8002d68 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010c0:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80010c2:	2021      	movs	r0, #33	@ 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010c8:	61e3      	str	r3, [r4, #28]
 80010ca:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80010cc:	4611      	mov	r1, r2
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80010d6:	f001 fca9 	bl	8002a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80010da:	2021      	movs	r0, #33	@ 0x21
 80010dc:	f001 fcd6 	bl	8002a8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80010e0:	b006      	add	sp, #24
 80010e2:	bd10      	pop	{r4, pc}
 80010e4:	40005800 	.word	0x40005800
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40010c00 	.word	0x40010c00

080010f0 <INA219_Calibrate>:
 * The calibration value is calculated based on the shunt resistor and desired current LSB.
 * It is written to the Calibration Register of the INA219.
 *
 * @param i2c_address The I2C address of the INA219 device.
 */
void INA219_Calibrate(uint8_t i2c_address) {
 80010f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t buffer[2];
    uint16_t calibration_value;
    float current_lsb = 0.0001;   // 0.1 mA/bit (Current LSB)
    float r_shunt = 0.1;         // 100 mΩ shunt resistor
    uint8_t reg_address = 0x05;  // Address of the Calibration Register
 80010f2:	2305      	movs	r3, #5

    buffer[0] = (calibration_value >> 8) & 0xFF;
    buffer[1] = calibration_value & 0xFF;

    // Send the calibration value to the Calibration Register
    HAL_I2C_Master_Transmit(&hi2c2, i2c_address, &reg_address, 1, HAL_MAX_DELAY);
 80010f4:	f04f 36ff 	mov.w	r6, #4294967295
    uint8_t reg_address = 0x05;  // Address of the Calibration Register
 80010f8:	f88d 300b 	strb.w	r3, [sp, #11]
    buffer[0] = (calibration_value >> 8) & 0xFF;
 80010fc:	2310      	movs	r3, #16
void INA219_Calibrate(uint8_t i2c_address) {
 80010fe:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(&hi2c2, i2c_address, &reg_address, 1, HAL_MAX_DELAY);
 8001100:	4d09      	ldr	r5, [pc, #36]	@ (8001128 <INA219_Calibrate+0x38>)
 8001102:	4601      	mov	r1, r0
    buffer[0] = (calibration_value >> 8) & 0xFF;
 8001104:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(&hi2c2, i2c_address, &reg_address, 1, HAL_MAX_DELAY);
 8001108:	f10d 020b 	add.w	r2, sp, #11
 800110c:	2301      	movs	r3, #1
 800110e:	4628      	mov	r0, r5
 8001110:	9600      	str	r6, [sp, #0]
 8001112:	f002 f8df 	bl	80032d4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Transmit(&hi2c2, i2c_address, buffer, 2, HAL_MAX_DELAY);
 8001116:	2302      	movs	r3, #2
 8001118:	4621      	mov	r1, r4
 800111a:	4628      	mov	r0, r5
 800111c:	9600      	str	r6, [sp, #0]
 800111e:	aa03      	add	r2, sp, #12
 8001120:	f002 f8d8 	bl	80032d4 <HAL_I2C_Master_Transmit>
}
 8001124:	b004      	add	sp, #16
 8001126:	bd70      	pop	{r4, r5, r6, pc}
 8001128:	20000204 	.word	0x20000204
 800112c:	00000000 	.word	0x00000000

08001130 <INA219_ReadBusVoltage>:
 * @brief Reads the bus voltage from the INA219.
 *
 * @param i2c_address The I2C address of the INA219 device.
 * @return The bus voltage in volts.
 */
float INA219_ReadBusVoltage(uint8_t i2c_address) {
 8001130:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t reg_address = 0x02; // Register address for bus voltage
    uint8_t buffer[2];

    HAL_I2C_Master_Transmit(&hi2c2, i2c_address, &reg_address, 1, HAL_MAX_DELAY);
 8001132:	f04f 37ff 	mov.w	r7, #4294967295
float INA219_ReadBusVoltage(uint8_t i2c_address) {
 8001136:	4604      	mov	r4, r0
    uint8_t reg_address = 0x02; // Register address for bus voltage
 8001138:	2602      	movs	r6, #2
    HAL_I2C_Master_Transmit(&hi2c2, i2c_address, &reg_address, 1, HAL_MAX_DELAY);
 800113a:	4d13      	ldr	r5, [pc, #76]	@ (8001188 <INA219_ReadBusVoltage+0x58>)
float INA219_ReadBusVoltage(uint8_t i2c_address) {
 800113c:	b085      	sub	sp, #20
    HAL_I2C_Master_Transmit(&hi2c2, i2c_address, &reg_address, 1, HAL_MAX_DELAY);
 800113e:	4601      	mov	r1, r0
 8001140:	f10d 020b 	add.w	r2, sp, #11
 8001144:	2301      	movs	r3, #1
 8001146:	4628      	mov	r0, r5
 8001148:	9700      	str	r7, [sp, #0]
    uint8_t reg_address = 0x02; // Register address for bus voltage
 800114a:	f88d 600b 	strb.w	r6, [sp, #11]
    HAL_I2C_Master_Transmit(&hi2c2, i2c_address, &reg_address, 1, HAL_MAX_DELAY);
 800114e:	f002 f8c1 	bl	80032d4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2, i2c_address, buffer, 2, HAL_MAX_DELAY);
 8001152:	4633      	mov	r3, r6
 8001154:	aa03      	add	r2, sp, #12
 8001156:	4621      	mov	r1, r4
 8001158:	4628      	mov	r0, r5
 800115a:	9700      	str	r7, [sp, #0]
 800115c:	f002 f994 	bl	8003488 <HAL_I2C_Master_Receive>

    int16_t raw_bus_voltage = (buffer[0] << 8) | buffer[1];
    // Shift right by 3 bits and convert to volts
    return (raw_bus_voltage >> 3) * 0.004; // 4 mV per LSB
 8001160:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8001164:	bac0      	revsh	r0, r0
 8001166:	10c0      	asrs	r0, r0, #3
 8001168:	f7ff fa00 	bl	800056c <__aeabi_i2d>
 800116c:	a304      	add	r3, pc, #16	@ (adr r3, 8001180 <INA219_ReadBusVoltage+0x50>)
 800116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001172:	f7ff fa65 	bl	8000640 <__aeabi_dmul>
 8001176:	f7ff fd5b 	bl	8000c30 <__aeabi_d2f>
}
 800117a:	b005      	add	sp, #20
 800117c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800117e:	bf00      	nop
 8001180:	d2f1a9fc 	.word	0xd2f1a9fc
 8001184:	3f70624d 	.word	0x3f70624d
 8001188:	20000204 	.word	0x20000204
 800118c:	00000000 	.word	0x00000000

08001190 <INA219_ReadCurrent>:
 * @brief Reads the current from the INA219.
 *
 * @param i2c_address The I2C address of the INA219 device.
 * @return The current in amperes.
 */
float INA219_ReadCurrent(uint8_t i2c_address) {
 8001190:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t reg_address = 0x01; // Register address for current
    uint8_t buffer[2];

    HAL_I2C_Master_Transmit(&hi2c2, i2c_address, &reg_address, 1, HAL_MAX_DELAY);
 8001192:	f04f 36ff 	mov.w	r6, #4294967295
float INA219_ReadCurrent(uint8_t i2c_address) {
 8001196:	4604      	mov	r4, r0
    uint8_t reg_address = 0x01; // Register address for current
 8001198:	2301      	movs	r3, #1
    HAL_I2C_Master_Transmit(&hi2c2, i2c_address, &reg_address, 1, HAL_MAX_DELAY);
 800119a:	4d11      	ldr	r5, [pc, #68]	@ (80011e0 <INA219_ReadCurrent+0x50>)
 800119c:	4601      	mov	r1, r0
 800119e:	f10d 020b 	add.w	r2, sp, #11
 80011a2:	4628      	mov	r0, r5
 80011a4:	9600      	str	r6, [sp, #0]
    uint8_t reg_address = 0x01; // Register address for current
 80011a6:	f88d 300b 	strb.w	r3, [sp, #11]
    HAL_I2C_Master_Transmit(&hi2c2, i2c_address, &reg_address, 1, HAL_MAX_DELAY);
 80011aa:	f002 f893 	bl	80032d4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2, i2c_address, buffer, 2, HAL_MAX_DELAY);
 80011ae:	aa03      	add	r2, sp, #12
 80011b0:	2302      	movs	r3, #2
 80011b2:	4621      	mov	r1, r4
 80011b4:	4628      	mov	r0, r5
 80011b6:	9600      	str	r6, [sp, #0]
 80011b8:	f002 f966 	bl	8003488 <HAL_I2C_Master_Receive>

    int16_t raw_current = (buffer[0] << 8) | buffer[1];
    // Current is directly multiplied by LSB
    return raw_current * 0.0001; // 100 µA per LSB
 80011bc:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 80011c0:	bac0      	revsh	r0, r0
 80011c2:	f7ff f9d3 	bl	800056c <__aeabi_i2d>
 80011c6:	a304      	add	r3, pc, #16	@ (adr r3, 80011d8 <INA219_ReadCurrent+0x48>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7ff fa38 	bl	8000640 <__aeabi_dmul>
 80011d0:	f7ff fd2e 	bl	8000c30 <__aeabi_d2f>
}
 80011d4:	b004      	add	sp, #16
 80011d6:	bd70      	pop	{r4, r5, r6, pc}
 80011d8:	eb1c432d 	.word	0xeb1c432d
 80011dc:	3f1a36e2 	.word	0x3f1a36e2
 80011e0:	20000204 	.word	0x20000204

080011e4 <INA219_ReadPower>:
 * @brief Reads the power from the INA219.
 *
 * @param i2c_address The I2C address of the INA219 device.
 * @return The power in watts.
 */
float INA219_ReadPower(uint8_t i2c_address) {
 80011e4:	b538      	push	{r3, r4, r5, lr}
 80011e6:	4605      	mov	r5, r0
    float current = INA219_ReadCurrent(i2c_address);
 80011e8:	f7ff ffd2 	bl	8001190 <INA219_ReadCurrent>
 80011ec:	4604      	mov	r4, r0
    float voltage = INA219_ReadBusVoltage(i2c_address);
 80011ee:	4628      	mov	r0, r5
 80011f0:	f7ff ff9e 	bl	8001130 <INA219_ReadBusVoltage>
 80011f4:	4601      	mov	r1, r0

    // Calculate power as the product of current and voltage
    float power = current * voltage;
 80011f6:	4620      	mov	r0, r4
 80011f8:	f7fe ffb2 	bl	8000160 <__aeabi_fmul>
    return power;
}
 80011fc:	bd38      	pop	{r3, r4, r5, pc}

080011fe <INA219_Init>:
/**
 * @brief Initializes and calibrates all four INA219 devices.
 *
 * This function calls INA219_Calibrate() for each of the four I2C addresses.
 */
void INA219_Init(void) {
 80011fe:	b508      	push	{r3, lr}
    // Calibrate all four INA219 devices
    INA219_Calibrate(USB1);
 8001200:	2086      	movs	r0, #134	@ 0x86
 8001202:	f7ff ff75 	bl	80010f0 <INA219_Calibrate>
    INA219_Calibrate(USB2);
 8001206:	2084      	movs	r0, #132	@ 0x84
 8001208:	f7ff ff72 	bl	80010f0 <INA219_Calibrate>
    INA219_Calibrate(USB3);
 800120c:	2082      	movs	r0, #130	@ 0x82
 800120e:	f7ff ff6f 	bl	80010f0 <INA219_Calibrate>
    INA219_Calibrate(USB4);
}
 8001212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    INA219_Calibrate(USB4);
 8001216:	2080      	movs	r0, #128	@ 0x80
 8001218:	f7ff bf6a 	b.w	80010f0 <INA219_Calibrate>

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b510      	push	{r4, lr}
 800121e:	b090      	sub	sp, #64	@ 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001220:	2210      	movs	r2, #16
 8001222:	2100      	movs	r1, #0
 8001224:	a809      	add	r0, sp, #36	@ 0x24
 8001226:	f004 fc88 	bl	8005b3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122a:	2214      	movs	r2, #20
 800122c:	2100      	movs	r1, #0
 800122e:	a801      	add	r0, sp, #4
 8001230:	f004 fc83 	bl	8005b3a <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001234:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001236:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800123a:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800123c:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001240:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001244:	e9cd 430d 	strd	r4, r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001248:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800124e:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001250:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001252:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001254:	f003 f886 	bl	8004364 <HAL_RCC_OscConfig>
 8001258:	b108      	cbz	r0, 800125e <SystemClock_Config+0x42>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800125c:	e7fe      	b.n	800125c <SystemClock_Config+0x40>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001260:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001264:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001268:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126a:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800126e:	4621      	mov	r1, r4
 8001270:	a801      	add	r0, sp, #4
 8001272:	f003 fa3f 	bl	80046f4 <HAL_RCC_ClockConfig>
 8001276:	b108      	cbz	r0, 800127c <SystemClock_Config+0x60>
 8001278:	b672      	cpsid	i
  while (1)
 800127a:	e7fe      	b.n	800127a <SystemClock_Config+0x5e>
}
 800127c:	b010      	add	sp, #64	@ 0x40
 800127e:	bd10      	pop	{r4, pc}

08001280 <Main_Screen>:
  counter = 0;
 8001280:	2200      	movs	r2, #0
{
 8001282:	b508      	push	{r3, lr}
  counter = 0;
 8001284:	4b03      	ldr	r3, [pc, #12]	@ (8001294 <Main_Screen+0x14>)
 8001286:	801a      	strh	r2, [r3, #0]
  ST7789_Main_Screen();
 8001288:	f001 fa02 	bl	8002690 <ST7789_Main_Screen>
}
 800128c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Selection_Screen();
 8001290:	f000 bab4 	b.w	80017fc <Selection_Screen>
 8001294:	200002ba 	.word	0x200002ba

08001298 <Countdown>:
{
 8001298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ST7789_DrawLine(10,140,30,130,RED);
 800129c:	f44f 4678 	mov.w	r6, #63488	@ 0xf800
{
 80012a0:	b085      	sub	sp, #20
 80012a2:	4605      	mov	r5, r0
    ST7789_DrawLine(10,140,30,130,RED);
 80012a4:	2382      	movs	r3, #130	@ 0x82
 80012a6:	221e      	movs	r2, #30
 80012a8:	218c      	movs	r1, #140	@ 0x8c
    uint16_t seconds = minute * 60; // Pretvorba minuta u sekunde
 80012aa:	ebc0 1400 	rsb	r4, r0, r0, lsl #4
    ST7789_DrawLine(10,140,30,130,RED);
 80012ae:	9600      	str	r6, [sp, #0]
 80012b0:	200a      	movs	r0, #10
 80012b2:	f000 fda9 	bl	8001e08 <ST7789_DrawLine>
    ST7789_DrawLine(230,140,210,130,RED);
 80012b6:	2382      	movs	r3, #130	@ 0x82
 80012b8:	9600      	str	r6, [sp, #0]
 80012ba:	22d2      	movs	r2, #210	@ 0xd2
 80012bc:	218c      	movs	r1, #140	@ 0x8c
 80012be:	20e6      	movs	r0, #230	@ 0xe6
 80012c0:	f000 fda2 	bl	8001e08 <ST7789_DrawLine>
        float angle = M_PI * (182+180.0 * (float)(minute * 60 - seconds) / (minute * 60)) / 180.0;
 80012c4:	233c      	movs	r3, #60	@ 0x3c
 80012c6:	f04f 0a00 	mov.w	sl, #0
 80012ca:	435d      	muls	r5, r3
    uint16_t seconds = minute * 60; // Pretvorba minuta u sekunde
 80012cc:	00a4      	lsls	r4, r4, #2
 80012ce:	b2a4      	uxth	r4, r4
        float angle = M_PI * (182+180.0 * (float)(minute * 60 - seconds) / (minute * 60)) / 180.0;
 80012d0:	f8df b124 	ldr.w	fp, [pc, #292]	@ 80013f8 <Countdown+0x160>
 80012d4:	1b2e      	subs	r6, r5, r4
    while (seconds > 0)
 80012d6:	2c00      	cmp	r4, #0
 80012d8:	d07e      	beq.n	80013d8 <Countdown+0x140>
        uint8_t display_seconds = seconds % 60;
 80012da:	233c      	movs	r3, #60	@ 0x3c
 80012dc:	fbb4 f2f3 	udiv	r2, r4, r3
 80012e0:	fb03 4312 	mls	r3, r3, r2, r4
        sprintf(time, "%02d:%02d", display_minutes, display_seconds);
 80012e4:	4945      	ldr	r1, [pc, #276]	@ (80013fc <Countdown+0x164>)
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	b292      	uxth	r2, r2
 80012ea:	4845      	ldr	r0, [pc, #276]	@ (8001400 <Countdown+0x168>)
 80012ec:	f004 fbc2 	bl	8005a74 <siprintf>
        ST7789_WriteString(80, 100, time, Font_16x26, GBLUE, BLACK);
 80012f0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80012f4:	2100      	movs	r1, #0
 80012f6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80012fa:	4b42      	ldr	r3, [pc, #264]	@ (8001404 <Countdown+0x16c>)
 80012fc:	2164      	movs	r1, #100	@ 0x64
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	2050      	movs	r0, #80	@ 0x50
 8001302:	9200      	str	r2, [sp, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a3e      	ldr	r2, [pc, #248]	@ (8001400 <Countdown+0x168>)
 8001308:	f000 fefe 	bl	8002108 <ST7789_WriteString>
        float angle = M_PI * (182+180.0 * (float)(minute * 60 - seconds) / (minute * 60)) / 180.0;
 800130c:	4630      	mov	r0, r6
 800130e:	f7ff fd99 	bl	8000e44 <__aeabi_i2f>
 8001312:	f7ff f93d 	bl	8000590 <__aeabi_f2d>
 8001316:	4652      	mov	r2, sl
 8001318:	465b      	mov	r3, fp
 800131a:	f7ff f991 	bl	8000640 <__aeabi_dmul>
 800131e:	4680      	mov	r8, r0
 8001320:	4628      	mov	r0, r5
 8001322:	4689      	mov	r9, r1
 8001324:	f7ff f922 	bl	800056c <__aeabi_i2d>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4640      	mov	r0, r8
 800132e:	4649      	mov	r1, r9
 8001330:	f7ff fab0 	bl	8000894 <__aeabi_ddiv>
 8001334:	a32c      	add	r3, pc, #176	@ (adr r3, 80013e8 <Countdown+0x150>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f7fe ffcb 	bl	80002d4 <__adddf3>
 800133e:	a32c      	add	r3, pc, #176	@ (adr r3, 80013f0 <Countdown+0x158>)
 8001340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001344:	f7ff f97c 	bl	8000640 <__aeabi_dmul>
 8001348:	4652      	mov	r2, sl
 800134a:	465b      	mov	r3, fp
 800134c:	f7ff faa2 	bl	8000894 <__aeabi_ddiv>
 8001350:	f7ff fc6e 	bl	8000c30 <__aeabi_d2f>
        int16_t x = centerX + (int16_t)(radius * cos(angle));
 8001354:	f7ff f91c 	bl	8000590 <__aeabi_f2d>
 8001358:	4680      	mov	r8, r0
 800135a:	4689      	mov	r9, r1
 800135c:	f006 fcbe 	bl	8007cdc <cos>
 8001360:	2200      	movs	r2, #0
 8001362:	4b29      	ldr	r3, [pc, #164]	@ (8001408 <Countdown+0x170>)
 8001364:	f7ff f96c 	bl	8000640 <__aeabi_dmul>
 8001368:	f7ff fc1a 	bl	8000ba0 <__aeabi_d2iz>
        int16_t y = centerY + (int16_t)(radius * sin(angle)); // Ispravno kretanje u smjeru kazaljke
 800136c:	4649      	mov	r1, r9
        int16_t x = centerX + (int16_t)(radius * cos(angle));
 800136e:	f100 0778 	add.w	r7, r0, #120	@ 0x78
        int16_t y = centerY + (int16_t)(radius * sin(angle)); // Ispravno kretanje u smjeru kazaljke
 8001372:	4640      	mov	r0, r8
 8001374:	f006 fcf8 	bl	8007d68 <sin>
 8001378:	2200      	movs	r2, #0
 800137a:	4b23      	ldr	r3, [pc, #140]	@ (8001408 <Countdown+0x170>)
 800137c:	f7ff f960 	bl	8000640 <__aeabi_dmul>
 8001380:	f7ff fc0e 	bl	8000ba0 <__aeabi_d2iz>
 8001384:	f100 0878 	add.w	r8, r0, #120	@ 0x78
        int16_t x = centerX + (int16_t)(radius * cos(angle));
 8001388:	b23f      	sxth	r7, r7
        int16_t y = centerY + (int16_t)(radius * sin(angle)); // Ispravno kretanje u smjeru kazaljke
 800138a:	fa0f f888 	sxth.w	r8, r8
        ST7789_DrawFilledCircle(x, y, 5, RED);
 800138e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001392:	2205      	movs	r2, #5
 8001394:	4641      	mov	r1, r8
 8001396:	4638      	mov	r0, r7
 8001398:	f000 ffba 	bl	8002310 <ST7789_DrawFilledCircle>
        if (seconds < 11)
 800139c:	2c0a      	cmp	r4, #10
 800139e:	d804      	bhi.n	80013aa <Countdown+0x112>
            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 80013a0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80013a4:	4819      	ldr	r0, [pc, #100]	@ (800140c <Countdown+0x174>)
 80013a6:	f001 fdc2 	bl	8002f2e <HAL_GPIO_TogglePin>
        HAL_Delay(980);
 80013aa:	f44f 7075 	mov.w	r0, #980	@ 0x3d4
 80013ae:	f001 fb19 	bl	80029e4 <HAL_Delay>
        ST7789_DrawFilledCircle(x, y, 5, BLACK);
 80013b2:	2300      	movs	r3, #0
 80013b4:	2205      	movs	r2, #5
 80013b6:	4641      	mov	r1, r8
 80013b8:	4638      	mov	r0, r7
 80013ba:	f000 ffa9 	bl	8002310 <ST7789_DrawFilledCircle>
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET)
 80013be:	2104      	movs	r1, #4
 80013c0:	4813      	ldr	r0, [pc, #76]	@ (8001410 <Countdown+0x178>)
 80013c2:	f001 fda9 	bl	8002f18 <HAL_GPIO_ReadPin>
        seconds--;
 80013c6:	3c01      	subs	r4, #1
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET)
 80013c8:	2801      	cmp	r0, #1
        seconds--;
 80013ca:	b2a4      	uxth	r4, r4
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET)
 80013cc:	f106 0601 	add.w	r6, r6, #1
 80013d0:	d181      	bne.n	80012d6 <Countdown+0x3e>
            HAL_Delay(100); // Debounce delay
 80013d2:	2064      	movs	r0, #100	@ 0x64
 80013d4:	f001 fb06 	bl	80029e4 <HAL_Delay>
}
 80013d8:	b005      	add	sp, #20
 80013da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Main_Screen();
 80013de:	f7ff bf4f 	b.w	8001280 <Main_Screen>
 80013e2:	bf00      	nop
 80013e4:	f3af 8000 	nop.w
 80013e8:	00000000 	.word	0x00000000
 80013ec:	4066c000 	.word	0x4066c000
 80013f0:	54442d18 	.word	0x54442d18
 80013f4:	400921fb 	.word	0x400921fb
 80013f8:	40668000 	.word	0x40668000
 80013fc:	0800adde 	.word	0x0800adde
 8001400:	20000298 	.word	0x20000298
 8001404:	20000000 	.word	0x20000000
 8001408:	40590000 	.word	0x40590000
 800140c:	40010c00 	.word	0x40010c00
 8001410:	40010800 	.word	0x40010800

08001414 <Timer_Screen>:
{
 8001414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    timer_flag = 1;    // Set the flag for Timer Screen
 8001418:	2301      	movs	r3, #1
 800141a:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 80014d8 <Timer_Screen+0xc4>
    counter = 1;       // Initialize to 1 minute
 800141e:	4d2f      	ldr	r5, [pc, #188]	@ (80014dc <Timer_Screen+0xc8>)
    ST7789_Fill_Color(BLACK); // Clear the screen
 8001420:	2000      	movs	r0, #0
    timer_flag = 1;    // Set the flag for Timer Screen
 8001422:	f888 3000 	strb.w	r3, [r8]
    counter = 1;       // Initialize to 1 minute
 8001426:	802b      	strh	r3, [r5, #0]
    ST7789_Fill_Color(BLACK); // Clear the screen
 8001428:	f000 fbee 	bl	8001c08 <ST7789_Fill_Color>
    	ST7789_WriteString(50, 75, "Time:", Font_11x18, GBLUE, BLACK);
 800142c:	4e2c      	ldr	r6, [pc, #176]	@ (80014e0 <Timer_Screen+0xcc>)
        sprintf(time_str,"%d min ", counter);
 800142e:	f8df 90b4 	ldr.w	r9, [pc, #180]	@ 80014e4 <Timer_Screen+0xd0>
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET)
 8001432:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80014e8 <Timer_Screen+0xd4>
    	ST7789_WriteString(50, 75, "Time:", Font_11x18, GBLUE, BLACK);
 8001436:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800143a:	2400      	movs	r4, #0
 800143c:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8001440:	6873      	ldr	r3, [r6, #4]
 8001442:	214b      	movs	r1, #75	@ 0x4b
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	6833      	ldr	r3, [r6, #0]
 8001448:	2032      	movs	r0, #50	@ 0x32
 800144a:	4a28      	ldr	r2, [pc, #160]	@ (80014ec <Timer_Screen+0xd8>)
 800144c:	f000 fe5c 	bl	8002108 <ST7789_WriteString>
        sprintf(time_str,"%d min ", counter);
 8001450:	f9b5 2000 	ldrsh.w	r2, [r5]
 8001454:	4926      	ldr	r1, [pc, #152]	@ (80014f0 <Timer_Screen+0xdc>)
 8001456:	4648      	mov	r0, r9
 8001458:	f004 fb0c 	bl	8005a74 <siprintf>
        ST7789_WriteString(80, 100, time_str, Font_16x26, GBLUE, BLACK);
 800145c:	e9cd 7401 	strd	r7, r4, [sp, #4]
 8001460:	4b24      	ldr	r3, [pc, #144]	@ (80014f4 <Timer_Screen+0xe0>)
 8001462:	2164      	movs	r1, #100	@ 0x64
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	2050      	movs	r0, #80	@ 0x50
 8001468:	9200      	str	r2, [sp, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	464a      	mov	r2, r9
 800146e:	f000 fe4b 	bl	8002108 <ST7789_WriteString>
        HAL_Delay(200); // Short delay for display stability
 8001472:	20c8      	movs	r0, #200	@ 0xc8
 8001474:	f001 fab6 	bl	80029e4 <HAL_Delay>
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET)
 8001478:	2104      	movs	r1, #4
 800147a:	4650      	mov	r0, sl
 800147c:	f001 fd4c 	bl	8002f18 <HAL_GPIO_ReadPin>
 8001480:	2801      	cmp	r0, #1
 8001482:	d1d8      	bne.n	8001436 <Timer_Screen+0x22>
            HAL_Delay(200); // Debounce delay
 8001484:	20c8      	movs	r0, #200	@ 0xc8
 8001486:	f001 faad 	bl	80029e4 <HAL_Delay>
            ST7789_Fill_Color(BLACK); // Clear the screen
 800148a:	4620      	mov	r0, r4
 800148c:	f000 fbbc 	bl	8001c08 <ST7789_Fill_Color>
            sprintf(time_str,"Time: %d min ", counter);
 8001490:	f9b5 2000 	ldrsh.w	r2, [r5]
 8001494:	4918      	ldr	r1, [pc, #96]	@ (80014f8 <Timer_Screen+0xe4>)
 8001496:	4813      	ldr	r0, [pc, #76]	@ (80014e4 <Timer_Screen+0xd0>)
 8001498:	f004 faec 	bl	8005a74 <siprintf>
			ST7789_WriteString(50, 170, time_str, Font_11x18, GBLUE, BLACK);// Display the choosen time
 800149c:	e9cd 7401 	strd	r7, r4, [sp, #4]
 80014a0:	6873      	ldr	r3, [r6, #4]
 80014a2:	21aa      	movs	r1, #170	@ 0xaa
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	6833      	ldr	r3, [r6, #0]
 80014a8:	2032      	movs	r0, #50	@ 0x32
 80014aa:	4a0e      	ldr	r2, [pc, #56]	@ (80014e4 <Timer_Screen+0xd0>)
 80014ac:	f000 fe2c 	bl	8002108 <ST7789_WriteString>
            ST7789_DrawRectangle(45,190,195,165,0xce79);
 80014b0:	f64c 6379 	movw	r3, #52857	@ 0xce79
 80014b4:	22c3      	movs	r2, #195	@ 0xc3
 80014b6:	21be      	movs	r1, #190	@ 0xbe
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	202d      	movs	r0, #45	@ 0x2d
 80014bc:	23a5      	movs	r3, #165	@ 0xa5
 80014be:	f000 fcfd 	bl	8001ebc <ST7789_DrawRectangle>
            Countdown(counter); // Start countdown with the current time
 80014c2:	7828      	ldrb	r0, [r5, #0]
 80014c4:	f7ff fee8 	bl	8001298 <Countdown>
    timer_flag = 0; // Reset the flag after exiting Timer Screen
 80014c8:	f888 4000 	strb.w	r4, [r8]
}
 80014cc:	b004      	add	sp, #16
 80014ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    Main_Screen();  // Return to the main screen
 80014d2:	f7ff bed5 	b.w	8001280 <Main_Screen>
 80014d6:	bf00      	nop
 80014d8:	200002b4 	.word	0x200002b4
 80014dc:	200002ba 	.word	0x200002ba
 80014e0:	20000008 	.word	0x20000008
 80014e4:	20000288 	.word	0x20000288
 80014e8:	40010800 	.word	0x40010800
 80014ec:	0800ade8 	.word	0x0800ade8
 80014f0:	0800adf4 	.word	0x0800adf4
 80014f4:	20000000 	.word	0x20000000
 80014f8:	0800adee 	.word	0x0800adee

080014fc <Power_Screen>:
    power_flag = 1;    // Set the flag for Power Screen
 80014fc:	2301      	movs	r3, #1
    counter = 0;       // Initialize to USB1
 80014fe:	2000      	movs	r0, #0
{
 8001500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    power_flag = 1;    // Set the flag for Power Screen
 8001504:	4aa6      	ldr	r2, [pc, #664]	@ (80017a0 <Power_Screen+0x2a4>)
{
 8001506:	b089      	sub	sp, #36	@ 0x24
    power_flag = 1;    // Set the flag for Power Screen
 8001508:	7013      	strb	r3, [r2, #0]
    counter = 0;       // Initialize to USB1
 800150a:	4ba6      	ldr	r3, [pc, #664]	@ (80017a4 <Power_Screen+0x2a8>)
        ST7789_DrawLine(20,130,22+current*200,130,RED);
 800150c:	f8df 9298 	ldr.w	r9, [pc, #664]	@ 80017a8 <Power_Screen+0x2ac>
    counter = 0;       // Initialize to USB1
 8001510:	8018      	strh	r0, [r3, #0]
    ST7789_Fill_Color(BLACK); // Clear the screen
 8001512:	f000 fb79 	bl	8001c08 <ST7789_Fill_Color>
        uint8_t current_port = counter + 1; // USB ports from 1 to 4
 8001516:	4ba3      	ldr	r3, [pc, #652]	@ (80017a4 <Power_Screen+0x2a8>)
 8001518:	4fa4      	ldr	r7, [pc, #656]	@ (80017ac <Power_Screen+0x2b0>)
 800151a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800151e:	4ea4      	ldr	r6, [pc, #656]	@ (80017b0 <Power_Screen+0x2b4>)
 8001520:	1c5c      	adds	r4, r3, #1
 8001522:	4da4      	ldr	r5, [pc, #656]	@ (80017b4 <Power_Screen+0x2b8>)
 8001524:	b2e4      	uxtb	r4, r4
        switch (counter)
 8001526:	2b03      	cmp	r3, #3
 8001528:	d81d      	bhi.n	8001566 <Power_Screen+0x6a>
 800152a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800152e:	0004      	.short	0x0004
 8001530:	010d00f7 	.word	0x010d00f7
 8001534:	0123      	.short	0x0123
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800153c:	489e      	ldr	r0, [pc, #632]	@ (80017b8 <Power_Screen+0x2bc>)
 800153e:	f001 fcf1 	bl	8002f24 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8001548:	489b      	ldr	r0, [pc, #620]	@ (80017b8 <Power_Screen+0x2bc>)
 800154a:	f001 fceb 	bl	8002f24 <HAL_GPIO_WritePin>
                bus_voltage = INA219_ReadBusVoltage(USB1);
 800154e:	2086      	movs	r0, #134	@ 0x86
 8001550:	f7ff fdee 	bl	8001130 <INA219_ReadBusVoltage>
 8001554:	6038      	str	r0, [r7, #0]
                current = INA219_ReadCurrent(USB1);
 8001556:	2086      	movs	r0, #134	@ 0x86
 8001558:	f7ff fe1a 	bl	8001190 <INA219_ReadCurrent>
 800155c:	6030      	str	r0, [r6, #0]
                power = INA219_ReadPower(USB1);
 800155e:	2086      	movs	r0, #134	@ 0x86
                power = INA219_ReadPower(USB4);
 8001560:	f7ff fe40 	bl	80011e4 <INA219_ReadPower>
 8001564:	6028      	str	r0, [r5, #0]
        sprintf(port_name, "USB %d", current_port);
 8001566:	4622      	mov	r2, r4
 8001568:	4994      	ldr	r1, [pc, #592]	@ (80017bc <Power_Screen+0x2c0>)
 800156a:	a805      	add	r0, sp, #20
 800156c:	f004 fa82 	bl	8005a74 <siprintf>
        ST7789_WriteString(70, 20, port_name, Font_16x26, GBLUE, BLACK);
 8001570:	2400      	movs	r4, #0
 8001572:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001576:	e9cd 2401 	strd	r2, r4, [sp, #4]
 800157a:	4b91      	ldr	r3, [pc, #580]	@ (80017c0 <Power_Screen+0x2c4>)
 800157c:	2114      	movs	r1, #20
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	2046      	movs	r0, #70	@ 0x46
 8001582:	9200      	str	r2, [sp, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	aa05      	add	r2, sp, #20
 8001588:	f000 fdbe 	bl	8002108 <ST7789_WriteString>
        sprintf(voltage_str, "Voltage: %.2f V ", bus_voltage);
 800158c:	6838      	ldr	r0, [r7, #0]
 800158e:	f7fe ffff 	bl	8000590 <__aeabi_f2d>
        ST7789_WriteString(20, 60, voltage_str, Font_11x18, WHITE, BLACK);
 8001592:	f64f 7bff 	movw	fp, #65535	@ 0xffff
 8001596:	f8df 822c 	ldr.w	r8, [pc, #556]	@ 80017c4 <Power_Screen+0x2c8>
        sprintf(voltage_str, "Voltage: %.2f V ", bus_voltage);
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	488a      	ldr	r0, [pc, #552]	@ (80017c8 <Power_Screen+0x2cc>)
 80015a0:	498a      	ldr	r1, [pc, #552]	@ (80017cc <Power_Screen+0x2d0>)
 80015a2:	f004 fa67 	bl	8005a74 <siprintf>
        ST7789_WriteString(20, 60, voltage_str, Font_11x18, WHITE, BLACK);
 80015a6:	9402      	str	r4, [sp, #8]
 80015a8:	f8cd b004 	str.w	fp, [sp, #4]
 80015ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80015b0:	4a85      	ldr	r2, [pc, #532]	@ (80017c8 <Power_Screen+0x2cc>)
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	f8d8 3000 	ldr.w	r3, [r8]
 80015b8:	213c      	movs	r1, #60	@ 0x3c
 80015ba:	2014      	movs	r0, #20
 80015bc:	f000 fda4 	bl	8002108 <ST7789_WriteString>
        ST7789_DrawLine(20,85,bus_voltage*36,85,RED);
 80015c0:	4983      	ldr	r1, [pc, #524]	@ (80017d0 <Power_Screen+0x2d4>)
 80015c2:	6838      	ldr	r0, [r7, #0]
 80015c4:	f7fe fdcc 	bl	8000160 <__aeabi_fmul>
 80015c8:	f7ff fc90 	bl	8000eec <__aeabi_f2uiz>
 80015cc:	f44f 4a78 	mov.w	sl, #63488	@ 0xf800
 80015d0:	2355      	movs	r3, #85	@ 0x55
 80015d2:	b282      	uxth	r2, r0
 80015d4:	4619      	mov	r1, r3
 80015d6:	2014      	movs	r0, #20
 80015d8:	f8cd a000 	str.w	sl, [sp]
 80015dc:	f000 fc14 	bl	8001e08 <ST7789_DrawLine>
        ST7789_DrawLine(20+bus_voltage*36,85,200,85,BLACK);
 80015e0:	6838      	ldr	r0, [r7, #0]
 80015e2:	497b      	ldr	r1, [pc, #492]	@ (80017d0 <Power_Screen+0x2d4>)
 80015e4:	f7fe fdbc 	bl	8000160 <__aeabi_fmul>
 80015e8:	497a      	ldr	r1, [pc, #488]	@ (80017d4 <Power_Screen+0x2d8>)
 80015ea:	f7ff fb77 	bl	8000cdc <__addsf3>
 80015ee:	f7ff fc7d 	bl	8000eec <__aeabi_f2uiz>
 80015f2:	2355      	movs	r3, #85	@ 0x55
 80015f4:	22c8      	movs	r2, #200	@ 0xc8
 80015f6:	4619      	mov	r1, r3
 80015f8:	b280      	uxth	r0, r0
 80015fa:	9400      	str	r4, [sp, #0]
 80015fc:	f000 fc04 	bl	8001e08 <ST7789_DrawLine>
        sprintf(current_str, "Current: %.2f A ", fabs(current));
 8001600:	6830      	ldr	r0, [r6, #0]
 8001602:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001606:	f7fe ffc3 	bl	8000590 <__aeabi_f2d>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4872      	ldr	r0, [pc, #456]	@ (80017d8 <Power_Screen+0x2dc>)
 8001610:	4972      	ldr	r1, [pc, #456]	@ (80017dc <Power_Screen+0x2e0>)
 8001612:	f004 fa2f 	bl	8005a74 <siprintf>
        ST7789_WriteString(20, 105, current_str, Font_11x18, WHITE, BLACK);
 8001616:	e9cd b401 	strd	fp, r4, [sp, #4]
 800161a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800161e:	4a6e      	ldr	r2, [pc, #440]	@ (80017d8 <Power_Screen+0x2dc>)
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	f8d8 3000 	ldr.w	r3, [r8]
 8001626:	2169      	movs	r1, #105	@ 0x69
 8001628:	2014      	movs	r0, #20
 800162a:	f000 fd6d 	bl	8002108 <ST7789_WriteString>
        ST7789_DrawLine(20,130,22+current*200,130,RED);
 800162e:	6830      	ldr	r0, [r6, #0]
 8001630:	496b      	ldr	r1, [pc, #428]	@ (80017e0 <Power_Screen+0x2e4>)
 8001632:	f7fe fd95 	bl	8000160 <__aeabi_fmul>
 8001636:	4649      	mov	r1, r9
 8001638:	f7ff fb50 	bl	8000cdc <__addsf3>
 800163c:	f7ff fc56 	bl	8000eec <__aeabi_f2uiz>
 8001640:	2382      	movs	r3, #130	@ 0x82
 8001642:	b282      	uxth	r2, r0
 8001644:	4619      	mov	r1, r3
 8001646:	2014      	movs	r0, #20
 8001648:	f8cd a000 	str.w	sl, [sp]
 800164c:	f000 fbdc 	bl	8001e08 <ST7789_DrawLine>
	    ST7789_DrawLine(22+current*200,130,200,130,BLACK);
 8001650:	6830      	ldr	r0, [r6, #0]
 8001652:	4963      	ldr	r1, [pc, #396]	@ (80017e0 <Power_Screen+0x2e4>)
 8001654:	f7fe fd84 	bl	8000160 <__aeabi_fmul>
 8001658:	4649      	mov	r1, r9
 800165a:	f7ff fb3f 	bl	8000cdc <__addsf3>
 800165e:	f7ff fc45 	bl	8000eec <__aeabi_f2uiz>
 8001662:	2382      	movs	r3, #130	@ 0x82
 8001664:	22c8      	movs	r2, #200	@ 0xc8
 8001666:	4619      	mov	r1, r3
 8001668:	b280      	uxth	r0, r0
 800166a:	9400      	str	r4, [sp, #0]
 800166c:	f000 fbcc 	bl	8001e08 <ST7789_DrawLine>
        sprintf(power_str, "Power:   %.2f W ", fabs(power));
 8001670:	6828      	ldr	r0, [r5, #0]
 8001672:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001676:	f7fe ff8b 	bl	8000590 <__aeabi_f2d>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4859      	ldr	r0, [pc, #356]	@ (80017e4 <Power_Screen+0x2e8>)
 8001680:	4959      	ldr	r1, [pc, #356]	@ (80017e8 <Power_Screen+0x2ec>)
 8001682:	f004 f9f7 	bl	8005a74 <siprintf>
        ST7789_WriteString(20, 150, power_str, Font_11x18, WHITE, BLACK);
 8001686:	e9cd b401 	strd	fp, r4, [sp, #4]
 800168a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800168e:	4a55      	ldr	r2, [pc, #340]	@ (80017e4 <Power_Screen+0x2e8>)
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	f8d8 3000 	ldr.w	r3, [r8]
 8001696:	2196      	movs	r1, #150	@ 0x96
 8001698:	2014      	movs	r0, #20
 800169a:	f000 fd35 	bl	8002108 <ST7789_WriteString>
        ST7789_DrawLine(20,175,22+fabs(power)*57,175,RED);
 800169e:	6828      	ldr	r0, [r5, #0]
 80016a0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80016a4:	f7fe ff74 	bl	8000590 <__aeabi_f2d>
 80016a8:	2200      	movs	r2, #0
 80016aa:	4b50      	ldr	r3, [pc, #320]	@ (80017ec <Power_Screen+0x2f0>)
 80016ac:	f7fe ffc8 	bl	8000640 <__aeabi_dmul>
 80016b0:	2200      	movs	r2, #0
 80016b2:	4b4f      	ldr	r3, [pc, #316]	@ (80017f0 <Power_Screen+0x2f4>)
 80016b4:	f7fe fe0e 	bl	80002d4 <__adddf3>
 80016b8:	f7ff fa9a 	bl	8000bf0 <__aeabi_d2uiz>
 80016bc:	23af      	movs	r3, #175	@ 0xaf
 80016be:	b282      	uxth	r2, r0
 80016c0:	4619      	mov	r1, r3
 80016c2:	2014      	movs	r0, #20
 80016c4:	f8cd a000 	str.w	sl, [sp]
 80016c8:	f000 fb9e 	bl	8001e08 <ST7789_DrawLine>
	    ST7789_DrawLine(22+power*57,175,200,175,BLACK);
 80016cc:	6828      	ldr	r0, [r5, #0]
 80016ce:	4949      	ldr	r1, [pc, #292]	@ (80017f4 <Power_Screen+0x2f8>)
 80016d0:	f7fe fd46 	bl	8000160 <__aeabi_fmul>
 80016d4:	4649      	mov	r1, r9
 80016d6:	f7ff fb01 	bl	8000cdc <__addsf3>
 80016da:	f7ff fc07 	bl	8000eec <__aeabi_f2uiz>
 80016de:	23af      	movs	r3, #175	@ 0xaf
 80016e0:	22c8      	movs	r2, #200	@ 0xc8
 80016e2:	4619      	mov	r1, r3
 80016e4:	b280      	uxth	r0, r0
 80016e6:	9400      	str	r4, [sp, #0]
 80016e8:	f000 fb8e 	bl	8001e08 <ST7789_DrawLine>
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET)
 80016ec:	2104      	movs	r1, #4
 80016ee:	4842      	ldr	r0, [pc, #264]	@ (80017f8 <Power_Screen+0x2fc>)
 80016f0:	f001 fc12 	bl	8002f18 <HAL_GPIO_ReadPin>
 80016f4:	2801      	cmp	r0, #1
 80016f6:	4605      	mov	r5, r0
 80016f8:	f47f af0d 	bne.w	8001516 <Power_Screen+0x1a>
            HAL_Delay(200); // Debounce delay
 80016fc:	20c8      	movs	r0, #200	@ 0xc8
 80016fe:	f001 f971 	bl	80029e4 <HAL_Delay>
            power_flag = 0;
 8001702:	4b27      	ldr	r3, [pc, #156]	@ (80017a0 <Power_Screen+0x2a4>)
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 8001704:	462a      	mov	r2, r5
 8001706:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800170a:	482b      	ldr	r0, [pc, #172]	@ (80017b8 <Power_Screen+0x2bc>)
            power_flag = 0;
 800170c:	701c      	strb	r4, [r3, #0]
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 800170e:	f001 fc09 	bl	8002f24 <HAL_GPIO_WritePin>
            Main_Screen();
 8001712:	f7ff fdb5 	bl	8001280 <Main_Screen>
}
 8001716:	b009      	add	sp, #36	@ 0x24
 8001718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800171c:	2201      	movs	r2, #1
 800171e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001722:	4825      	ldr	r0, [pc, #148]	@ (80017b8 <Power_Screen+0x2bc>)
 8001724:	f001 fbfe 	bl	8002f24 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 800172e:	4822      	ldr	r0, [pc, #136]	@ (80017b8 <Power_Screen+0x2bc>)
 8001730:	f001 fbf8 	bl	8002f24 <HAL_GPIO_WritePin>
                bus_voltage = INA219_ReadBusVoltage(USB2);
 8001734:	2084      	movs	r0, #132	@ 0x84
 8001736:	f7ff fcfb 	bl	8001130 <INA219_ReadBusVoltage>
 800173a:	6038      	str	r0, [r7, #0]
                current = INA219_ReadCurrent(USB2);
 800173c:	2084      	movs	r0, #132	@ 0x84
 800173e:	f7ff fd27 	bl	8001190 <INA219_ReadCurrent>
 8001742:	6030      	str	r0, [r6, #0]
                power = INA219_ReadPower(USB2);
 8001744:	2084      	movs	r0, #132	@ 0x84
 8001746:	e70b      	b.n	8001560 <Power_Screen+0x64>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001748:	2201      	movs	r2, #1
 800174a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800174e:	481a      	ldr	r0, [pc, #104]	@ (80017b8 <Power_Screen+0x2bc>)
 8001750:	f001 fbe8 	bl	8002f24 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_14, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 800175a:	4817      	ldr	r0, [pc, #92]	@ (80017b8 <Power_Screen+0x2bc>)
 800175c:	f001 fbe2 	bl	8002f24 <HAL_GPIO_WritePin>
                bus_voltage = INA219_ReadBusVoltage(USB3);
 8001760:	2082      	movs	r0, #130	@ 0x82
 8001762:	f7ff fce5 	bl	8001130 <INA219_ReadBusVoltage>
 8001766:	6038      	str	r0, [r7, #0]
                current = INA219_ReadCurrent(USB3);
 8001768:	2082      	movs	r0, #130	@ 0x82
 800176a:	f7ff fd11 	bl	8001190 <INA219_ReadCurrent>
 800176e:	6030      	str	r0, [r6, #0]
                power = INA219_ReadPower(USB3);
 8001770:	2082      	movs	r0, #130	@ 0x82
 8001772:	e6f5      	b.n	8001560 <Power_Screen+0x64>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001774:	2201      	movs	r2, #1
 8001776:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800177a:	480f      	ldr	r0, [pc, #60]	@ (80017b8 <Power_Screen+0x2bc>)
 800177c:	f001 fbd2 	bl	8002f24 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001786:	480c      	ldr	r0, [pc, #48]	@ (80017b8 <Power_Screen+0x2bc>)
 8001788:	f001 fbcc 	bl	8002f24 <HAL_GPIO_WritePin>
                bus_voltage = INA219_ReadBusVoltage(USB4);
 800178c:	2080      	movs	r0, #128	@ 0x80
 800178e:	f7ff fccf 	bl	8001130 <INA219_ReadBusVoltage>
 8001792:	6038      	str	r0, [r7, #0]
                current = INA219_ReadCurrent(USB4);
 8001794:	2080      	movs	r0, #128	@ 0x80
 8001796:	f7ff fcfb 	bl	8001190 <INA219_ReadCurrent>
 800179a:	6030      	str	r0, [r6, #0]
                power = INA219_ReadPower(USB4);
 800179c:	2080      	movs	r0, #128	@ 0x80
 800179e:	e6df      	b.n	8001560 <Power_Screen+0x64>
 80017a0:	200002b5 	.word	0x200002b5
 80017a4:	200002ba 	.word	0x200002ba
 80017a8:	41b00000 	.word	0x41b00000
 80017ac:	200002b0 	.word	0x200002b0
 80017b0:	200002ac 	.word	0x200002ac
 80017b4:	200002a8 	.word	0x200002a8
 80017b8:	40010c00 	.word	0x40010c00
 80017bc:	0800adfc 	.word	0x0800adfc
 80017c0:	20000000 	.word	0x20000000
 80017c4:	20000008 	.word	0x20000008
 80017c8:	20000278 	.word	0x20000278
 80017cc:	0800ae03 	.word	0x0800ae03
 80017d0:	42100000 	.word	0x42100000
 80017d4:	41a00000 	.word	0x41a00000
 80017d8:	20000268 	.word	0x20000268
 80017dc:	0800ae14 	.word	0x0800ae14
 80017e0:	43480000 	.word	0x43480000
 80017e4:	20000258 	.word	0x20000258
 80017e8:	0800ae25 	.word	0x0800ae25
 80017ec:	404c8000 	.word	0x404c8000
 80017f0:	40360000 	.word	0x40360000
 80017f4:	42640000 	.word	0x42640000
 80017f8:	40010800 	.word	0x40010800

080017fc <Selection_Screen>:
{
 80017fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    selection_flag = 1;  // Set the flag for Selection Screen
 8001800:	2301      	movs	r3, #1
 8001802:	4e2a      	ldr	r6, [pc, #168]	@ (80018ac <Selection_Screen+0xb0>)
    counter = 0;         // Initialize counter to 0
 8001804:	4f2a      	ldr	r7, [pc, #168]	@ (80018b0 <Selection_Screen+0xb4>)
    selection_flag = 1;  // Set the flag for Selection Screen
 8001806:	7033      	strb	r3, [r6, #0]
    counter = 0;         // Initialize counter to 0
 8001808:	2300      	movs	r3, #0
            ST7789_WriteString(95, 30, "Timer", Font_11x18, GBLUE, BLACK);
 800180a:	4c2a      	ldr	r4, [pc, #168]	@ (80018b4 <Selection_Screen+0xb8>)
 800180c:	f8df a0a8 	ldr.w	sl, [pc, #168]	@ 80018b8 <Selection_Screen+0xbc>
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET)
 8001810:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 80018bc <Selection_Screen+0xc0>
    counter = 0;         // Initialize counter to 0
 8001814:	803b      	strh	r3, [r7, #0]
        if (counter == 0)
 8001816:	f9b7 5000 	ldrsh.w	r5, [r7]
 800181a:	bb6d      	cbnz	r5, 8001878 <Selection_Screen+0x7c>
            ST7789_WriteString(95, 30, "Power", Font_11x18, GBLUE, BLACK);
 800181c:	f240 78ff 	movw	r8, #2047	@ 0x7ff
 8001820:	9502      	str	r5, [sp, #8]
 8001822:	f8cd 8004 	str.w	r8, [sp, #4]
 8001826:	6863      	ldr	r3, [r4, #4]
 8001828:	4a25      	ldr	r2, [pc, #148]	@ (80018c0 <Selection_Screen+0xc4>)
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	6823      	ldr	r3, [r4, #0]
            ST7789_WriteString(95, 30, "Timer", Font_11x18, GBLUE, BLACK);
 800182e:	211e      	movs	r1, #30
 8001830:	205f      	movs	r0, #95	@ 0x5f
 8001832:	f000 fc69 	bl	8002108 <ST7789_WriteString>
            ST7789_DrawCircle(64, 129, 48, BLACK);
 8001836:	4643      	mov	r3, r8
 8001838:	2230      	movs	r2, #48	@ 0x30
 800183a:	2181      	movs	r1, #129	@ 0x81
 800183c:	2040      	movs	r0, #64	@ 0x40
 800183e:	f000 fb79 	bl	8001f34 <ST7789_DrawCircle>
            ST7789_DrawCircle(174, 129, 48, GBLUE);
 8001842:	462b      	mov	r3, r5
 8001844:	2230      	movs	r2, #48	@ 0x30
 8001846:	2181      	movs	r1, #129	@ 0x81
 8001848:	20ae      	movs	r0, #174	@ 0xae
 800184a:	f000 fb73 	bl	8001f34 <ST7789_DrawCircle>
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET)
 800184e:	2104      	movs	r1, #4
 8001850:	4648      	mov	r0, r9
 8001852:	f001 fb61 	bl	8002f18 <HAL_GPIO_ReadPin>
 8001856:	2801      	cmp	r0, #1
 8001858:	d1dd      	bne.n	8001816 <Selection_Screen+0x1a>
            HAL_Delay(200); // Debounce delay
 800185a:	20c8      	movs	r0, #200	@ 0xc8
 800185c:	f001 f8c2 	bl	80029e4 <HAL_Delay>
            ST7789_Fill_Color(BLACK); // Clear the screen
 8001860:	2000      	movs	r0, #0
 8001862:	f000 f9d1 	bl	8001c08 <ST7789_Fill_Color>
            if (counter == 0)
 8001866:	f9b7 3000 	ldrsh.w	r3, [r7]
 800186a:	b993      	cbnz	r3, 8001892 <Selection_Screen+0x96>
                selection_flag = 0;
 800186c:	7033      	strb	r3, [r6, #0]
}
 800186e:	b004      	add	sp, #16
 8001870:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                Power_Screen();
 8001874:	f7ff be42 	b.w	80014fc <Power_Screen>
        else if (counter == 1)
 8001878:	2d01      	cmp	r5, #1
 800187a:	d1e8      	bne.n	800184e <Selection_Screen+0x52>
            ST7789_WriteString(95, 30, "Timer", Font_11x18, GBLUE, BLACK);
 800187c:	f240 75ff 	movw	r5, #2047	@ 0x7ff
 8001880:	f04f 0800 	mov.w	r8, #0
 8001884:	e9cd 5801 	strd	r5, r8, [sp, #4]
 8001888:	6863      	ldr	r3, [r4, #4]
 800188a:	4652      	mov	r2, sl
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	6823      	ldr	r3, [r4, #0]
 8001890:	e7cd      	b.n	800182e <Selection_Screen+0x32>
            else if (counter == 1)
 8001892:	2b01      	cmp	r3, #1
 8001894:	d106      	bne.n	80018a4 <Selection_Screen+0xa8>
                selection_flag = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	7033      	strb	r3, [r6, #0]
}
 800189a:	b004      	add	sp, #16
 800189c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                Timer_Screen();
 80018a0:	f7ff bdb8 	b.w	8001414 <Timer_Screen>
}
 80018a4:	b004      	add	sp, #16
 80018a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018aa:	bf00      	nop
 80018ac:	200002b6 	.word	0x200002b6
 80018b0:	200002ba 	.word	0x200002ba
 80018b4:	20000008 	.word	0x20000008
 80018b8:	0800ae3c 	.word	0x0800ae3c
 80018bc:	40010800 	.word	0x40010800
 80018c0:	0800ae36 	.word	0x0800ae36

080018c4 <main>:
{
 80018c4:	b508      	push	{r3, lr}
  HAL_Init();
 80018c6:	f001 f869 	bl	800299c <HAL_Init>
  SystemClock_Config();
 80018ca:	f7ff fca7 	bl	800121c <SystemClock_Config>
  MX_GPIO_Init();
 80018ce:	f7ff fb45 	bl	8000f5c <MX_GPIO_Init>
  MX_DMA_Init();
 80018d2:	f7ff fb2b 	bl	8000f2c <MX_DMA_Init>
  MX_SPI1_Init();
 80018d6:	f000 f84b 	bl	8001970 <MX_SPI1_Init>
  MX_TIM2_Init();
 80018da:	f000 ffb1 	bl	8002840 <MX_TIM2_Init>
  MX_I2C2_Init();
 80018de:	f7ff fbaf 	bl	8001040 <MX_I2C2_Init>
  ST7789_Init();    // Initialize the ST7789 display
 80018e2:	f000 f9bd 	bl	8001c60 <ST7789_Init>
  INA219_Init();    // Initialize the INA219 power sensor
 80018e6:	f7ff fc8a 	bl	80011fe <INA219_Init>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL); // Start encoder with interrupt for TIM2
 80018ea:	213c      	movs	r1, #60	@ 0x3c
 80018ec:	4807      	ldr	r0, [pc, #28]	@ (800190c <main+0x48>)
 80018ee:	f003 f9d9 	bl	8004ca4 <HAL_TIM_Encoder_Start_IT>
  ST7789_Starting_Screen(0, 40, GBLUE); // Display starting screen with coordinates (0, 40) and color GBLUE
 80018f2:	2000      	movs	r0, #0
 80018f4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80018f8:	2128      	movs	r1, #40	@ 0x28
 80018fa:	f000 fda7 	bl	800244c <ST7789_Starting_Screen>
  Main_Screen();    // Display the main screen
 80018fe:	f7ff fcbf 	bl	8001280 <Main_Screen>
  HAL_Delay(100);   // Delay for 100 milliseconds to allow initialization to stabilize
 8001902:	2064      	movs	r0, #100	@ 0x64
 8001904:	f001 f86e 	bl	80029e4 <HAL_Delay>
  while (1)
 8001908:	e7fe      	b.n	8001908 <main+0x44>
 800190a:	bf00      	nop
 800190c:	20000cbc 	.word	0x20000cbc

08001910 <HAL_TIM_IC_CaptureCallback>:
    step = __HAL_TIM_GET_COUNTER(htim);
 8001910:	6803      	ldr	r3, [r0, #0]
 8001912:	4a12      	ldr	r2, [pc, #72]	@ (800195c <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001916:	b29b      	uxth	r3, r3
 8001918:	8013      	strh	r3, [r2, #0]
    if (power_flag == 1)
 800191a:	4a11      	ldr	r2, [pc, #68]	@ (8001960 <HAL_TIM_IC_CaptureCallback+0x50>)
 800191c:	089b      	lsrs	r3, r3, #2
 800191e:	7812      	ldrb	r2, [r2, #0]
 8001920:	2a01      	cmp	r2, #1
 8001922:	d104      	bne.n	800192e <HAL_TIM_IC_CaptureCallback+0x1e>
        counter = step / 4 % 4;
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	4a0e      	ldr	r2, [pc, #56]	@ (8001964 <HAL_TIM_IC_CaptureCallback+0x54>)
 800192a:	8013      	strh	r3, [r2, #0]
}
 800192c:	4770      	bx	lr
    else if (timer_flag == 1)
 800192e:	4a0e      	ldr	r2, [pc, #56]	@ (8001968 <HAL_TIM_IC_CaptureCallback+0x58>)
        counter = step / 4 % 4;
 8001930:	b29b      	uxth	r3, r3
    else if (timer_flag == 1)
 8001932:	7812      	ldrb	r2, [r2, #0]
 8001934:	2a01      	cmp	r2, #1
 8001936:	d108      	bne.n	800194a <HAL_TIM_IC_CaptureCallback+0x3a>
    	counter = step / 4 % 60;
 8001938:	223c      	movs	r2, #60	@ 0x3c
 800193a:	fbb3 f1f2 	udiv	r1, r3, r2
 800193e:	fb02 3311 	mls	r3, r2, r1, r3
 8001942:	b29b      	uxth	r3, r3
        if (counter < 1) counter = 60;
 8001944:	b143      	cbz	r3, 8001958 <HAL_TIM_IC_CaptureCallback+0x48>
    	counter = step / 4 % 60;
 8001946:	b21b      	sxth	r3, r3
 8001948:	e7ee      	b.n	8001928 <HAL_TIM_IC_CaptureCallback+0x18>
        if (counter > 0)
 800194a:	b11b      	cbz	r3, 8001954 <HAL_TIM_IC_CaptureCallback+0x44>
        	counter = (counter + 1) % 2;
 800194c:	3301      	adds	r3, #1
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	e7e9      	b.n	8001928 <HAL_TIM_IC_CaptureCallback+0x18>
            counter = (counter - 1 + 2) % 2;  // +2 to keep result positive
 8001954:	2301      	movs	r3, #1
        else if (counter > 1) counter = 0;
 8001956:	e7e7      	b.n	8001928 <HAL_TIM_IC_CaptureCallback+0x18>
 8001958:	4613      	mov	r3, r2
 800195a:	e7e5      	b.n	8001928 <HAL_TIM_IC_CaptureCallback+0x18>
 800195c:	200002b8 	.word	0x200002b8
 8001960:	200002b5 	.word	0x200002b5
 8001964:	200002ba 	.word	0x200002ba
 8001968:	200002b4 	.word	0x200002b4

0800196c <Error_Handler>:
 800196c:	b672      	cpsid	i
  while (1)
 800196e:	e7fe      	b.n	800196e <Error_Handler+0x2>

08001970 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001970:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001972:	f44f 7382 	mov.w	r3, #260	@ 0x104
  hspi1.Instance = SPI1;
 8001976:	480d      	ldr	r0, [pc, #52]	@ (80019ac <MX_SPI1_Init+0x3c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001978:	4a0d      	ldr	r2, [pc, #52]	@ (80019b0 <MX_SPI1_Init+0x40>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800197a:	f44f 7100 	mov.w	r1, #512	@ 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800197e:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001982:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001984:	2208      	movs	r2, #8
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001986:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800198a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800198e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001992:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001994:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001996:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 800199a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800199c:	f002 ffce 	bl	800493c <HAL_SPI_Init>
 80019a0:	b118      	cbz	r0, 80019aa <MX_SPI1_Init+0x3a>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80019a6:	f7ff bfe1 	b.w	800196c <Error_Handler>
}
 80019aa:	bd08      	pop	{r3, pc}
 80019ac:	20000300 	.word	0x20000300
 80019b0:	40013000 	.word	0x40013000

080019b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019b4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b6:	2610      	movs	r6, #16
{
 80019b8:	4605      	mov	r5, r0
 80019ba:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	4632      	mov	r2, r6
 80019be:	2100      	movs	r1, #0
 80019c0:	a802      	add	r0, sp, #8
 80019c2:	f004 f8ba 	bl	8005b3a <memset>
  if(spiHandle->Instance==SPI1)
 80019c6:	682a      	ldr	r2, [r5, #0]
 80019c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a44 <HAL_SPI_MspInit+0x90>)
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d138      	bne.n	8001a40 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ce:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 80019d2:	699a      	ldr	r2, [r3, #24]
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|SDO_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d4:	481c      	ldr	r0, [pc, #112]	@ (8001a48 <HAL_SPI_MspInit+0x94>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80019da:	619a      	str	r2, [r3, #24]
 80019dc:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019de:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019e0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80019e4:	9200      	str	r2, [sp, #0]
 80019e6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e8:	699a      	ldr	r2, [r3, #24]

    __HAL_AFIO_REMAP_SPI1_ENABLE();

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80019ea:	4c18      	ldr	r4, [pc, #96]	@ (8001a4c <HAL_SPI_MspInit+0x98>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ec:	f042 0208 	orr.w	r2, r2, #8
 80019f0:	619a      	str	r2, [r3, #24]
 80019f2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2228      	movs	r2, #40	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a08:	f001 f9ae 	bl	8002d68 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001a0c:	4a10      	ldr	r2, [pc, #64]	@ (8001a50 <HAL_SPI_MspInit+0x9c>)
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001a0e:	4620      	mov	r0, r4
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001a10:	6853      	ldr	r3, [r2, #4]
 8001a12:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6053      	str	r3, [r2, #4]
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a54 <HAL_SPI_MspInit+0xa0>)
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a1e:	2280      	movs	r2, #128	@ 0x80
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a20:	e9c4 3600 	strd	r3, r6, [r4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a2a:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a2e:	e9c4 3306 	strd	r3, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001a32:	f001 f84d 	bl	8002ad0 <HAL_DMA_Init>
 8001a36:	b108      	cbz	r0, 8001a3c <HAL_SPI_MspInit+0x88>
    {
      Error_Handler();
 8001a38:	f7ff ff98 	bl	800196c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001a3c:	64ac      	str	r4, [r5, #72]	@ 0x48
 8001a3e:	6265      	str	r5, [r4, #36]	@ 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a40:	b006      	add	sp, #24
 8001a42:	bd70      	pop	{r4, r5, r6, pc}
 8001a44:	40013000 	.word	0x40013000
 8001a48:	40010c00 	.word	0x40010c00
 8001a4c:	200002bc 	.word	0x200002bc
 8001a50:	40010000 	.word	0x40010000
 8001a54:	40020030 	.word	0x40020030

08001a58 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001a58:	b513      	push	{r0, r1, r4, lr}
	ST7789_Select();
 8001a5a:	4c0f      	ldr	r4, [pc, #60]	@ (8001a98 <ST7789_WriteCommand+0x40>)
{
 8001a5c:	f88d 0007 	strb.w	r0, [sp, #7]
	ST7789_Select();
 8001a60:	2200      	movs	r2, #0
 8001a62:	4620      	mov	r0, r4
 8001a64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a68:	f001 fa5c 	bl	8002f24 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2140      	movs	r1, #64	@ 0x40
 8001a72:	f001 fa57 	bl	8002f24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7a:	f10d 0107 	add.w	r1, sp, #7
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4806      	ldr	r0, [pc, #24]	@ (8001a9c <ST7789_WriteCommand+0x44>)
 8001a82:	f002 ffb3 	bl	80049ec <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001a86:	2201      	movs	r2, #1
 8001a88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f001 fa49 	bl	8002f24 <HAL_GPIO_WritePin>
}
 8001a92:	b002      	add	sp, #8
 8001a94:	bd10      	pop	{r4, pc}
 8001a96:	bf00      	nop
 8001a98:	40010c00 	.word	0x40010c00
 8001a9c:	20000300 	.word	0x20000300

08001aa0 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8001aa0:	b513      	push	{r0, r1, r4, lr}
	ST7789_Select();
 8001aa2:	4c0f      	ldr	r4, [pc, #60]	@ (8001ae0 <ST7789_WriteSmallData+0x40>)
{
 8001aa4:	f88d 0007 	strb.w	r0, [sp, #7]
	ST7789_Select();
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ab0:	f001 fa38 	bl	8002f24 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	2140      	movs	r1, #64	@ 0x40
 8001aba:	f001 fa33 	bl	8002f24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	f10d 0107 	add.w	r1, sp, #7
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4806      	ldr	r0, [pc, #24]	@ (8001ae4 <ST7789_WriteSmallData+0x44>)
 8001aca:	f002 ff8f 	bl	80049ec <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f001 fa25 	bl	8002f24 <HAL_GPIO_WritePin>
}
 8001ada:	b002      	add	sp, #8
 8001adc:	bd10      	pop	{r4, pc}
 8001ade:	bf00      	nop
 8001ae0:	40010c00 	.word	0x40010c00
 8001ae4:	20000300 	.word	0x20000300

08001ae8 <ST7789_WriteData>:
{
 8001ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ST7789_Select();
 8001aec:	2200      	movs	r2, #0
{
 8001aee:	4605      	mov	r5, r0
 8001af0:	460c      	mov	r4, r1
	ST7789_Select();
 8001af2:	481a      	ldr	r0, [pc, #104]	@ (8001b5c <ST7789_WriteData+0x74>)
 8001af4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001af8:	f001 fa14 	bl	8002f24 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001afc:	2201      	movs	r2, #1
 8001afe:	2140      	movs	r1, #64	@ 0x40
 8001b00:	4816      	ldr	r0, [pc, #88]	@ (8001b5c <ST7789_WriteData+0x74>)
 8001b02:	f001 fa0f 	bl	8002f24 <HAL_GPIO_WritePin>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001b06:	f64f 78ff 	movw	r8, #65535	@ 0xffff
			if (DMA_MIN_SIZE <= buff_size)
 8001b0a:	f8df 9054 	ldr.w	r9, [pc, #84]	@ 8001b60 <ST7789_WriteData+0x78>
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001b0e:	4f15      	ldr	r7, [pc, #84]	@ (8001b64 <ST7789_WriteData+0x7c>)
	while (buff_size > 0) {
 8001b10:	b93c      	cbnz	r4, 8001b22 <ST7789_WriteData+0x3a>
}
 8001b12:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ST7789_UnSelect();
 8001b16:	2201      	movs	r2, #1
 8001b18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b1c:	480f      	ldr	r0, [pc, #60]	@ (8001b5c <ST7789_WriteData+0x74>)
 8001b1e:	f001 ba01 	b.w	8002f24 <HAL_GPIO_WritePin>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001b22:	4544      	cmp	r4, r8
 8001b24:	4626      	mov	r6, r4
 8001b26:	bf28      	it	cs
 8001b28:	4646      	movcs	r6, r8
			if (DMA_MIN_SIZE <= buff_size)
 8001b2a:	f8b9 3000 	ldrh.w	r3, [r9]
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001b2e:	b2b2      	uxth	r2, r6
			if (DMA_MIN_SIZE <= buff_size)
 8001b30:	42a3      	cmp	r3, r4
 8001b32:	d80b      	bhi.n	8001b4c <ST7789_WriteData+0x64>
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 8001b34:	4629      	mov	r1, r5
 8001b36:	480b      	ldr	r0, [pc, #44]	@ (8001b64 <ST7789_WriteData+0x7c>)
 8001b38:	f003 f808 	bl	8004b4c <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 8001b3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b3e:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d1fb      	bne.n	8001b3e <ST7789_WriteData+0x56>
		buff += chunk_size;
 8001b46:	4435      	add	r5, r6
		buff_size -= chunk_size;
 8001b48:	1ba4      	subs	r4, r4, r6
 8001b4a:	e7e1      	b.n	8001b10 <ST7789_WriteData+0x28>
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b50:	4629      	mov	r1, r5
 8001b52:	4638      	mov	r0, r7
 8001b54:	f002 ff4a 	bl	80049ec <HAL_SPI_Transmit>
 8001b58:	e7f5      	b.n	8001b46 <ST7789_WriteData+0x5e>
 8001b5a:	bf00      	nop
 8001b5c:	40010c00 	.word	0x40010c00
 8001b60:	20000010 	.word	0x20000010
 8001b64:	20000300 	.word	0x20000300

08001b68 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001b68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	ST7789_Select();
 8001b6c:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 8001bd4 <ST7789_SetAddressWindow+0x6c>
{
 8001b70:	4607      	mov	r7, r0
 8001b72:	460d      	mov	r5, r1
	ST7789_Select();
 8001b74:	4640      	mov	r0, r8
 8001b76:	f44f 7180 	mov.w	r1, #256	@ 0x100
{
 8001b7a:	4616      	mov	r6, r2
	ST7789_Select();
 8001b7c:	2200      	movs	r2, #0
{
 8001b7e:	461c      	mov	r4, r3
	ST7789_Select();
 8001b80:	f001 f9d0 	bl	8002f24 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8001b84:	202a      	movs	r0, #42	@ 0x2a
 8001b86:	f7ff ff67 	bl	8001a58 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
		ST7789_WriteData(data, sizeof(data));
 8001b8a:	2104      	movs	r1, #4
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8001b8c:	ba7f      	rev16	r7, r7
		ST7789_WriteData(data, sizeof(data));
 8001b8e:	eb0d 0001 	add.w	r0, sp, r1
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8001b92:	ba76      	rev16	r6, r6
 8001b94:	f8ad 7004 	strh.w	r7, [sp, #4]
 8001b98:	f8ad 6006 	strh.w	r6, [sp, #6]
		ST7789_WriteData(data, sizeof(data));
 8001b9c:	f7ff ffa4 	bl	8001ae8 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8001ba0:	202b      	movs	r0, #43	@ 0x2b
 8001ba2:	f7ff ff59 	bl	8001a58 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
		ST7789_WriteData(data, sizeof(data));
 8001ba6:	2104      	movs	r1, #4
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8001ba8:	ba6d      	rev16	r5, r5
		ST7789_WriteData(data, sizeof(data));
 8001baa:	eb0d 0001 	add.w	r0, sp, r1
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8001bae:	ba64      	rev16	r4, r4
 8001bb0:	f8ad 5004 	strh.w	r5, [sp, #4]
 8001bb4:	f8ad 4006 	strh.w	r4, [sp, #6]
		ST7789_WriteData(data, sizeof(data));
 8001bb8:	f7ff ff96 	bl	8001ae8 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001bbc:	202c      	movs	r0, #44	@ 0x2c
 8001bbe:	f7ff ff4b 	bl	8001a58 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bc8:	4640      	mov	r0, r8
}
 8001bca:	b002      	add	sp, #8
 8001bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ST7789_UnSelect();
 8001bd0:	f001 b9a8 	b.w	8002f24 <HAL_GPIO_WritePin>
 8001bd4:	40010c00 	.word	0x40010c00

08001bd8 <ST7789_SetRotation>:
{
 8001bd8:	b510      	push	{r4, lr}
 8001bda:	4604      	mov	r4, r0
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8001bdc:	2036      	movs	r0, #54	@ 0x36
 8001bde:	f7ff ff3b 	bl	8001a58 <ST7789_WriteCommand>
	switch (m) {
 8001be2:	2c03      	cmp	r4, #3
 8001be4:	d80e      	bhi.n	8001c04 <ST7789_SetRotation+0x2c>
 8001be6:	e8df f004 	tbb	[pc, r4]
 8001bea:	0702      	.short	0x0702
 8001bec:	0b09      	.short	0x0b09
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001bee:	20c0      	movs	r0, #192	@ 0xc0
}
 8001bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001bf4:	f7ff bf54 	b.w	8001aa0 <ST7789_WriteSmallData>
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001bf8:	20a0      	movs	r0, #160	@ 0xa0
 8001bfa:	e7f9      	b.n	8001bf0 <ST7789_SetRotation+0x18>
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	e7f7      	b.n	8001bf0 <ST7789_SetRotation+0x18>
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001c00:	2060      	movs	r0, #96	@ 0x60
 8001c02:	e7f5      	b.n	8001bf0 <ST7789_SetRotation+0x18>
}
 8001c04:	bd10      	pop	{r4, pc}
	...

08001c08 <ST7789_Fill_Color>:
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8001c08:	2100      	movs	r1, #0
{
 8001c0a:	b570      	push	{r4, r5, r6, lr}
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8001c0c:	23db      	movs	r3, #219	@ 0xdb
 8001c0e:	22ef      	movs	r2, #239	@ 0xef
{
 8001c10:	4605      	mov	r5, r0
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8001c12:	4608      	mov	r0, r1
 8001c14:	f7ff ffa8 	bl	8001b68 <ST7789_SetAddressWindow>
	ST7789_Select();
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c1e:	480e      	ldr	r0, [pc, #56]	@ (8001c58 <ST7789_Fill_Color+0x50>)
 8001c20:	f001 f980 	bl	8002f24 <HAL_GPIO_WritePin>
 8001c24:	242c      	movs	r4, #44	@ 0x2c

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
		{
			memset(disp_buf, color, sizeof(disp_buf));
 8001c26:	4e0d      	ldr	r6, [pc, #52]	@ (8001c5c <ST7789_Fill_Color+0x54>)
 8001c28:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	4630      	mov	r0, r6
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001c30:	3c01      	subs	r4, #1
			memset(disp_buf, color, sizeof(disp_buf));
 8001c32:	f003 ff82 	bl	8005b3a <memset>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001c36:	b2a4      	uxth	r4, r4
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 8001c38:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8001c3c:	4630      	mov	r0, r6
 8001c3e:	f7ff ff53 	bl	8001ae8 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001c42:	2c00      	cmp	r4, #0
 8001c44:	d1f0      	bne.n	8001c28 <ST7789_Fill_Color+0x20>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8001c46:	2201      	movs	r2, #1
}
 8001c48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ST7789_UnSelect();
 8001c4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c50:	4801      	ldr	r0, [pc, #4]	@ (8001c58 <ST7789_Fill_Color+0x50>)
 8001c52:	f001 b967 	b.w	8002f24 <HAL_GPIO_WritePin>
 8001c56:	bf00      	nop
 8001c58:	40010c00 	.word	0x40010c00
 8001c5c:	20000358 	.word	0x20000358

08001c60 <ST7789_Init>:
{
 8001c60:	b530      	push	{r4, r5, lr}
		memset(disp_buf, 0, sizeof(disp_buf));
 8001c62:	f44f 6216 	mov.w	r2, #2400	@ 0x960
{
 8001c66:	b085      	sub	sp, #20
		memset(disp_buf, 0, sizeof(disp_buf));
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4851      	ldr	r0, [pc, #324]	@ (8001db0 <ST7789_Init+0x150>)
 8001c6c:	f003 ff65 	bl	8005b3a <memset>
	HAL_Delay(10);
 8001c70:	200a      	movs	r0, #10
 8001c72:	f000 feb7 	bl	80029e4 <HAL_Delay>
    ST7789_RST_Clr();
 8001c76:	2200      	movs	r2, #0
 8001c78:	2180      	movs	r1, #128	@ 0x80
 8001c7a:	484e      	ldr	r0, [pc, #312]	@ (8001db4 <ST7789_Init+0x154>)
 8001c7c:	f001 f952 	bl	8002f24 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001c80:	200a      	movs	r0, #10
 8001c82:	f000 feaf 	bl	80029e4 <HAL_Delay>
    ST7789_RST_Set();
 8001c86:	2201      	movs	r2, #1
 8001c88:	2180      	movs	r1, #128	@ 0x80
 8001c8a:	484a      	ldr	r0, [pc, #296]	@ (8001db4 <ST7789_Init+0x154>)
 8001c8c:	f001 f94a 	bl	8002f24 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8001c90:	2014      	movs	r0, #20
 8001c92:	f000 fea7 	bl	80029e4 <HAL_Delay>
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8001c96:	203a      	movs	r0, #58	@ 0x3a
 8001c98:	f7ff fede 	bl	8001a58 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8001c9c:	2055      	movs	r0, #85	@ 0x55
 8001c9e:	f7ff feff 	bl	8001aa0 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8001ca2:	20b2      	movs	r0, #178	@ 0xb2
 8001ca4:	f7ff fed8 	bl	8001a58 <ST7789_WriteCommand>
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8001ca8:	4b43      	ldr	r3, [pc, #268]	@ (8001db8 <ST7789_Init+0x158>)
		ST7789_WriteData(data, sizeof(data));
 8001caa:	2105      	movs	r1, #5
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	791b      	ldrb	r3, [r3, #4]
 8001cb0:	9000      	str	r0, [sp, #0]
		ST7789_WriteData(data, sizeof(data));
 8001cb2:	4668      	mov	r0, sp
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8001cb4:	f88d 3004 	strb.w	r3, [sp, #4]
		ST7789_WriteData(data, sizeof(data));
 8001cb8:	f7ff ff16 	bl	8001ae8 <ST7789_WriteData>
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8001cbc:	2002      	movs	r0, #2
 8001cbe:	f7ff ff8b 	bl	8001bd8 <ST7789_SetRotation>
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8001cc2:	20b7      	movs	r0, #183	@ 0xb7
 8001cc4:	f7ff fec8 	bl	8001a58 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8001cc8:	2035      	movs	r0, #53	@ 0x35
 8001cca:	f7ff fee9 	bl	8001aa0 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8001cce:	20bb      	movs	r0, #187	@ 0xbb
 8001cd0:	f7ff fec2 	bl	8001a58 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8001cd4:	2019      	movs	r0, #25
 8001cd6:	f7ff fee3 	bl	8001aa0 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8001cda:	20c0      	movs	r0, #192	@ 0xc0
 8001cdc:	f7ff febc 	bl	8001a58 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8001ce0:	202c      	movs	r0, #44	@ 0x2c
 8001ce2:	f7ff fedd 	bl	8001aa0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8001ce6:	20c2      	movs	r0, #194	@ 0xc2
 8001ce8:	f7ff feb6 	bl	8001a58 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8001cec:	2001      	movs	r0, #1
 8001cee:	f7ff fed7 	bl	8001aa0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8001cf2:	20c3      	movs	r0, #195	@ 0xc3
 8001cf4:	f7ff feb0 	bl	8001a58 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8001cf8:	2012      	movs	r0, #18
 8001cfa:	f7ff fed1 	bl	8001aa0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8001cfe:	20c4      	movs	r0, #196	@ 0xc4
 8001d00:	f7ff feaa 	bl	8001a58 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8001d04:	2020      	movs	r0, #32
 8001d06:	f7ff fecb 	bl	8001aa0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8001d0a:	20c6      	movs	r0, #198	@ 0xc6
 8001d0c:	f7ff fea4 	bl	8001a58 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8001d10:	200f      	movs	r0, #15
 8001d12:	f7ff fec5 	bl	8001aa0 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8001d16:	20d0      	movs	r0, #208	@ 0xd0
 8001d18:	f7ff fe9e 	bl	8001a58 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8001d1c:	20a4      	movs	r0, #164	@ 0xa4
 8001d1e:	f7ff febf 	bl	8001aa0 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8001d22:	20a1      	movs	r0, #161	@ 0xa1
 8001d24:	f7ff febc 	bl	8001aa0 <ST7789_WriteSmallData>
	ST7789_WriteCommand(0xE0);
 8001d28:	20e0      	movs	r0, #224	@ 0xe0
 8001d2a:	f7ff fe95 	bl	8001a58 <ST7789_WriteCommand>
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8001d2e:	466a      	mov	r2, sp
 8001d30:	4b22      	ldr	r3, [pc, #136]	@ (8001dbc <ST7789_Init+0x15c>)
 8001d32:	f103 0508 	add.w	r5, r3, #8
 8001d36:	4614      	mov	r4, r2
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	6859      	ldr	r1, [r3, #4]
 8001d3c:	3308      	adds	r3, #8
 8001d3e:	c403      	stmia	r4!, {r0, r1}
 8001d40:	42ab      	cmp	r3, r5
 8001d42:	4622      	mov	r2, r4
 8001d44:	d1f7      	bne.n	8001d36 <ST7789_Init+0xd6>
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	889b      	ldrh	r3, [r3, #4]
		ST7789_WriteData(data, sizeof(data));
 8001d4a:	210e      	movs	r1, #14
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8001d4c:	80a3      	strh	r3, [r4, #4]
 8001d4e:	6020      	str	r0, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001d50:	4668      	mov	r0, sp
 8001d52:	f7ff fec9 	bl	8001ae8 <ST7789_WriteData>
    ST7789_WriteCommand(0xE1);
 8001d56:	20e1      	movs	r0, #225	@ 0xe1
 8001d58:	f7ff fe7e 	bl	8001a58 <ST7789_WriteCommand>
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8001d5c:	466a      	mov	r2, sp
 8001d5e:	4b18      	ldr	r3, [pc, #96]	@ (8001dc0 <ST7789_Init+0x160>)
 8001d60:	f103 0508 	add.w	r5, r3, #8
 8001d64:	4614      	mov	r4, r2
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	6859      	ldr	r1, [r3, #4]
 8001d6a:	3308      	adds	r3, #8
 8001d6c:	c403      	stmia	r4!, {r0, r1}
 8001d6e:	42ab      	cmp	r3, r5
 8001d70:	4622      	mov	r2, r4
 8001d72:	d1f7      	bne.n	8001d64 <ST7789_Init+0x104>
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	889b      	ldrh	r3, [r3, #4]
		ST7789_WriteData(data, sizeof(data));
 8001d78:	210e      	movs	r1, #14
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8001d7a:	80a3      	strh	r3, [r4, #4]
 8001d7c:	6020      	str	r0, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001d7e:	4668      	mov	r0, sp
 8001d80:	f7ff feb2 	bl	8001ae8 <ST7789_WriteData>
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8001d84:	2021      	movs	r0, #33	@ 0x21
 8001d86:	f7ff fe67 	bl	8001a58 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8001d8a:	2011      	movs	r0, #17
 8001d8c:	f7ff fe64 	bl	8001a58 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8001d90:	2013      	movs	r0, #19
 8001d92:	f7ff fe61 	bl	8001a58 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8001d96:	2029      	movs	r0, #41	@ 0x29
 8001d98:	f7ff fe5e 	bl	8001a58 <ST7789_WriteCommand>
	HAL_Delay(50);
 8001d9c:	2032      	movs	r0, #50	@ 0x32
 8001d9e:	f000 fe21 	bl	80029e4 <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8001da2:	2000      	movs	r0, #0
}
 8001da4:	b005      	add	sp, #20
 8001da6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8001daa:	f7ff bf2d 	b.w	8001c08 <ST7789_Fill_Color>
 8001dae:	bf00      	nop
 8001db0:	20000358 	.word	0x20000358
 8001db4:	40010c00 	.word	0x40010c00
 8001db8:	08008d30 	.word	0x08008d30
 8001dbc:	0800ae42 	.word	0x0800ae42
 8001dc0:	0800ae51 	.word	0x0800ae51

08001dc4 <ST7789_DrawPixel>:
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8001dc4:	28ef      	cmp	r0, #239	@ 0xef
{
 8001dc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4614      	mov	r4, r2
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 8001dcc:	d817      	bhi.n	8001dfe <ST7789_DrawPixel+0x3a>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 8001dce:	29db      	cmp	r1, #219	@ 0xdb
 8001dd0:	d815      	bhi.n	8001dfe <ST7789_DrawPixel+0x3a>
	
	ST7789_SetAddressWindow(x, y, x, y);
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	f7ff fec8 	bl	8001b68 <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 8001dd8:	ba64      	rev16	r4, r4
	ST7789_Select();
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001de0:	4808      	ldr	r0, [pc, #32]	@ (8001e04 <ST7789_DrawPixel+0x40>)
	uint8_t data[] = {color >> 8, color & 0xFF};
 8001de2:	f8ad 4004 	strh.w	r4, [sp, #4]
	ST7789_Select();
 8001de6:	f001 f89d 	bl	8002f24 <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 8001dea:	2102      	movs	r1, #2
 8001dec:	a801      	add	r0, sp, #4
 8001dee:	f7ff fe7b 	bl	8001ae8 <ST7789_WriteData>
	ST7789_UnSelect();
 8001df2:	2201      	movs	r2, #1
 8001df4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001df8:	4802      	ldr	r0, [pc, #8]	@ (8001e04 <ST7789_DrawPixel+0x40>)
 8001dfa:	f001 f893 	bl	8002f24 <HAL_GPIO_WritePin>
}
 8001dfe:	b003      	add	sp, #12
 8001e00:	bd30      	pop	{r4, r5, pc}
 8001e02:	bf00      	nop
 8001e04:	40010c00 	.word	0x40010c00

08001e08 <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 8001e08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8001e0c:	eba3 0801 	sub.w	r8, r3, r1
 8001e10:	eba2 0900 	sub.w	r9, r2, r0
 8001e14:	f1b8 0f00 	cmp.w	r8, #0
 8001e18:	bfb8      	it	lt
 8001e1a:	f1c8 0800 	rsblt	r8, r8, #0
 8001e1e:	f1b9 0f00 	cmp.w	r9, #0
 8001e22:	bfb8      	it	lt
 8001e24:	f1c9 0900 	rsblt	r9, r9, #0
    if (steep) {
 8001e28:	45c8      	cmp	r8, r9
        uint16_t color) {
 8001e2a:	4604      	mov	r4, r0
 8001e2c:	460d      	mov	r5, r1
 8001e2e:	4617      	mov	r7, r2
 8001e30:	461e      	mov	r6, r3
 8001e32:	f8bd b030 	ldrh.w	fp, [sp, #48]	@ 0x30
    if (steep) {
 8001e36:	dd03      	ble.n	8001e40 <ST7789_DrawLine+0x38>
		swap = x0;
		x0 = y0;
		y0 = swap;

		swap = x1;
		x1 = y1;
 8001e38:	461f      	mov	r7, r3
		y1 = swap;
 8001e3a:	4616      	mov	r6, r2
		x0 = y0;
 8001e3c:	460c      	mov	r4, r1
		y0 = swap;
 8001e3e:	4605      	mov	r5, r0
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 8001e40:	42bc      	cmp	r4, r7
 8001e42:	d905      	bls.n	8001e50 <ST7789_DrawLine+0x48>
 8001e44:	462b      	mov	r3, r5
		swap = x0;
		x0 = x1;
		x1 = swap;

		swap = y0;
		y0 = y1;
 8001e46:	4635      	mov	r5, r6
		y1 = swap;
 8001e48:	461e      	mov	r6, r3
    if (x0 > x1) {
 8001e4a:	4623      	mov	r3, r4
 8001e4c:	463c      	mov	r4, r7
 8001e4e:	461f      	mov	r7, r3
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
    dy = ABS(y1 - y0);
 8001e50:	eba6 0a05 	sub.w	sl, r6, r5
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
 8001e54:	42b5      	cmp	r5, r6
 8001e56:	bf34      	ite	cc
 8001e58:	2601      	movcc	r6, #1
 8001e5a:	f04f 36ff 	movcs.w	r6, #4294967295
    dx = x1 - x0;
 8001e5e:	1b3b      	subs	r3, r7, r4
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	9200      	str	r2, [sp, #0]
    dy = ABS(y1 - y0);
 8001e64:	ea8a 72ea 	eor.w	r2, sl, sl, asr #31
 8001e68:	eba2 72ea 	sub.w	r2, r2, sl, asr #31
 8001e6c:	9201      	str	r2, [sp, #4]
    int16_t err = dx / 2;
 8001e6e:	b21a      	sxth	r2, r3
 8001e70:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	ea4f 0a63 	mov.w	sl, r3, asr #1
    }

    for (; x0<=x1; x0++) {
 8001e7a:	42bc      	cmp	r4, r7
 8001e7c:	d902      	bls.n	8001e84 <ST7789_DrawLine+0x7c>
        if (err < 0) {
            y0 += ystep;
            err += dx;
        }
    }
}
 8001e7e:	b003      	add	sp, #12
 8001e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (steep) {
 8001e84:	45c8      	cmp	r8, r9
            ST7789_DrawPixel(y0, x0, color);
 8001e86:	465a      	mov	r2, fp
 8001e88:	bfc7      	ittee	gt
 8001e8a:	4621      	movgt	r1, r4
 8001e8c:	4628      	movgt	r0, r5
            ST7789_DrawPixel(x0, y0, color);
 8001e8e:	4629      	movle	r1, r5
 8001e90:	4620      	movle	r0, r4
 8001e92:	f7ff ff97 	bl	8001dc4 <ST7789_DrawPixel>
        err -= dy;
 8001e96:	9b01      	ldr	r3, [sp, #4]
 8001e98:	ebaa 0303 	sub.w	r3, sl, r3
 8001e9c:	fa0f fa83 	sxth.w	sl, r3
        if (err < 0) {
 8001ea0:	f1ba 0f00 	cmp.w	sl, #0
        err -= dy;
 8001ea4:	b29a      	uxth	r2, r3
        if (err < 0) {
 8001ea6:	da05      	bge.n	8001eb4 <ST7789_DrawLine+0xac>
            err += dx;
 8001ea8:	9b00      	ldr	r3, [sp, #0]
            y0 += ystep;
 8001eaa:	4435      	add	r5, r6
            err += dx;
 8001eac:	4413      	add	r3, r2
            y0 += ystep;
 8001eae:	b2ad      	uxth	r5, r5
            err += dx;
 8001eb0:	fa0f fa83 	sxth.w	sl, r3
    for (; x0<=x1; x0++) {
 8001eb4:	3401      	adds	r4, #1
 8001eb6:	b2a4      	uxth	r4, r4
 8001eb8:	e7df      	b.n	8001e7a <ST7789_DrawLine+0x72>
	...

08001ebc <ST7789_DrawRectangle>:
 * @param xi&yi -> 2 coordinates of 2 top points.
 * @param color -> color of the Rectangle line
 * @return none
 */
void ST7789_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8001ebc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001ec0:	4606      	mov	r6, r0
 8001ec2:	460c      	mov	r4, r1
 8001ec4:	4617      	mov	r7, r2
 8001ec6:	461d      	mov	r5, r3
	ST7789_Select();
 8001ec8:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8001f30 <ST7789_DrawRectangle+0x74>
{
 8001ecc:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
	ST7789_Select();
 8001ed0:	4648      	mov	r0, r9
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ed8:	f001 f824 	bl	8002f24 <HAL_GPIO_WritePin>
	ST7789_DrawLine(x1, y1, x2, y1, color);
 8001edc:	4623      	mov	r3, r4
 8001ede:	463a      	mov	r2, r7
 8001ee0:	4621      	mov	r1, r4
 8001ee2:	4630      	mov	r0, r6
 8001ee4:	f8cd 8000 	str.w	r8, [sp]
 8001ee8:	f7ff ff8e 	bl	8001e08 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y1, x1, y2, color);
 8001eec:	462b      	mov	r3, r5
 8001eee:	4632      	mov	r2, r6
 8001ef0:	4621      	mov	r1, r4
 8001ef2:	4630      	mov	r0, r6
 8001ef4:	f8cd 8000 	str.w	r8, [sp]
 8001ef8:	f7ff ff86 	bl	8001e08 <ST7789_DrawLine>
	ST7789_DrawLine(x1, y2, x2, y2, color);
 8001efc:	462b      	mov	r3, r5
 8001efe:	463a      	mov	r2, r7
 8001f00:	4629      	mov	r1, r5
 8001f02:	4630      	mov	r0, r6
 8001f04:	f8cd 8000 	str.w	r8, [sp]
 8001f08:	f7ff ff7e 	bl	8001e08 <ST7789_DrawLine>
	ST7789_DrawLine(x2, y1, x2, y2, color);
 8001f0c:	463a      	mov	r2, r7
 8001f0e:	4621      	mov	r1, r4
 8001f10:	4638      	mov	r0, r7
 8001f12:	462b      	mov	r3, r5
 8001f14:	f8cd 8000 	str.w	r8, [sp]
 8001f18:	f7ff ff76 	bl	8001e08 <ST7789_DrawLine>
	ST7789_UnSelect();
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f22:	4648      	mov	r0, r9
}
 8001f24:	b003      	add	sp, #12
 8001f26:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ST7789_UnSelect();
 8001f2a:	f000 bffb 	b.w	8002f24 <HAL_GPIO_WritePin>
 8001f2e:	bf00      	nop
 8001f30:	40010c00 	.word	0x40010c00

08001f34 <ST7789_DrawCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle line
 * @return  none
 */
void ST7789_DrawCircle(uint16_t x0, uint16_t y0, uint8_t r, uint16_t color)
{
 8001f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f38:	460e      	mov	r6, r1
 8001f3a:	4617      	mov	r7, r2
 8001f3c:	4605      	mov	r5, r0
 8001f3e:	461c      	mov	r4, r3
	int16_t f = 1 - r;
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8001f40:	ebc2 33c2 	rsb	r3, r2, r2, lsl #15
 8001f44:	005b      	lsls	r3, r3, #1
{
 8001f46:	b085      	sub	sp, #20
	int16_t ddF_y = -2 * r;
 8001f48:	b21b      	sxth	r3, r3
	int16_t x = 0;
	int16_t y = r;

	ST7789_Select();
 8001f4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f4e:	4846      	ldr	r0, [pc, #280]	@ (8002068 <ST7789_DrawCircle+0x134>)
	int16_t f = 1 - r;
 8001f50:	f1c2 0801 	rsb	r8, r2, #1
	int16_t y = r;
 8001f54:	fa0f fa82 	sxth.w	sl, r2
	ST7789_Select();
 8001f58:	2200      	movs	r2, #0
	int16_t ddF_y = -2 * r;
 8001f5a:	9301      	str	r3, [sp, #4]
	ST7789_Select();
 8001f5c:	f000 ffe2 	bl	8002f24 <HAL_GPIO_WritePin>
	ST7789_DrawPixel(x0, y0 + r, color);
 8001f60:	19b9      	adds	r1, r7, r6
 8001f62:	4622      	mov	r2, r4
 8001f64:	4628      	mov	r0, r5
 8001f66:	b289      	uxth	r1, r1
 8001f68:	f7ff ff2c 	bl	8001dc4 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 8001f6c:	1bf1      	subs	r1, r6, r7
 8001f6e:	4622      	mov	r2, r4
 8001f70:	4628      	mov	r0, r5
 8001f72:	b289      	uxth	r1, r1
 8001f74:	f7ff ff26 	bl	8001dc4 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 8001f78:	1978      	adds	r0, r7, r5
 8001f7a:	4622      	mov	r2, r4
 8001f7c:	4631      	mov	r1, r6
 8001f7e:	b280      	uxth	r0, r0
 8001f80:	f7ff ff20 	bl	8001dc4 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8001f84:	1be8      	subs	r0, r5, r7
 8001f86:	4622      	mov	r2, r4
 8001f88:	4631      	mov	r1, r6
 8001f8a:	b280      	uxth	r0, r0
 8001f8c:	f7ff ff1a 	bl	8001dc4 <ST7789_DrawPixel>
	int16_t x = 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	9300      	str	r3, [sp, #0]

	while (x < y) {
 8001f94:	9b00      	ldr	r3, [sp, #0]
 8001f96:	4553      	cmp	r3, sl
 8001f98:	db08      	blt.n	8001fac <ST7789_DrawCircle+0x78>
		ST7789_DrawPixel(x0 + y, y0 + x, color);
		ST7789_DrawPixel(x0 - y, y0 + x, color);
		ST7789_DrawPixel(x0 + y, y0 - x, color);
		ST7789_DrawPixel(x0 - y, y0 - x, color);
	}
	ST7789_UnSelect();
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fa0:	4831      	ldr	r0, [pc, #196]	@ (8002068 <ST7789_DrawCircle+0x134>)
}
 8001fa2:	b005      	add	sp, #20
 8001fa4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ST7789_UnSelect();
 8001fa8:	f000 bfbc 	b.w	8002f24 <HAL_GPIO_WritePin>
		if (f >= 0) {
 8001fac:	f1b8 0f00 	cmp.w	r8, #0
 8001fb0:	db0a      	blt.n	8001fc8 <ST7789_DrawCircle+0x94>
			ddF_y += 2;
 8001fb2:	9b01      	ldr	r3, [sp, #4]
			y--;
 8001fb4:	f10a 3aff 	add.w	sl, sl, #4294967295
			ddF_y += 2;
 8001fb8:	3302      	adds	r3, #2
 8001fba:	b21a      	sxth	r2, r3
			f += ddF_y;
 8001fbc:	4443      	add	r3, r8
			y--;
 8001fbe:	fa0f fa8a 	sxth.w	sl, sl
			ddF_y += 2;
 8001fc2:	9201      	str	r2, [sp, #4]
			f += ddF_y;
 8001fc4:	fa0f f883 	sxth.w	r8, r3
		x++;
 8001fc8:	9b00      	ldr	r3, [sp, #0]
		ST7789_DrawPixel(x0 + x, y0 + y, color);
 8001fca:	fa1f f98a 	uxth.w	r9, sl
 8001fce:	3301      	adds	r3, #1
 8001fd0:	b29f      	uxth	r7, r3
		x++;
 8001fd2:	b21b      	sxth	r3, r3
 8001fd4:	9300      	str	r3, [sp, #0]
		ST7789_DrawPixel(x0 + x, y0 + y, color);
 8001fd6:	19eb      	adds	r3, r5, r7
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	eb09 0106 	add.w	r1, r9, r6
		ST7789_DrawPixel(x0 - x, y0 + y, color);
 8001fde:	eba5 0b07 	sub.w	fp, r5, r7
		ST7789_DrawPixel(x0 + x, y0 + y, color);
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	4622      	mov	r2, r4
 8001fe6:	b289      	uxth	r1, r1
		ST7789_DrawPixel(x0 - x, y0 + y, color);
 8001fe8:	fa1f fb8b 	uxth.w	fp, fp
		ST7789_DrawPixel(x0 + x, y0 + y, color);
 8001fec:	9303      	str	r3, [sp, #12]
 8001fee:	9102      	str	r1, [sp, #8]
 8001ff0:	f7ff fee8 	bl	8001dc4 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 + y, color);
 8001ff4:	4622      	mov	r2, r4
 8001ff6:	4658      	mov	r0, fp
 8001ff8:	9902      	ldr	r1, [sp, #8]
 8001ffa:	f7ff fee3 	bl	8001dc4 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + x, y0 - y, color);
 8001ffe:	9b03      	ldr	r3, [sp, #12]
 8002000:	eba6 0109 	sub.w	r1, r6, r9
 8002004:	4618      	mov	r0, r3
 8002006:	4622      	mov	r2, r4
 8002008:	b289      	uxth	r1, r1
 800200a:	9102      	str	r1, [sp, #8]
 800200c:	f7ff feda 	bl	8001dc4 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 - y, color);
 8002010:	4622      	mov	r2, r4
 8002012:	4658      	mov	r0, fp
 8002014:	9902      	ldr	r1, [sp, #8]
		ST7789_DrawPixel(x0 + y, y0 + x, color);
 8002016:	eb09 0b05 	add.w	fp, r9, r5
		ST7789_DrawPixel(x0 - x, y0 - y, color);
 800201a:	f7ff fed3 	bl	8001dc4 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + y, y0 + x, color);
 800201e:	fa1f fb8b 	uxth.w	fp, fp
 8002022:	19f1      	adds	r1, r6, r7
		ST7789_DrawPixel(x0 - y, y0 + x, color);
 8002024:	eba5 0909 	sub.w	r9, r5, r9
		ST7789_DrawPixel(x0 + y, y0 + x, color);
 8002028:	4622      	mov	r2, r4
 800202a:	4658      	mov	r0, fp
 800202c:	b289      	uxth	r1, r1
		ST7789_DrawPixel(x0 - y, y0 + x, color);
 800202e:	fa1f f989 	uxth.w	r9, r9
		ddF_x += 2;
 8002032:	eb08 0847 	add.w	r8, r8, r7, lsl #1
		ST7789_DrawPixel(x0 + y, y0 - x, color);
 8002036:	1bf7      	subs	r7, r6, r7
		ST7789_DrawPixel(x0 + y, y0 + x, color);
 8002038:	9102      	str	r1, [sp, #8]
		ST7789_DrawPixel(x0 + y, y0 - x, color);
 800203a:	b2bf      	uxth	r7, r7
		ST7789_DrawPixel(x0 + y, y0 + x, color);
 800203c:	f7ff fec2 	bl	8001dc4 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 + x, color);
 8002040:	4622      	mov	r2, r4
 8002042:	4648      	mov	r0, r9
 8002044:	9902      	ldr	r1, [sp, #8]
 8002046:	f7ff febd 	bl	8001dc4 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + y, y0 - x, color);
 800204a:	4622      	mov	r2, r4
 800204c:	4639      	mov	r1, r7
 800204e:	4658      	mov	r0, fp
 8002050:	f7ff feb8 	bl	8001dc4 <ST7789_DrawPixel>
		f += ddF_x;
 8002054:	f108 0801 	add.w	r8, r8, #1
		ST7789_DrawPixel(x0 - y, y0 - x, color);
 8002058:	4622      	mov	r2, r4
 800205a:	4639      	mov	r1, r7
 800205c:	4648      	mov	r0, r9
		f += ddF_x;
 800205e:	fa0f f888 	sxth.w	r8, r8
		ST7789_DrawPixel(x0 - y, y0 - x, color);
 8002062:	f7ff feaf 	bl	8001dc4 <ST7789_DrawPixel>
 8002066:	e795      	b.n	8001f94 <ST7789_DrawCircle+0x60>
 8002068:	40010c00 	.word	0x40010c00

0800206c <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800206c:	b082      	sub	sp, #8
 800206e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002072:	4681      	mov	r9, r0
 8002074:	468a      	mov	sl, r1
 8002076:	4614      	mov	r4, r2
 8002078:	b2de      	uxtb	r6, r3
 800207a:	f3c3 2507 	ubfx	r5, r3, #8, #8
	uint32_t i, b, j;
	ST7789_Select();
 800207e:	2200      	movs	r2, #0
 8002080:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002084:	481f      	ldr	r0, [pc, #124]	@ (8002104 <ST7789_WriteChar+0x98>)
{
 8002086:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 800208a:	930d      	str	r3, [sp, #52]	@ 0x34
 800208c:	f8bd 803c 	ldrh.w	r8, [sp, #60]	@ 0x3c
	ST7789_Select();
 8002090:	f000 ff48 	bl	8002f24 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8002094:	1e6b      	subs	r3, r5, #1
 8002096:	1e72      	subs	r2, r6, #1
 8002098:	4453      	add	r3, sl
 800209a:	444a      	add	r2, r9
 800209c:	4651      	mov	r1, sl
 800209e:	4648      	mov	r0, r9
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	b292      	uxth	r2, r2
 80020a4:	f7ff fd60 	bl	8001b68 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 80020a8:	f04f 0900 	mov.w	r9, #0
		b = font.data[(ch - 32) * font.height + i];
 80020ac:	3c20      	subs	r4, #32
 80020ae:	436c      	muls	r4, r5
			if ((b << j) & 0x8000) {
				uint8_t data[] = {color >> 8, color & 0xFF};
				ST7789_WriteData(data, sizeof(data));
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 80020b0:	fa97 fa97 	rev16.w	sl, r7
 80020b4:	0064      	lsls	r4, r4, #1
	for (i = 0; i < font.height; i++) {
 80020b6:	45a9      	cmp	r9, r5
 80020b8:	d309      	bcc.n	80020ce <ST7789_WriteChar+0x62>
				ST7789_WriteData(data, sizeof(data));
			}
		}
	}
	ST7789_UnSelect();
 80020ba:	2201      	movs	r2, #1
 80020bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020c0:	4810      	ldr	r0, [pc, #64]	@ (8002104 <ST7789_WriteChar+0x98>)
}
 80020c2:	b003      	add	sp, #12
 80020c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020c8:	b002      	add	sp, #8
	ST7789_UnSelect();
 80020ca:	f000 bf2b 	b.w	8002f24 <HAL_GPIO_WritePin>
		for (j = 0; j < font.width; j++) {
 80020ce:	2700      	movs	r7, #0
		b = font.data[(ch - 32) * font.height + i];
 80020d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80020d2:	f833 b004 	ldrh.w	fp, [r3, r4]
		for (j = 0; j < font.width; j++) {
 80020d6:	42be      	cmp	r6, r7
 80020d8:	d803      	bhi.n	80020e2 <ST7789_WriteChar+0x76>
	for (i = 0; i < font.height; i++) {
 80020da:	f109 0901 	add.w	r9, r9, #1
 80020de:	3402      	adds	r4, #2
 80020e0:	e7e9      	b.n	80020b6 <ST7789_WriteChar+0x4a>
			if ((b << j) & 0x8000) {
 80020e2:	fa0b f307 	lsl.w	r3, fp, r7
 80020e6:	041b      	lsls	r3, r3, #16
 80020e8:	d509      	bpl.n	80020fe <ST7789_WriteChar+0x92>
				uint8_t data[] = {color >> 8, color & 0xFF};
 80020ea:	fa98 f398 	rev16.w	r3, r8
 80020ee:	f8ad 3004 	strh.w	r3, [sp, #4]
				ST7789_WriteData(data, sizeof(data));
 80020f2:	2102      	movs	r1, #2
 80020f4:	a801      	add	r0, sp, #4
 80020f6:	f7ff fcf7 	bl	8001ae8 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80020fa:	3701      	adds	r7, #1
 80020fc:	e7eb      	b.n	80020d6 <ST7789_WriteChar+0x6a>
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 80020fe:	f8ad a004 	strh.w	sl, [sp, #4]
 8002102:	e7f6      	b.n	80020f2 <ST7789_WriteChar+0x86>
 8002104:	40010c00 	.word	0x40010c00

08002108 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002108:	b082      	sub	sp, #8
 800210a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800210e:	4604      	mov	r4, r0
 8002110:	460d      	mov	r5, r1
 8002112:	4616      	mov	r6, r2
	ST7789_Select();
 8002114:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002118:	2200      	movs	r2, #0
 800211a:	481b      	ldr	r0, [pc, #108]	@ (8002188 <ST7789_WriteString+0x80>)
{
 800211c:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
 8002120:	f8bd a040 	ldrh.w	sl, [sp, #64]	@ 0x40
 8002124:	930d      	str	r3, [sp, #52]	@ 0x34
 8002126:	fa5f f883 	uxtb.w	r8, r3
 800212a:	f3c3 2707 	ubfx	r7, r3, #8, #8
	ST7789_Select();
 800212e:	f000 fef9 	bl	8002f24 <HAL_GPIO_WritePin>
	while (*str) {
 8002132:	f816 2b01 	ldrb.w	r2, [r6], #1
 8002136:	b94a      	cbnz	r2, 800214c <ST7789_WriteString+0x44>
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
		x += font.width;
		str++;
	}
	ST7789_UnSelect();
 8002138:	2201      	movs	r2, #1
 800213a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800213e:	4812      	ldr	r0, [pc, #72]	@ (8002188 <ST7789_WriteString+0x80>)
}
 8002140:	b004      	add	sp, #16
 8002142:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002146:	b002      	add	sp, #8
	ST7789_UnSelect();
 8002148:	f000 beec 	b.w	8002f24 <HAL_GPIO_WritePin>
		if (x + font.width >= ST7789_WIDTH) {
 800214c:	eb04 0308 	add.w	r3, r4, r8
 8002150:	2bef      	cmp	r3, #239	@ 0xef
 8002152:	dd08      	ble.n	8002166 <ST7789_WriteString+0x5e>
			y += font.height;
 8002154:	443d      	add	r5, r7
 8002156:	b2ad      	uxth	r5, r5
			if (y + font.height >= ST7789_HEIGHT) {
 8002158:	19eb      	adds	r3, r5, r7
 800215a:	2bdb      	cmp	r3, #219	@ 0xdb
 800215c:	dcec      	bgt.n	8002138 <ST7789_WriteString+0x30>
			if (*str == ' ') {
 800215e:	2a20      	cmp	r2, #32
			x = 0;
 8002160:	f04f 0400 	mov.w	r4, #0
			if (*str == ' ') {
 8002164:	d0e5      	beq.n	8002132 <ST7789_WriteString+0x2a>
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8002166:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002168:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 800216c:	f88d 7035 	strb.w	r7, [sp, #53]	@ 0x35
 8002170:	4620      	mov	r0, r4
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	4629      	mov	r1, r5
 8002176:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 800217a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
		x += font.width;
 800217c:	4444      	add	r4, r8
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 800217e:	f7ff ff75 	bl	800206c <ST7789_WriteChar>
		x += font.width;
 8002182:	b2a4      	uxth	r4, r4
		str++;
 8002184:	e7d5      	b.n	8002132 <ST7789_WriteString+0x2a>
 8002186:	bf00      	nop
 8002188:	40010c00 	.word	0x40010c00

0800218c <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 800218c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002190:	4606      	mov	r6, r0
 8002192:	460f      	mov	r7, r1
 8002194:	4614      	mov	r4, r2
	ST7789_Select();
 8002196:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800219a:	2200      	movs	r2, #0
 800219c:	481c      	ldr	r0, [pc, #112]	@ (8002210 <ST7789_DrawFilledRectangle+0x84>)
{
 800219e:	461d      	mov	r5, r3
 80021a0:	f8bd 9028 	ldrh.w	r9, [sp, #40]	@ 0x28
	ST7789_Select();
 80021a4:	f000 febe 	bl	8002f24 <HAL_GPIO_WritePin>
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 80021a8:	2eef      	cmp	r6, #239	@ 0xef
 80021aa:	d82d      	bhi.n	8002208 <ST7789_DrawFilledRectangle+0x7c>
 80021ac:	2fdb      	cmp	r7, #219	@ 0xdb
 80021ae:	d82b      	bhi.n	8002208 <ST7789_DrawFilledRectangle+0x7c>
{
 80021b0:	f04f 0800 	mov.w	r8, #0
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 80021b4:	1933      	adds	r3, r6, r4
 80021b6:	2bef      	cmp	r3, #239	@ 0xef
		w = ST7789_WIDTH - x;
 80021b8:	bfc8      	it	gt
 80021ba:	f1c6 04f0 	rsbgt	r4, r6, #240	@ 0xf0
	}
	if ((y + h) >= ST7789_HEIGHT) {
 80021be:	eb07 0305 	add.w	r3, r7, r5
		w = ST7789_WIDTH - x;
 80021c2:	bfc8      	it	gt
 80021c4:	b2a4      	uxthgt	r4, r4
	if ((y + h) >= ST7789_HEIGHT) {
 80021c6:	2bdb      	cmp	r3, #219	@ 0xdb
		h = ST7789_HEIGHT - y;
 80021c8:	bfc8      	it	gt
 80021ca:	f1c7 05dc 	rsbgt	r5, r7, #220	@ 0xdc
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 80021ce:	4434      	add	r4, r6
		h = ST7789_HEIGHT - y;
 80021d0:	bfc8      	it	gt
 80021d2:	b2ad      	uxthgt	r5, r5
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 80021d4:	b2a4      	uxth	r4, r4
 80021d6:	eb07 0308 	add.w	r3, r7, r8
 80021da:	b29b      	uxth	r3, r3
 80021dc:	4619      	mov	r1, r3
 80021de:	4622      	mov	r2, r4
 80021e0:	4630      	mov	r0, r6
 80021e2:	f8cd 9000 	str.w	r9, [sp]
	for (i = 0; i <= h; i++) {
 80021e6:	f108 0801 	add.w	r8, r8, #1
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 80021ea:	f7ff fe0d 	bl	8001e08 <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 80021ee:	fa1f f388 	uxth.w	r3, r8
 80021f2:	429d      	cmp	r5, r3
 80021f4:	d2ef      	bcs.n	80021d6 <ST7789_DrawFilledRectangle+0x4a>
	}
	ST7789_UnSelect();
 80021f6:	2201      	movs	r2, #1
 80021f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021fc:	4804      	ldr	r0, [pc, #16]	@ (8002210 <ST7789_DrawFilledRectangle+0x84>)
}
 80021fe:	b003      	add	sp, #12
 8002200:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	ST7789_UnSelect();
 8002204:	f000 be8e 	b.w	8002f24 <HAL_GPIO_WritePin>
}
 8002208:	b003      	add	sp, #12
 800220a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800220e:	bf00      	nop
 8002210:	40010c00 	.word	0x40010c00

08002214 <ST7789_DrawFilledTriangle>:
 * @param  xi&yi -> 3 coordinates of 3 top points.
 * @param color ->color of the triangle
 * @return  none
 */
void ST7789_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
{
 8002214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002218:	4683      	mov	fp, r0
 800221a:	4617      	mov	r7, r2
 800221c:	460d      	mov	r5, r1
 800221e:	4698      	mov	r8, r3
 8002220:	b08b      	sub	sp, #44	@ 0x2c
 8002222:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
	ST7789_Select();
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
			yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
			curpixel = 0;

	deltax = ABS(x2 - x1);
 8002226:	eba7 040b 	sub.w	r4, r7, fp
{
 800222a:	9305      	str	r3, [sp, #20]
 800222c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
	ST7789_Select();
 8002230:	2200      	movs	r2, #0
{
 8002232:	9306      	str	r3, [sp, #24]
 8002234:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
	ST7789_Select();
 8002238:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800223c:	4833      	ldr	r0, [pc, #204]	@ (800230c <ST7789_DrawFilledTriangle+0xf8>)
	deltay = ABS(y2 - y1);
 800223e:	eba8 0605 	sub.w	r6, r8, r5
{
 8002242:	9307      	str	r3, [sp, #28]
	ST7789_Select();
 8002244:	f000 fe6e 	bl	8002f24 <HAL_GPIO_WritePin>
	deltax = ABS(x2 - x1);
 8002248:	2c00      	cmp	r4, #0
 800224a:	bfb8      	it	lt
 800224c:	4264      	neglt	r4, r4
	deltay = ABS(y2 - y1);
 800224e:	2e00      	cmp	r6, #0
 8002250:	bfb8      	it	lt
 8002252:	4276      	neglt	r6, r6
	deltax = ABS(x2 - x1);
 8002254:	b224      	sxth	r4, r4
	deltay = ABS(y2 - y1);
 8002256:	b236      	sxth	r6, r6
	x = x1;
	y = y1;

	if (x2 >= x1) {
		xinc1 = 1;
 8002258:	455f      	cmp	r7, fp
 800225a:	bf34      	ite	cc
 800225c:	f04f 37ff 	movcc.w	r7, #4294967295
 8002260:	2701      	movcs	r7, #1
		xinc1 = -1;
		xinc2 = -1;
	}

	if (y2 >= y1) {
		yinc1 = 1;
 8002262:	45a8      	cmp	r8, r5
 8002264:	bf34      	ite	cc
 8002266:	f04f 38ff 	movcc.w	r8, #4294967295
 800226a:	f04f 0801 	movcs.w	r8, #1
	else {
		yinc1 = -1;
		yinc2 = -1;
	}

	if (deltax >= deltay) {
 800226e:	42b4      	cmp	r4, r6
	x = x1;
 8002270:	fa0f f98b 	sxth.w	r9, fp
	y = y1;
 8002274:	fa0f fa85 	sxth.w	sl, r5
	if (deltax >= deltay) {
 8002278:	db14      	blt.n	80022a4 <ST7789_DrawFilledTriangle+0x90>
		xinc1 = 0;
		yinc2 = 0;
		den = deltax;
		num = deltax / 2;
 800227a:	9703      	str	r7, [sp, #12]
		yinc2 = 0;
 800227c:	2700      	movs	r7, #0
		num = deltax / 2;
 800227e:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
 8002282:	106d      	asrs	r5, r5, #1
		xinc1 = 0;
 8002284:	9704      	str	r7, [sp, #16]
		num = deltay / 2;
		numadd = deltax;
		numpixels = deltay;
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8002286:	f04f 0b00 	mov.w	fp, #0
 800228a:	fa0f f38b 	sxth.w	r3, fp
 800228e:	429c      	cmp	r4, r3
 8002290:	da16      	bge.n	80022c0 <ST7789_DrawFilledTriangle+0xac>
			y += yinc1;
		}
		x += xinc2;
		y += yinc2;
	}
	ST7789_UnSelect();
 8002292:	2201      	movs	r2, #1
 8002294:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002298:	481c      	ldr	r0, [pc, #112]	@ (800230c <ST7789_DrawFilledTriangle+0xf8>)
}
 800229a:	b00b      	add	sp, #44	@ 0x2c
 800229c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ST7789_UnSelect();
 80022a0:	f000 be40 	b.w	8002f24 <HAL_GPIO_WritePin>
		num = deltay / 2;
 80022a4:	4623      	mov	r3, r4
 80022a6:	f8cd 8010 	str.w	r8, [sp, #16]
		yinc1 = 0;
 80022aa:	f04f 0800 	mov.w	r8, #0
		num = deltay / 2;
 80022ae:	eb06 75d6 	add.w	r5, r6, r6, lsr #31
 80022b2:	4634      	mov	r4, r6
 80022b4:	f345 054f 	sbfx	r5, r5, #1, #16
 80022b8:	461e      	mov	r6, r3
		xinc2 = 0;
 80022ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80022be:	e7e2      	b.n	8002286 <ST7789_DrawFilledTriangle+0x72>
		ST7789_DrawLine(x, y, x3, y3, color);
 80022c0:	9b07      	ldr	r3, [sp, #28]
 80022c2:	fa1f f089 	uxth.w	r0, r9
 80022c6:	fa1f f18a 	uxth.w	r1, sl
 80022ca:	9300      	str	r3, [sp, #0]
		num += numadd;
 80022cc:	4435      	add	r5, r6
		ST7789_DrawLine(x, y, x3, y3, color);
 80022ce:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80022d2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80022d6:	f7ff fd97 	bl	8001e08 <ST7789_DrawLine>
		num += numadd;
 80022da:	b2ab      	uxth	r3, r5
 80022dc:	b22d      	sxth	r5, r5
		if (num >= den) {
 80022de:	42ac      	cmp	r4, r5
 80022e0:	dc09      	bgt.n	80022f6 <ST7789_DrawFilledTriangle+0xe2>
			x += xinc1;
 80022e2:	9808      	ldr	r0, [sp, #32]
			y += yinc1;
 80022e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
			num -= den;
 80022e6:	1b1b      	subs	r3, r3, r4
			x += xinc1;
 80022e8:	4438      	add	r0, r7
			y += yinc1;
 80022ea:	4441      	add	r1, r8
			num -= den;
 80022ec:	b21d      	sxth	r5, r3
			x += xinc1;
 80022ee:	fa0f f980 	sxth.w	r9, r0
			y += yinc1;
 80022f2:	fa0f fa81 	sxth.w	sl, r1
		x += xinc2;
 80022f6:	9b03      	ldr	r3, [sp, #12]
 80022f8:	f10b 0b01 	add.w	fp, fp, #1
 80022fc:	4499      	add	r9, r3
		y += yinc2;
 80022fe:	9b04      	ldr	r3, [sp, #16]
		x += xinc2;
 8002300:	fa0f f989 	sxth.w	r9, r9
		y += yinc2;
 8002304:	449a      	add	sl, r3
 8002306:	fa0f fa8a 	sxth.w	sl, sl
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 800230a:	e7be      	b.n	800228a <ST7789_DrawFilledTriangle+0x76>
 800230c:	40010c00 	.word	0x40010c00

08002310 <ST7789_DrawFilledCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle
 * @return  none
 */
void ST7789_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8002310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002314:	4690      	mov	r8, r2
 8002316:	460c      	mov	r4, r1
 8002318:	4605      	mov	r5, r0
 800231a:	461f      	mov	r7, r3
 800231c:	b087      	sub	sp, #28
	ST7789_Select();
	int16_t f = 1 - r;
 800231e:	fa1f f988 	uxth.w	r9, r8
	ST7789_Select();
 8002322:	2200      	movs	r2, #0
 8002324:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002328:	4847      	ldr	r0, [pc, #284]	@ (8002448 <ST7789_DrawFilledCircle+0x138>)
 800232a:	f000 fdfb 	bl	8002f24 <HAL_GPIO_WritePin>
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x = 0;
	int16_t y = r;

	ST7789_DrawPixel(x0, y0 + r, color);
 800232e:	b2a4      	uxth	r4, r4
	int16_t ddF_y = -2 * r;
 8002330:	ebc9 33c9 	rsb	r3, r9, r9, lsl #15
	ST7789_DrawPixel(x0, y0 + r, color);
 8002334:	b2ad      	uxth	r5, r5
 8002336:	eb09 0104 	add.w	r1, r9, r4
	int16_t ddF_y = -2 * r;
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	b21b      	sxth	r3, r3
	ST7789_DrawPixel(x0, y0 + r, color);
 800233e:	463a      	mov	r2, r7
 8002340:	4628      	mov	r0, r5
 8002342:	b289      	uxth	r1, r1
	int16_t ddF_y = -2 * r;
 8002344:	9304      	str	r3, [sp, #16]
	ST7789_DrawPixel(x0, y0 - r, color);
	ST7789_DrawPixel(x0 + r, y0, color);
 8002346:	eb09 0a05 	add.w	sl, r9, r5
	ST7789_DrawPixel(x0, y0 + r, color);
 800234a:	f7ff fd3b 	bl	8001dc4 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 800234e:	eba4 0109 	sub.w	r1, r4, r9
 8002352:	463a      	mov	r2, r7
 8002354:	4628      	mov	r0, r5
	int16_t f = 1 - r;
 8002356:	f1c9 0601 	rsb	r6, r9, #1
	ST7789_DrawPixel(x0, y0 - r, color);
 800235a:	b289      	uxth	r1, r1
	ST7789_DrawPixel(x0 + r, y0, color);
 800235c:	fa1f fa8a 	uxth.w	sl, sl
	ST7789_DrawPixel(x0 - r, y0, color);
 8002360:	eba5 0909 	sub.w	r9, r5, r9
	ST7789_DrawPixel(x0, y0 - r, color);
 8002364:	f7ff fd2e 	bl	8001dc4 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8002368:	fa1f f989 	uxth.w	r9, r9
	ST7789_DrawPixel(x0 + r, y0, color);
 800236c:	463a      	mov	r2, r7
 800236e:	4621      	mov	r1, r4
 8002370:	4650      	mov	r0, sl
 8002372:	f7ff fd27 	bl	8001dc4 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8002376:	463a      	mov	r2, r7
 8002378:	4621      	mov	r1, r4
 800237a:	4648      	mov	r0, r9
 800237c:	f7ff fd22 	bl	8001dc4 <ST7789_DrawPixel>
	ST7789_DrawLine(x0 - r, y0, x0 + r, y0, color);
 8002380:	4623      	mov	r3, r4
 8002382:	4652      	mov	r2, sl
 8002384:	4621      	mov	r1, r4
 8002386:	4648      	mov	r0, r9
 8002388:	9700      	str	r7, [sp, #0]
 800238a:	f7ff fd3d 	bl	8001e08 <ST7789_DrawLine>
	int16_t x = 0;
 800238e:	2300      	movs	r3, #0
	int16_t f = 1 - r;
 8002390:	b236      	sxth	r6, r6
	int16_t x = 0;
 8002392:	9303      	str	r3, [sp, #12]

	while (x < y) {
 8002394:	9b03      	ldr	r3, [sp, #12]
 8002396:	4543      	cmp	r3, r8
 8002398:	db08      	blt.n	80023ac <ST7789_DrawFilledCircle+0x9c>
		ST7789_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);

		ST7789_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
		ST7789_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
	}
	ST7789_UnSelect();
 800239a:	2201      	movs	r2, #1
 800239c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023a0:	4829      	ldr	r0, [pc, #164]	@ (8002448 <ST7789_DrawFilledCircle+0x138>)
}
 80023a2:	b007      	add	sp, #28
 80023a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ST7789_UnSelect();
 80023a8:	f000 bdbc 	b.w	8002f24 <HAL_GPIO_WritePin>
		if (f >= 0) {
 80023ac:	2e00      	cmp	r6, #0
 80023ae:	db09      	blt.n	80023c4 <ST7789_DrawFilledCircle+0xb4>
			ddF_y += 2;
 80023b0:	9b04      	ldr	r3, [sp, #16]
			y--;
 80023b2:	f108 38ff 	add.w	r8, r8, #4294967295
			ddF_y += 2;
 80023b6:	3302      	adds	r3, #2
 80023b8:	b21a      	sxth	r2, r3
			f += ddF_y;
 80023ba:	4433      	add	r3, r6
			y--;
 80023bc:	fa0f f888 	sxth.w	r8, r8
			ddF_y += 2;
 80023c0:	9204      	str	r2, [sp, #16]
			f += ddF_y;
 80023c2:	b21e      	sxth	r6, r3
		x++;
 80023c4:	9b03      	ldr	r3, [sp, #12]
		ST7789_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 80023c6:	fa1f f988 	uxth.w	r9, r8
 80023ca:	3301      	adds	r3, #1
 80023cc:	fa1f fa83 	uxth.w	sl, r3
		x++;
 80023d0:	b21b      	sxth	r3, r3
 80023d2:	9303      	str	r3, [sp, #12]
		ST7789_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 80023d4:	eb05 0b0a 	add.w	fp, r5, sl
 80023d8:	eb04 0309 	add.w	r3, r4, r9
 80023dc:	b29b      	uxth	r3, r3
 80023de:	fa1f fb8b 	uxth.w	fp, fp
 80023e2:	eba5 000a 	sub.w	r0, r5, sl
 80023e6:	465a      	mov	r2, fp
 80023e8:	4619      	mov	r1, r3
 80023ea:	b280      	uxth	r0, r0
 80023ec:	9700      	str	r7, [sp, #0]
 80023ee:	9005      	str	r0, [sp, #20]
 80023f0:	f7ff fd0a 	bl	8001e08 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 80023f4:	9805      	ldr	r0, [sp, #20]
 80023f6:	eba4 0309 	sub.w	r3, r4, r9
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	4602      	mov	r2, r0
 80023fe:	4619      	mov	r1, r3
 8002400:	4658      	mov	r0, fp
 8002402:	9700      	str	r7, [sp, #0]
 8002404:	f7ff fd00 	bl	8001e08 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 8002408:	eb05 0b09 	add.w	fp, r5, r9
 800240c:	eb04 030a 	add.w	r3, r4, sl
 8002410:	eba5 0909 	sub.w	r9, r5, r9
 8002414:	fa1f fb8b 	uxth.w	fp, fp
 8002418:	b29b      	uxth	r3, r3
 800241a:	fa1f f989 	uxth.w	r9, r9
 800241e:	464a      	mov	r2, r9
 8002420:	4619      	mov	r1, r3
 8002422:	4658      	mov	r0, fp
 8002424:	9700      	str	r7, [sp, #0]
 8002426:	f7ff fcef 	bl	8001e08 <ST7789_DrawLine>
		ST7789_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 800242a:	eba4 030a 	sub.w	r3, r4, sl
		ddF_x += 2;
 800242e:	eb06 064a 	add.w	r6, r6, sl, lsl #1
		ST7789_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 8002432:	b29b      	uxth	r3, r3
 8002434:	464a      	mov	r2, r9
 8002436:	4619      	mov	r1, r3
 8002438:	4658      	mov	r0, fp
		f += ddF_x;
 800243a:	3601      	adds	r6, #1
		ST7789_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 800243c:	9700      	str	r7, [sp, #0]
		f += ddF_x;
 800243e:	b236      	sxth	r6, r6
		ST7789_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 8002440:	f7ff fce2 	bl	8001e08 <ST7789_DrawLine>
 8002444:	e7a6      	b.n	8002394 <ST7789_DrawFilledCircle+0x84>
 8002446:	bf00      	nop
 8002448:	40010c00 	.word	0x40010c00

0800244c <ST7789_Starting_Screen>:
 * @param shift_usb_x Horizontal shift for the USB logo and "Starting..." text.
 * @param shift_usb_y Vertical shift for the USB logo and "Starting..." text.
 * @param usb_logo_colour The color used for the USB logo and "Starting..." text.
 * @return None
 */
void ST7789_Starting_Screen(int shift_usb_x, int shift_usb_y, uint16_t usb_logo_colour) {
 800244c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ST7789_WriteString(42 + shift_usb_x, 50 + shift_usb_y, "USB", Font_16x26, BLACK, usb_logo_colour);
 8002450:	f04f 0a00 	mov.w	sl, #0
void ST7789_Starting_Screen(int shift_usb_x, int shift_usb_y, uint16_t usb_logo_colour) {
 8002454:	4614      	mov	r4, r2
 8002456:	b085      	sub	sp, #20
    ST7789_WriteString(42 + shift_usb_x, 50 + shift_usb_y, "USB", Font_16x26, BLACK, usb_logo_colour);
 8002458:	f8df 9210 	ldr.w	r9, [pc, #528]	@ 800266c <ST7789_Starting_Screen+0x220>
 800245c:	9202      	str	r2, [sp, #8]
 800245e:	f8cd a004 	str.w	sl, [sp, #4]
 8002462:	b286      	uxth	r6, r0
 8002464:	b28d      	uxth	r5, r1
 8002466:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800246a:	f106 072a 	add.w	r7, r6, #42	@ 0x2a
 800246e:	f105 0832 	add.w	r8, r5, #50	@ 0x32
 8002472:	fa1f f888 	uxth.w	r8, r8
 8002476:	b2bf      	uxth	r7, r7
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	4641      	mov	r1, r8
 800247c:	f8d9 3000 	ldr.w	r3, [r9]
 8002480:	4638      	mov	r0, r7
 8002482:	4a7b      	ldr	r2, [pc, #492]	@ (8002670 <ST7789_Starting_Screen+0x224>)
 8002484:	f7ff fe40 	bl	8002108 <ST7789_WriteString>
    ST7789_DrawRectangle(42 + shift_usb_x, 50 + shift_usb_y, 198 + shift_usb_x, 75 + shift_usb_y, usb_logo_colour);
 8002488:	f105 034b 	add.w	r3, r5, #75	@ 0x4b
 800248c:	f106 02c6 	add.w	r2, r6, #198	@ 0xc6
 8002490:	4641      	mov	r1, r8
 8002492:	4638      	mov	r0, r7
 8002494:	b29b      	uxth	r3, r3
 8002496:	b292      	uxth	r2, r2
 8002498:	9400      	str	r4, [sp, #0]
 800249a:	f7ff fd0f 	bl	8001ebc <ST7789_DrawRectangle>
    ST7789_WriteString(150 + shift_usb_x, 50 + shift_usb_y, "HUB", Font_16x26, BLACK, usb_logo_colour);
 800249e:	e9cd a401 	strd	sl, r4, [sp, #4]
 80024a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80024a6:	f106 0096 	add.w	r0, r6, #150	@ 0x96
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	4641      	mov	r1, r8
 80024ae:	f8d9 3000 	ldr.w	r3, [r9]
 80024b2:	4a70      	ldr	r2, [pc, #448]	@ (8002674 <ST7789_Starting_Screen+0x228>)
 80024b4:	b280      	uxth	r0, r0
 80024b6:	f7ff fe27 	bl	8002108 <ST7789_WriteString>

    ST7789_DrawFilledCircle(97 + shift_usb_x, 62 + shift_usb_y, 3, usb_logo_colour);
    ST7789_DrawLine(97 + shift_usb_x, 62 + shift_usb_y, 142 + shift_usb_x, 62 + shift_usb_y, usb_logo_colour);
 80024ba:	f106 098e 	add.w	r9, r6, #142	@ 0x8e
    ST7789_DrawFilledCircle(97 + shift_usb_x, 62 + shift_usb_y, 3, usb_logo_colour);
 80024be:	f106 0061 	add.w	r0, r6, #97	@ 0x61
 80024c2:	f105 013e 	add.w	r1, r5, #62	@ 0x3e
 80024c6:	fa1f f881 	uxth.w	r8, r1
    ST7789_DrawLine(97 + shift_usb_x, 62 + shift_usb_y, 142 + shift_usb_x, 62 + shift_usb_y, usb_logo_colour);
 80024ca:	fa1f f989 	uxth.w	r9, r9
    ST7789_DrawFilledCircle(97 + shift_usb_x, 62 + shift_usb_y, 3, usb_logo_colour);
 80024ce:	fa1f fa80 	uxth.w	sl, r0
 80024d2:	4623      	mov	r3, r4
 80024d4:	2203      	movs	r2, #3
 80024d6:	b209      	sxth	r1, r1
 80024d8:	b200      	sxth	r0, r0
 80024da:	f7ff ff19 	bl	8002310 <ST7789_DrawFilledCircle>
    ST7789_DrawLine(97 + shift_usb_x, 62 + shift_usb_y, 142 + shift_usb_x, 62 + shift_usb_y, usb_logo_colour);
 80024de:	4643      	mov	r3, r8
 80024e0:	464a      	mov	r2, r9
 80024e2:	4641      	mov	r1, r8
 80024e4:	4650      	mov	r0, sl
 80024e6:	9400      	str	r4, [sp, #0]

    ST7789_DrawLine(142 + shift_usb_x, 64 + shift_usb_y, 146 + shift_usb_x, 62 + shift_usb_y, usb_logo_colour);
 80024e8:	f106 0a92 	add.w	sl, r6, #146	@ 0x92
    ST7789_DrawLine(97 + shift_usb_x, 62 + shift_usb_y, 142 + shift_usb_x, 62 + shift_usb_y, usb_logo_colour);
 80024ec:	f7ff fc8c 	bl	8001e08 <ST7789_DrawLine>
    ST7789_DrawLine(142 + shift_usb_x, 64 + shift_usb_y, 146 + shift_usb_x, 62 + shift_usb_y, usb_logo_colour);
 80024f0:	fa1f fa8a 	uxth.w	sl, sl
 80024f4:	f105 0140 	add.w	r1, r5, #64	@ 0x40
 80024f8:	4643      	mov	r3, r8
 80024fa:	4652      	mov	r2, sl
 80024fc:	4648      	mov	r0, r9
 80024fe:	b289      	uxth	r1, r1
 8002500:	9400      	str	r4, [sp, #0]
 8002502:	f7ff fc81 	bl	8001e08 <ST7789_DrawLine>
    ST7789_DrawLine(142 + shift_usb_x, 60 + shift_usb_y, 146 + shift_usb_x, 62 + shift_usb_y, usb_logo_colour);
 8002506:	f105 013c 	add.w	r1, r5, #60	@ 0x3c
 800250a:	4643      	mov	r3, r8
 800250c:	4652      	mov	r2, sl
 800250e:	4648      	mov	r0, r9
 8002510:	b289      	uxth	r1, r1
 8002512:	9400      	str	r4, [sp, #0]
 8002514:	f7ff fc78 	bl	8001e08 <ST7789_DrawLine>
    ST7789_DrawLine(142 + shift_usb_x, 61 + shift_usb_y, 146 + shift_usb_x, 62 + shift_usb_y, usb_logo_colour);
 8002518:	f105 013d 	add.w	r1, r5, #61	@ 0x3d
 800251c:	4643      	mov	r3, r8
 800251e:	4652      	mov	r2, sl
 8002520:	4648      	mov	r0, r9
 8002522:	b289      	uxth	r1, r1
 8002524:	9400      	str	r4, [sp, #0]
 8002526:	f7ff fc6f 	bl	8001e08 <ST7789_DrawLine>
    ST7789_DrawLine(142 + shift_usb_x, 63 + shift_usb_y, 146 + shift_usb_x, 62 + shift_usb_y, usb_logo_colour);
 800252a:	f105 013f 	add.w	r1, r5, #63	@ 0x3f
 800252e:	4643      	mov	r3, r8
 8002530:	4652      	mov	r2, sl
 8002532:	4648      	mov	r0, r9
 8002534:	b289      	uxth	r1, r1

    ST7789_DrawLine(105 + shift_usb_x, 62 + shift_usb_y, 115 + shift_usb_x, 52 + shift_usb_y, usb_logo_colour);
 8002536:	f106 0a73 	add.w	sl, r6, #115	@ 0x73
 800253a:	f105 0934 	add.w	r9, r5, #52	@ 0x34
    ST7789_DrawLine(142 + shift_usb_x, 63 + shift_usb_y, 146 + shift_usb_x, 62 + shift_usb_y, usb_logo_colour);
 800253e:	9400      	str	r4, [sp, #0]
 8002540:	f7ff fc62 	bl	8001e08 <ST7789_DrawLine>
    ST7789_DrawLine(105 + shift_usb_x, 62 + shift_usb_y, 115 + shift_usb_x, 52 + shift_usb_y, usb_logo_colour);
 8002544:	fa1f f989 	uxth.w	r9, r9
 8002548:	fa1f fa8a 	uxth.w	sl, sl
 800254c:	f106 0069 	add.w	r0, r6, #105	@ 0x69
    ST7789_DrawLine(115 + shift_usb_x, 52 + shift_usb_y, 120 + shift_usb_x, 52 + shift_usb_y, usb_logo_colour);
 8002550:	f106 0b78 	add.w	fp, r6, #120	@ 0x78
    ST7789_DrawLine(105 + shift_usb_x, 62 + shift_usb_y, 115 + shift_usb_x, 52 + shift_usb_y, usb_logo_colour);
 8002554:	464b      	mov	r3, r9
 8002556:	4652      	mov	r2, sl
 8002558:	4641      	mov	r1, r8
    ST7789_DrawLine(115 + shift_usb_x, 52 + shift_usb_y, 120 + shift_usb_x, 52 + shift_usb_y, usb_logo_colour);
 800255a:	fa1f fb8b 	uxth.w	fp, fp
    ST7789_DrawLine(105 + shift_usb_x, 62 + shift_usb_y, 115 + shift_usb_x, 52 + shift_usb_y, usb_logo_colour);
 800255e:	b280      	uxth	r0, r0
 8002560:	9400      	str	r4, [sp, #0]
 8002562:	f7ff fc51 	bl	8001e08 <ST7789_DrawLine>
    ST7789_DrawLine(115 + shift_usb_x, 52 + shift_usb_y, 120 + shift_usb_x, 52 + shift_usb_y, usb_logo_colour);
 8002566:	464b      	mov	r3, r9
 8002568:	465a      	mov	r2, fp
 800256a:	4649      	mov	r1, r9
 800256c:	4650      	mov	r0, sl
 800256e:	9400      	str	r4, [sp, #0]
 8002570:	f7ff fc4a 	bl	8001e08 <ST7789_DrawLine>
    ST7789_DrawFilledCircle(120 + shift_usb_x, 52 + shift_usb_y, 2, usb_logo_colour);
 8002574:	fa0f f189 	sxth.w	r1, r9
 8002578:	fa0f f08b 	sxth.w	r0, fp

    ST7789_DrawLine(115 + shift_usb_x, 62 + shift_usb_y, 125 + shift_usb_x, 72 + shift_usb_y, usb_logo_colour);
 800257c:	f106 097d 	add.w	r9, r6, #125	@ 0x7d
 8002580:	f105 0b48 	add.w	fp, r5, #72	@ 0x48
 8002584:	fa1f f989 	uxth.w	r9, r9
 8002588:	fa1f fb8b 	uxth.w	fp, fp
    ST7789_DrawFilledCircle(120 + shift_usb_x, 52 + shift_usb_y, 2, usb_logo_colour);
 800258c:	4623      	mov	r3, r4
 800258e:	2202      	movs	r2, #2
 8002590:	f7ff febe 	bl	8002310 <ST7789_DrawFilledCircle>
    ST7789_DrawLine(115 + shift_usb_x, 62 + shift_usb_y, 125 + shift_usb_x, 72 + shift_usb_y, usb_logo_colour);
 8002594:	464a      	mov	r2, r9
 8002596:	4641      	mov	r1, r8
 8002598:	4650      	mov	r0, sl
 800259a:	465b      	mov	r3, fp
 800259c:	9400      	str	r4, [sp, #0]
 800259e:	f7ff fc33 	bl	8001e08 <ST7789_DrawLine>
    ST7789_DrawLine(125 + shift_usb_x, 72 + shift_usb_y, 135 + shift_usb_x, 72 + shift_usb_y, usb_logo_colour);
 80025a2:	f106 0287 	add.w	r2, r6, #135	@ 0x87
 80025a6:	4648      	mov	r0, r9
 80025a8:	465b      	mov	r3, fp
 80025aa:	4659      	mov	r1, fp
 80025ac:	b292      	uxth	r2, r2
 80025ae:	9400      	str	r4, [sp, #0]
 80025b0:	f7ff fc2a 	bl	8001e08 <ST7789_DrawLine>
    ST7789_DrawFilledRectangle(134 + shift_usb_x, 70 + shift_usb_y, 4, 4, usb_logo_colour);
 80025b4:	2304      	movs	r3, #4
 80025b6:	f105 0146 	add.w	r1, r5, #70	@ 0x46
 80025ba:	f106 0086 	add.w	r0, r6, #134	@ 0x86
 80025be:	461a      	mov	r2, r3
 80025c0:	9400      	str	r4, [sp, #0]
 80025c2:	b289      	uxth	r1, r1
 80025c4:	b280      	uxth	r0, r0
 80025c6:	f7ff fde1 	bl	800218c <ST7789_DrawFilledRectangle>
 80025ca:	f04f 0808 	mov.w	r8, #8

    int state = 0;
 80025ce:	f04f 0900 	mov.w	r9, #0
    for (int i = 0; i < 2 * 4; i++)
    {
        switch (state) {
            case 0:
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
                ST7789_WriteString(42 + shift_usb_x, 80 + shift_usb_y, "Starting   ", Font_11x18, usb_logo_colour, BLACK);
 80025d2:	3550      	adds	r5, #80	@ 0x50
 80025d4:	4e28      	ldr	r6, [pc, #160]	@ (8002678 <ST7789_Starting_Screen+0x22c>)
            case 1:
            	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
                ST7789_WriteString(42 + shift_usb_x, 80 + shift_usb_y, "Starting.  ", Font_11x18, usb_logo_colour, BLACK);
                break;
            case 2:
            	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80025d6:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800267c <ST7789_Starting_Screen+0x230>
                ST7789_WriteString(42 + shift_usb_x, 80 + shift_usb_y, "Starting   ", Font_11x18, usb_logo_colour, BLACK);
 80025da:	b2ad      	uxth	r5, r5
        switch (state) {
 80025dc:	f1b9 0f02 	cmp.w	r9, #2
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80025e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025e4:	4650      	mov	r0, sl
        switch (state) {
 80025e6:	d02d      	beq.n	8002644 <ST7789_Starting_Screen+0x1f8>
 80025e8:	f1b9 0f03 	cmp.w	r9, #3
 80025ec:	d034      	beq.n	8002658 <ST7789_Starting_Screen+0x20c>
 80025ee:	f1b9 0f01 	cmp.w	r9, #1
 80025f2:	d01d      	beq.n	8002630 <ST7789_Starting_Screen+0x1e4>
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80025f4:	f000 fc9b 	bl	8002f2e <HAL_GPIO_TogglePin>
                ST7789_WriteString(42 + shift_usb_x, 80 + shift_usb_y, "Starting   ", Font_11x18, usb_logo_colour, BLACK);
 80025f8:	2300      	movs	r3, #0
 80025fa:	e9cd 4301 	strd	r4, r3, [sp, #4]
 80025fe:	6873      	ldr	r3, [r6, #4]
 8002600:	4a1f      	ldr	r2, [pc, #124]	@ (8002680 <ST7789_Starting_Screen+0x234>)
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	6833      	ldr	r3, [r6, #0]
				ST7789_WriteString(42 + shift_usb_x, 80 + shift_usb_y, "Starting.. ", Font_11x18, usb_logo_colour, BLACK);
				break;
			case 3:
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
				ST7789_WriteString(42 + shift_usb_x, 80 + shift_usb_y, "Starting...", Font_11x18, usb_logo_colour, BLACK);
 8002606:	4629      	mov	r1, r5
 8002608:	4638      	mov	r0, r7
 800260a:	f7ff fd7d 	bl	8002108 <ST7789_WriteString>
				break;
        }

        HAL_Delay(500);  // Pauza 500 ms
 800260e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002612:	f000 f9e7 	bl	80029e4 <HAL_Delay>

        state = (state + 1) % 4;
 8002616:	f109 0901 	add.w	r9, r9, #1
    for (int i = 0; i < 2 * 4; i++)
 800261a:	f1b8 0801 	subs.w	r8, r8, #1
        state = (state + 1) % 4;
 800261e:	f009 0903 	and.w	r9, r9, #3
    for (int i = 0; i < 2 * 4; i++)
 8002622:	d1db      	bne.n	80025dc <ST7789_Starting_Screen+0x190>
    }
    ST7789_Fill_Color(BLACK);
 8002624:	4640      	mov	r0, r8
}
 8002626:	b005      	add	sp, #20
 8002628:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ST7789_Fill_Color(BLACK);
 800262c:	f7ff baec 	b.w	8001c08 <ST7789_Fill_Color>
            	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8002630:	f000 fc7d 	bl	8002f2e <HAL_GPIO_TogglePin>
                ST7789_WriteString(42 + shift_usb_x, 80 + shift_usb_y, "Starting.  ", Font_11x18, usb_logo_colour, BLACK);
 8002634:	2300      	movs	r3, #0
 8002636:	e9cd 4301 	strd	r4, r3, [sp, #4]
 800263a:	6873      	ldr	r3, [r6, #4]
 800263c:	4a11      	ldr	r2, [pc, #68]	@ (8002684 <ST7789_Starting_Screen+0x238>)
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	6833      	ldr	r3, [r6, #0]
 8002642:	e7e0      	b.n	8002606 <ST7789_Starting_Screen+0x1ba>
            	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8002644:	f000 fc73 	bl	8002f2e <HAL_GPIO_TogglePin>
				ST7789_WriteString(42 + shift_usb_x, 80 + shift_usb_y, "Starting.. ", Font_11x18, usb_logo_colour, BLACK);
 8002648:	2300      	movs	r3, #0
 800264a:	e9cd 4301 	strd	r4, r3, [sp, #4]
 800264e:	6873      	ldr	r3, [r6, #4]
 8002650:	4a0d      	ldr	r2, [pc, #52]	@ (8002688 <ST7789_Starting_Screen+0x23c>)
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	6833      	ldr	r3, [r6, #0]
 8002656:	e7d6      	b.n	8002606 <ST7789_Starting_Screen+0x1ba>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8002658:	f000 fc69 	bl	8002f2e <HAL_GPIO_TogglePin>
				ST7789_WriteString(42 + shift_usb_x, 80 + shift_usb_y, "Starting...", Font_11x18, usb_logo_colour, BLACK);
 800265c:	2300      	movs	r3, #0
 800265e:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8002662:	6873      	ldr	r3, [r6, #4]
 8002664:	4a09      	ldr	r2, [pc, #36]	@ (800268c <ST7789_Starting_Screen+0x240>)
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	6833      	ldr	r3, [r6, #0]
 800266a:	e7cc      	b.n	8002606 <ST7789_Starting_Screen+0x1ba>
 800266c:	20000000 	.word	0x20000000
 8002670:	0800ae60 	.word	0x0800ae60
 8002674:	0800ae64 	.word	0x0800ae64
 8002678:	20000008 	.word	0x20000008
 800267c:	40010800 	.word	0x40010800
 8002680:	0800ae68 	.word	0x0800ae68
 8002684:	0800ae74 	.word	0x0800ae74
 8002688:	0800ae80 	.word	0x0800ae80
 800268c:	0800ae8c 	.word	0x0800ae8c

08002690 <ST7789_Main_Screen>:
 *
 * This function draws two icons on the screen at the specified coordinates
 *
 * @return None
 */
void ST7789_Main_Screen(void){
 8002690:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	ST7789_Fill_Color(BLACK);
 8002692:	2000      	movs	r0, #0
 8002694:	f7ff fab8 	bl	8001c08 <ST7789_Fill_Color>
	//ST7789_DrawImage(15, 80, 100, 100, power_icon);
	//ST7789_DrawImage(125, 80, 100, 100, timer_icon);
	ST7789_DrawFilledCircle(64,129,48,0x2d1b);
 8002698:	f642 531b 	movw	r3, #11547	@ 0x2d1b
 800269c:	2230      	movs	r2, #48	@ 0x30
 800269e:	2181      	movs	r1, #129	@ 0x81
 80026a0:	2040      	movs	r0, #64	@ 0x40
 80026a2:	f7ff fe35 	bl	8002310 <ST7789_DrawFilledCircle>
	ST7789_DrawFilledTriangle(44, 133, 64, 133, 64, 95, 0xce79);
 80026a6:	f64c 6479 	movw	r4, #52857	@ 0xce79
 80026aa:	235f      	movs	r3, #95	@ 0x5f
 80026ac:	2540      	movs	r5, #64	@ 0x40
 80026ae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80026b2:	2385      	movs	r3, #133	@ 0x85
 80026b4:	462a      	mov	r2, r5
 80026b6:	4619      	mov	r1, r3
 80026b8:	9500      	str	r5, [sp, #0]
 80026ba:	202c      	movs	r0, #44	@ 0x2c
 80026bc:	f7ff fdaa 	bl	8002214 <ST7789_DrawFilledTriangle>
	ST7789_DrawFilledTriangle(88, 125, 64, 125, 64, 163, 0xce79);
 80026c0:	23a3      	movs	r3, #163	@ 0xa3
 80026c2:	e9cd 5300 	strd	r5, r3, [sp]
 80026c6:	237d      	movs	r3, #125	@ 0x7d
 80026c8:	462a      	mov	r2, r5
 80026ca:	4619      	mov	r1, r3
 80026cc:	2058      	movs	r0, #88	@ 0x58
 80026ce:	9402      	str	r4, [sp, #8]
 80026d0:	f7ff fda0 	bl	8002214 <ST7789_DrawFilledTriangle>

	ST7789_DrawFilledCircle(174,129,48,0x2d1b);
 80026d4:	f642 531b 	movw	r3, #11547	@ 0x2d1b
 80026d8:	2230      	movs	r2, #48	@ 0x30
 80026da:	2181      	movs	r1, #129	@ 0x81
 80026dc:	20ae      	movs	r0, #174	@ 0xae
 80026de:	f7ff fe17 	bl	8002310 <ST7789_DrawFilledCircle>
	ST7789_DrawFilledTriangle(155, 151, 193, 151, 174, 129, 0xCE79);
 80026e2:	25ae      	movs	r5, #174	@ 0xae
 80026e4:	2681      	movs	r6, #129	@ 0x81
 80026e6:	2397      	movs	r3, #151	@ 0x97
 80026e8:	22c1      	movs	r2, #193	@ 0xc1
 80026ea:	4619      	mov	r1, r3
 80026ec:	209b      	movs	r0, #155	@ 0x9b
 80026ee:	e9cd 5600 	strd	r5, r6, [sp]
 80026f2:	9402      	str	r4, [sp, #8]
 80026f4:	f7ff fd8e 	bl	8002214 <ST7789_DrawFilledTriangle>
	ST7789_DrawFilledTriangle(155, 107, 193, 107, 174, 129, 0xCE79);
 80026f8:	236b      	movs	r3, #107	@ 0x6b
 80026fa:	22c1      	movs	r2, #193	@ 0xc1
 80026fc:	4619      	mov	r1, r3
 80026fe:	209b      	movs	r0, #155	@ 0x9b
 8002700:	e9cd 6401 	strd	r6, r4, [sp, #4]
 8002704:	9500      	str	r5, [sp, #0]
 8002706:	f7ff fd85 	bl	8002214 <ST7789_DrawFilledTriangle>



}
 800270a:	b004      	add	sp, #16
 800270c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002710 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002710:	4b0e      	ldr	r3, [pc, #56]	@ (800274c <HAL_MspInit+0x3c>)
{
 8002712:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	619a      	str	r2, [r3, #24]
 800271c:	699a      	ldr	r2, [r3, #24]
 800271e:	f002 0201 	and.w	r2, r2, #1
 8002722:	9200      	str	r2, [sp, #0]
 8002724:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	69da      	ldr	r2, [r3, #28]
 8002728:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800272c:	61da      	str	r2, [r3, #28]
 800272e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002730:	4a07      	ldr	r2, [pc, #28]	@ (8002750 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002736:	9301      	str	r3, [sp, #4]
 8002738:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800273a:	6853      	ldr	r3, [r2, #4]
 800273c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002740:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002744:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002746:	b002      	add	sp, #8
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	40010000 	.word	0x40010000

08002754 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002754:	e7fe      	b.n	8002754 <NMI_Handler>

08002756 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002756:	e7fe      	b.n	8002756 <HardFault_Handler>

08002758 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002758:	e7fe      	b.n	8002758 <MemManage_Handler>

0800275a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800275a:	e7fe      	b.n	800275a <BusFault_Handler>

0800275c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800275c:	e7fe      	b.n	800275c <UsageFault_Handler>

0800275e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800275e:	4770      	bx	lr

08002760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8002760:	4770      	bx	lr

08002762 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002762:	4770      	bx	lr

08002764 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002764:	f000 b92c 	b.w	80029c0 <HAL_IncTick>

08002768 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002768:	4801      	ldr	r0, [pc, #4]	@ (8002770 <DMA1_Channel3_IRQHandler+0x8>)
 800276a:	f000 ba65 	b.w	8002c38 <HAL_DMA_IRQHandler>
 800276e:	bf00      	nop
 8002770:	200002bc 	.word	0x200002bc

08002774 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002774:	4801      	ldr	r0, [pc, #4]	@ (800277c <TIM2_IRQHandler+0x8>)
 8002776:	f002 bb06 	b.w	8004d86 <HAL_TIM_IRQHandler>
 800277a:	bf00      	nop
 800277c:	20000cbc 	.word	0x20000cbc

08002780 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002780:	4801      	ldr	r0, [pc, #4]	@ (8002788 <I2C2_EV_IRQHandler+0x8>)
 8002782:	f001 b997 	b.w	8003ab4 <HAL_I2C_EV_IRQHandler>
 8002786:	bf00      	nop
 8002788:	20000204 	.word	0x20000204

0800278c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800278c:	2001      	movs	r0, #1
 800278e:	4770      	bx	lr

08002790 <_kill>:

int _kill(int pid, int sig)
{
 8002790:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002792:	f003 fa25 	bl	8005be0 <__errno>
 8002796:	2316      	movs	r3, #22
 8002798:	6003      	str	r3, [r0, #0]
  return -1;
}
 800279a:	f04f 30ff 	mov.w	r0, #4294967295
 800279e:	bd08      	pop	{r3, pc}

080027a0 <_exit>:

void _exit (int status)
{
 80027a0:	b508      	push	{r3, lr}
  errno = EINVAL;
 80027a2:	f003 fa1d 	bl	8005be0 <__errno>
 80027a6:	2316      	movs	r3, #22
 80027a8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80027aa:	e7fe      	b.n	80027aa <_exit+0xa>

080027ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027ac:	b570      	push	{r4, r5, r6, lr}
 80027ae:	460d      	mov	r5, r1
 80027b0:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b2:	460e      	mov	r6, r1
 80027b4:	1b73      	subs	r3, r6, r5
 80027b6:	429c      	cmp	r4, r3
 80027b8:	dc01      	bgt.n	80027be <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80027ba:	4620      	mov	r0, r4
 80027bc:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80027be:	f3af 8000 	nop.w
 80027c2:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c6:	e7f5      	b.n	80027b4 <_read+0x8>

080027c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027c8:	b570      	push	{r4, r5, r6, lr}
 80027ca:	460d      	mov	r5, r1
 80027cc:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ce:	460e      	mov	r6, r1
 80027d0:	1b73      	subs	r3, r6, r5
 80027d2:	429c      	cmp	r4, r3
 80027d4:	dc01      	bgt.n	80027da <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 80027d6:	4620      	mov	r0, r4
 80027d8:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 80027da:	f816 0b01 	ldrb.w	r0, [r6], #1
 80027de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e2:	e7f5      	b.n	80027d0 <_write+0x8>

080027e4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	4770      	bx	lr

080027ea <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80027ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 80027ee:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80027f0:	604b      	str	r3, [r1, #4]
}
 80027f2:	4770      	bx	lr

080027f4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80027f4:	2001      	movs	r0, #1
 80027f6:	4770      	bx	lr

080027f8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80027f8:	2000      	movs	r0, #0
 80027fa:	4770      	bx	lr

080027fc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027fc:	4a0b      	ldr	r2, [pc, #44]	@ (800282c <_sbrk+0x30>)
{
 80027fe:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8002800:	6811      	ldr	r1, [r2, #0]
{
 8002802:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002804:	b909      	cbnz	r1, 800280a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8002806:	490a      	ldr	r1, [pc, #40]	@ (8002830 <_sbrk+0x34>)
 8002808:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800280a:	6810      	ldr	r0, [r2, #0]
 800280c:	4909      	ldr	r1, [pc, #36]	@ (8002834 <_sbrk+0x38>)
 800280e:	4c0a      	ldr	r4, [pc, #40]	@ (8002838 <_sbrk+0x3c>)
 8002810:	4403      	add	r3, r0
 8002812:	1b09      	subs	r1, r1, r4
 8002814:	428b      	cmp	r3, r1
 8002816:	d906      	bls.n	8002826 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8002818:	f003 f9e2 	bl	8005be0 <__errno>
 800281c:	230c      	movs	r3, #12
 800281e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002820:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002824:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002826:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002828:	e7fc      	b.n	8002824 <_sbrk+0x28>
 800282a:	bf00      	nop
 800282c:	20000cb8 	.word	0x20000cb8
 8002830:	20000e58 	.word	0x20000e58
 8002834:	20005000 	.word	0x20005000
 8002838:	00000400 	.word	0x00000400

0800283c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800283c:	4770      	bx	lr
	...

08002840 <MX_TIM2_Init>:

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002840:	2218      	movs	r2, #24
{
 8002842:	b510      	push	{r4, lr}
 8002844:	b08c      	sub	sp, #48	@ 0x30
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002846:	2100      	movs	r1, #0
 8002848:	eb0d 0002 	add.w	r0, sp, r2
 800284c:	f003 f975 	bl	8005b3a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002850:	2400      	movs	r4, #0

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002852:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002856:	4811      	ldr	r0, [pc, #68]	@ (800289c <MX_TIM2_Init+0x5c>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002858:	2202      	movs	r2, #2
  htim2.Init.Prescaler = 0;
 800285a:	e9c0 3400 	strd	r3, r4, [r0]
  htim2.Init.Period = 65535;
 800285e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002862:	e9c0 3403 	strd	r3, r4, [r0, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002866:	2301      	movs	r3, #1
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002868:	a903      	add	r1, sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800286a:	e9cd 4401 	strd	r4, r4, [sp, #4]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800286e:	e9cd 3203 	strd	r3, r2, [sp, #12]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002872:	e9cd 2308 	strd	r2, r3, [sp, #32]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002876:	6084      	str	r4, [r0, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002878:	6184      	str	r4, [r0, #24]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800287a:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800287c:	f002 fb58 	bl	8004f30 <HAL_TIM_Encoder_Init>
 8002880:	b108      	cbz	r0, 8002886 <MX_TIM2_Init+0x46>
  {
    Error_Handler();
 8002882:	f7ff f873 	bl	800196c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002886:	4805      	ldr	r0, [pc, #20]	@ (800289c <MX_TIM2_Init+0x5c>)
 8002888:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800288a:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800288e:	f002 fba3 	bl	8004fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8002892:	b108      	cbz	r0, 8002898 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002894:	f7ff f86a 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002898:	b00c      	add	sp, #48	@ 0x30
 800289a:	bd10      	pop	{r4, pc}
 800289c:	20000cbc 	.word	0x20000cbc

080028a0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80028a0:	b510      	push	{r4, lr}
 80028a2:	4604      	mov	r4, r0
 80028a4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a6:	2210      	movs	r2, #16
 80028a8:	2100      	movs	r1, #0
 80028aa:	a802      	add	r0, sp, #8
 80028ac:	f003 f945 	bl	8005b3a <memset>
  if(tim_encoderHandle->Instance==TIM2)
 80028b0:	6823      	ldr	r3, [r4, #0]
 80028b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028b6:	d123      	bne.n	8002900 <HAL_TIM_Encoder_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028b8:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80028bc:	69da      	ldr	r2, [r3, #28]
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028be:	4811      	ldr	r0, [pc, #68]	@ (8002904 <HAL_TIM_Encoder_MspInit+0x64>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028c0:	f042 0201 	orr.w	r2, r2, #1
 80028c4:	61da      	str	r2, [r3, #28]
 80028c6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c8:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028ca:	f002 0201 	and.w	r2, r2, #1
 80028ce:	9200      	str	r2, [sp, #0]
 80028d0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d2:	699a      	ldr	r2, [r3, #24]
 80028d4:	f042 0204 	orr.w	r2, r2, #4
 80028d8:	619a      	str	r2, [r3, #24]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028e4:	2303      	movs	r3, #3
 80028e6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028e8:	2302      	movs	r3, #2
 80028ea:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ec:	f000 fa3c 	bl	8002d68 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028f0:	2200      	movs	r2, #0
 80028f2:	201c      	movs	r0, #28
 80028f4:	4611      	mov	r1, r2
 80028f6:	f000 f899 	bl	8002a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028fa:	201c      	movs	r0, #28
 80028fc:	f000 f8c6 	bl	8002a8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002900:	b006      	add	sp, #24
 8002902:	bd10      	pop	{r4, pc}
 8002904:	40010800 	.word	0x40010800

08002908 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002908:	f7ff ff98 	bl	800283c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800290c:	480b      	ldr	r0, [pc, #44]	@ (800293c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800290e:	490c      	ldr	r1, [pc, #48]	@ (8002940 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002910:	4a0c      	ldr	r2, [pc, #48]	@ (8002944 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002914:	e002      	b.n	800291c <LoopCopyDataInit>

08002916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800291a:	3304      	adds	r3, #4

0800291c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800291c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800291e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002920:	d3f9      	bcc.n	8002916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002922:	4a09      	ldr	r2, [pc, #36]	@ (8002948 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002924:	4c09      	ldr	r4, [pc, #36]	@ (800294c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002928:	e001      	b.n	800292e <LoopFillZerobss>

0800292a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800292a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800292c:	3204      	adds	r2, #4

0800292e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800292e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002930:	d3fb      	bcc.n	800292a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002932:	f003 f95b 	bl	8005bec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002936:	f7fe ffc5 	bl	80018c4 <main>
  bx lr
 800293a:	4770      	bx	lr
  ldr r0, =_sdata
 800293c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002940:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002944:	0800b418 	.word	0x0800b418
  ldr r2, =_sbss
 8002948:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800294c:	20000e54 	.word	0x20000e54

08002950 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002950:	e7fe      	b.n	8002950 <ADC1_2_IRQHandler>
	...

08002954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002954:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002956:	4b0e      	ldr	r3, [pc, #56]	@ (8002990 <HAL_InitTick+0x3c>)
{
 8002958:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800295a:	781a      	ldrb	r2, [r3, #0]
 800295c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002960:	fbb3 f3f2 	udiv	r3, r3, r2
 8002964:	4a0b      	ldr	r2, [pc, #44]	@ (8002994 <HAL_InitTick+0x40>)
 8002966:	6810      	ldr	r0, [r2, #0]
 8002968:	fbb0 f0f3 	udiv	r0, r0, r3
 800296c:	f000 f89c 	bl	8002aa8 <HAL_SYSTICK_Config>
 8002970:	4604      	mov	r4, r0
 8002972:	b958      	cbnz	r0, 800298c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002974:	2d0f      	cmp	r5, #15
 8002976:	d809      	bhi.n	800298c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002978:	4602      	mov	r2, r0
 800297a:	4629      	mov	r1, r5
 800297c:	f04f 30ff 	mov.w	r0, #4294967295
 8002980:	f000 f854 	bl	8002a2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002984:	4620      	mov	r0, r4
 8002986:	4b04      	ldr	r3, [pc, #16]	@ (8002998 <HAL_InitTick+0x44>)
 8002988:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800298a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800298c:	2001      	movs	r0, #1
 800298e:	e7fc      	b.n	800298a <HAL_InitTick+0x36>
 8002990:	20000018 	.word	0x20000018
 8002994:	20000014 	.word	0x20000014
 8002998:	2000001c 	.word	0x2000001c

0800299c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800299c:	4a07      	ldr	r2, [pc, #28]	@ (80029bc <HAL_Init+0x20>)
{
 800299e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029a0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029a2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029a4:	f043 0310 	orr.w	r3, r3, #16
 80029a8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029aa:	f000 f82d 	bl	8002a08 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ae:	200f      	movs	r0, #15
 80029b0:	f7ff ffd0 	bl	8002954 <HAL_InitTick>
  HAL_MspInit();
 80029b4:	f7ff feac 	bl	8002710 <HAL_MspInit>
}
 80029b8:	2000      	movs	r0, #0
 80029ba:	bd08      	pop	{r3, pc}
 80029bc:	40022000 	.word	0x40022000

080029c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80029c0:	4a03      	ldr	r2, [pc, #12]	@ (80029d0 <HAL_IncTick+0x10>)
 80029c2:	4b04      	ldr	r3, [pc, #16]	@ (80029d4 <HAL_IncTick+0x14>)
 80029c4:	6811      	ldr	r1, [r2, #0]
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	440b      	add	r3, r1
 80029ca:	6013      	str	r3, [r2, #0]
}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20000d04 	.word	0x20000d04
 80029d4:	20000018 	.word	0x20000018

080029d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80029d8:	4b01      	ldr	r3, [pc, #4]	@ (80029e0 <HAL_GetTick+0x8>)
 80029da:	6818      	ldr	r0, [r3, #0]
}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	20000d04 	.word	0x20000d04

080029e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029e4:	b538      	push	{r3, r4, r5, lr}
 80029e6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80029e8:	f7ff fff6 	bl	80029d8 <HAL_GetTick>
 80029ec:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ee:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80029f0:	bf1e      	ittt	ne
 80029f2:	4b04      	ldrne	r3, [pc, #16]	@ (8002a04 <HAL_Delay+0x20>)
 80029f4:	781b      	ldrbne	r3, [r3, #0]
 80029f6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029f8:	f7ff ffee 	bl	80029d8 <HAL_GetTick>
 80029fc:	1b43      	subs	r3, r0, r5
 80029fe:	42a3      	cmp	r3, r4
 8002a00:	d3fa      	bcc.n	80029f8 <HAL_Delay+0x14>
  {
  }
}
 8002a02:	bd38      	pop	{r3, r4, r5, pc}
 8002a04:	20000018 	.word	0x20000018

08002a08 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a08:	4907      	ldr	r1, [pc, #28]	@ (8002a28 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a0a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a0c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a0e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a12:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a16:	0412      	lsls	r2, r2, #16
 8002a18:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002a24:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002a26:	4770      	bx	lr
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a2c:	4b15      	ldr	r3, [pc, #84]	@ (8002a84 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a2e:	b530      	push	{r4, r5, lr}
 8002a30:	68dc      	ldr	r4, [r3, #12]
 8002a32:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a36:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a3a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	bf28      	it	cs
 8002a40:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a42:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a48:	bf94      	ite	ls
 8002a4a:	2400      	movls	r4, #0
 8002a4c:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a4e:	fa05 f303 	lsl.w	r3, r5, r3
 8002a52:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a56:	40a5      	lsls	r5, r4
 8002a58:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a5c:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8002a5e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a64:	bfac      	ite	ge
 8002a66:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6a:	4a07      	ldrlt	r2, [pc, #28]	@ (8002a88 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	bfab      	itete	ge
 8002a74:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a78:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7c:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a80:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002a82:	bd30      	pop	{r4, r5, pc}
 8002a84:	e000ed00 	.word	0xe000ed00
 8002a88:	e000ed14 	.word	0xe000ed14

08002a8c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002a8c:	2800      	cmp	r0, #0
 8002a8e:	db07      	blt.n	8002aa0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a90:	2301      	movs	r3, #1
 8002a92:	0941      	lsrs	r1, r0, #5
 8002a94:	4a03      	ldr	r2, [pc, #12]	@ (8002aa4 <HAL_NVIC_EnableIRQ+0x18>)
 8002a96:	f000 001f 	and.w	r0, r0, #31
 8002a9a:	4083      	lsls	r3, r0
 8002a9c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	e000e100 	.word	0xe000e100

08002aa8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aa8:	3801      	subs	r0, #1
 8002aaa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002aae:	d20b      	bcs.n	8002ac8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ab0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab4:	21f0      	movs	r1, #240	@ 0xf0
 8002ab6:	4a05      	ldr	r2, [pc, #20]	@ (8002acc <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ab8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aba:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002abe:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ac0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ac2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ac4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ac6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002ac8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002aca:	4770      	bx	lr
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ad0:	4603      	mov	r3, r0
{
 8002ad2:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8002ad4:	b340      	cbz	r0, 8002b28 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ad6:	2114      	movs	r1, #20
 8002ad8:	6800      	ldr	r0, [r0, #0]
 8002ada:	4a14      	ldr	r2, [pc, #80]	@ (8002b2c <HAL_DMA_Init+0x5c>)
 8002adc:	4402      	add	r2, r0
 8002ade:	fbb2 f2f1 	udiv	r2, r2, r1
 8002ae2:	0092      	lsls	r2, r2, #2
 8002ae4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002ae6:	4a12      	ldr	r2, [pc, #72]	@ (8002b30 <HAL_DMA_Init+0x60>)
 8002ae8:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002af0:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 8002af4:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af6:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 8002af8:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afa:	4322      	orrs	r2, r4
 8002afc:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002afe:	f421 517f 	bic.w	r1, r1, #16320	@ 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b02:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b04:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b06:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0a:	4322      	orrs	r2, r4
 8002b0c:	699c      	ldr	r4, [r3, #24]
 8002b0e:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b10:	69dc      	ldr	r4, [r3, #28]
 8002b12:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8002b14:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b16:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b18:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b1a:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b1c:	6398      	str	r0, [r3, #56]	@ 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b1e:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8002b22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  return HAL_OK;
}
 8002b26:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002b28:	2001      	movs	r0, #1
 8002b2a:	e7fc      	b.n	8002b26 <HAL_DMA_Init+0x56>
 8002b2c:	bffdfff8 	.word	0xbffdfff8
 8002b30:	40020000 	.word	0x40020000

08002b34 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b34:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b36:	f890 4020 	ldrb.w	r4, [r0, #32]
 8002b3a:	2c01      	cmp	r4, #1
 8002b3c:	d034      	beq.n	8002ba8 <HAL_DMA_Start_IT+0x74>
 8002b3e:	2401      	movs	r4, #1
 8002b40:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b44:	f890 4021 	ldrb.w	r4, [r0, #33]	@ 0x21
 8002b48:	2c01      	cmp	r4, #1
 8002b4a:	b2e5      	uxtb	r5, r4
 8002b4c:	f04f 0400 	mov.w	r4, #0
 8002b50:	d128      	bne.n	8002ba4 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b52:	2602      	movs	r6, #2
 8002b54:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b58:	6384      	str	r4, [r0, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b5a:	6804      	ldr	r4, [r0, #0]
 8002b5c:	6826      	ldr	r6, [r4, #0]
 8002b5e:	f026 0601 	bic.w	r6, r6, #1
 8002b62:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b64:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 8002b68:	40bd      	lsls	r5, r7
 8002b6a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b6c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b6e:	6843      	ldr	r3, [r0, #4]
 8002b70:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8002b72:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b74:	bf0b      	itete	eq
 8002b76:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002b78:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002b7a:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002b7c:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002b7e:	b14b      	cbz	r3, 8002b94 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8002b86:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b88:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002b8a:	6823      	ldr	r3, [r4, #0]
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	6023      	str	r3, [r4, #0]
}
 8002b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b94:	6823      	ldr	r3, [r4, #0]
 8002b96:	f023 0304 	bic.w	r3, r3, #4
 8002b9a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	f043 030a 	orr.w	r3, r3, #10
 8002ba2:	e7f0      	b.n	8002b86 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8002ba4:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 8002ba8:	2002      	movs	r0, #2
 8002baa:	e7f2      	b.n	8002b92 <HAL_DMA_Start_IT+0x5e>

08002bac <HAL_DMA_Abort_IT>:
{  
 8002bac:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bae:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d003      	beq.n	8002bbe <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb6:	2304      	movs	r3, #4
 8002bb8:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8002bba:	2001      	movs	r0, #1
}
 8002bbc:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bbe:	6803      	ldr	r3, [r0, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	f022 020e 	bic.w	r2, r2, #14
 8002bc6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	f022 0201 	bic.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bd0:	4a17      	ldr	r2, [pc, #92]	@ (8002c30 <HAL_DMA_Abort_IT+0x84>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d01f      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x6a>
 8002bd6:	3214      	adds	r2, #20
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d01e      	beq.n	8002c1a <HAL_DMA_Abort_IT+0x6e>
 8002bdc:	3214      	adds	r2, #20
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d01d      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x72>
 8002be2:	3214      	adds	r2, #20
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d01d      	beq.n	8002c24 <HAL_DMA_Abort_IT+0x78>
 8002be8:	3214      	adds	r2, #20
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d01d      	beq.n	8002c2a <HAL_DMA_Abort_IT+0x7e>
 8002bee:	3214      	adds	r2, #20
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	bf14      	ite	ne
 8002bf4:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8002bf8:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 8002bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002c34 <HAL_DMA_Abort_IT+0x88>)
 8002bfe:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002c00:	2301      	movs	r3, #1
 8002c02:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8002c06:	2300      	movs	r3, #0
 8002c08:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002c0c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002c0e:	b103      	cbz	r3, 8002c12 <HAL_DMA_Abort_IT+0x66>
      hdma->XferAbortCallback(hdma);
 8002c10:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002c12:	2000      	movs	r0, #0
 8002c14:	e7d2      	b.n	8002bbc <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c16:	2301      	movs	r3, #1
 8002c18:	e7f0      	b.n	8002bfc <HAL_DMA_Abort_IT+0x50>
 8002c1a:	2310      	movs	r3, #16
 8002c1c:	e7ee      	b.n	8002bfc <HAL_DMA_Abort_IT+0x50>
 8002c1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c22:	e7eb      	b.n	8002bfc <HAL_DMA_Abort_IT+0x50>
 8002c24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c28:	e7e8      	b.n	8002bfc <HAL_DMA_Abort_IT+0x50>
 8002c2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c2e:	e7e5      	b.n	8002bfc <HAL_DMA_Abort_IT+0x50>
 8002c30:	40020008 	.word	0x40020008
 8002c34:	40020000 	.word	0x40020000

08002c38 <HAL_DMA_IRQHandler>:
{
 8002c38:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c3a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c3c:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c3e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c40:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002c42:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c44:	4095      	lsls	r5, r2
 8002c46:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8002c48:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c4a:	d032      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x7a>
 8002c4c:	074d      	lsls	r5, r1, #29
 8002c4e:	d530      	bpl.n	8002cb2 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c54:	bf5e      	ittt	pl
 8002c56:	681a      	ldrpl	r2, [r3, #0]
 8002c58:	f022 0204 	bicpl.w	r2, r2, #4
 8002c5c:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c5e:	4a3e      	ldr	r2, [pc, #248]	@ (8002d58 <HAL_DMA_IRQHandler+0x120>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d019      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x60>
 8002c64:	3214      	adds	r2, #20
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d018      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x64>
 8002c6a:	3214      	adds	r2, #20
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d017      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x68>
 8002c70:	3214      	adds	r2, #20
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d017      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0x6e>
 8002c76:	3214      	adds	r2, #20
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d017      	beq.n	8002cac <HAL_DMA_IRQHandler+0x74>
 8002c7c:	3214      	adds	r2, #20
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	bf14      	ite	ne
 8002c82:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 8002c86:	f44f 0380 	moveq.w	r3, #4194304	@ 0x400000
 8002c8a:	4a34      	ldr	r2, [pc, #208]	@ (8002d5c <HAL_DMA_IRQHandler+0x124>)
 8002c8c:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002c8e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d05e      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x11a>
}
 8002c94:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002c96:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c98:	2304      	movs	r3, #4
 8002c9a:	e7f6      	b.n	8002c8a <HAL_DMA_IRQHandler+0x52>
 8002c9c:	2340      	movs	r3, #64	@ 0x40
 8002c9e:	e7f4      	b.n	8002c8a <HAL_DMA_IRQHandler+0x52>
 8002ca0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ca4:	e7f1      	b.n	8002c8a <HAL_DMA_IRQHandler+0x52>
 8002ca6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002caa:	e7ee      	b.n	8002c8a <HAL_DMA_IRQHandler+0x52>
 8002cac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002cb0:	e7eb      	b.n	8002c8a <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002cb2:	2502      	movs	r5, #2
 8002cb4:	4095      	lsls	r5, r2
 8002cb6:	4225      	tst	r5, r4
 8002cb8:	d035      	beq.n	8002d26 <HAL_DMA_IRQHandler+0xee>
 8002cba:	078d      	lsls	r5, r1, #30
 8002cbc:	d533      	bpl.n	8002d26 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	0694      	lsls	r4, r2, #26
 8002cc2:	d406      	bmi.n	8002cd2 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	f022 020a 	bic.w	r2, r2, #10
 8002cca:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f880 2021 	strb.w	r2, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002cd2:	4a21      	ldr	r2, [pc, #132]	@ (8002d58 <HAL_DMA_IRQHandler+0x120>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d019      	beq.n	8002d0c <HAL_DMA_IRQHandler+0xd4>
 8002cd8:	3214      	adds	r2, #20
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d018      	beq.n	8002d10 <HAL_DMA_IRQHandler+0xd8>
 8002cde:	3214      	adds	r2, #20
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d017      	beq.n	8002d14 <HAL_DMA_IRQHandler+0xdc>
 8002ce4:	3214      	adds	r2, #20
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d017      	beq.n	8002d1a <HAL_DMA_IRQHandler+0xe2>
 8002cea:	3214      	adds	r2, #20
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d017      	beq.n	8002d20 <HAL_DMA_IRQHandler+0xe8>
 8002cf0:	3214      	adds	r2, #20
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	bf14      	ite	ne
 8002cf6:	f04f 7300 	movne.w	r3, #33554432	@ 0x2000000
 8002cfa:	f44f 1300 	moveq.w	r3, #2097152	@ 0x200000
 8002cfe:	4a17      	ldr	r2, [pc, #92]	@ (8002d5c <HAL_DMA_IRQHandler+0x124>)
 8002d00:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002d02:	2300      	movs	r3, #0
 8002d04:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002d08:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002d0a:	e7c1      	b.n	8002c90 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e7f6      	b.n	8002cfe <HAL_DMA_IRQHandler+0xc6>
 8002d10:	2320      	movs	r3, #32
 8002d12:	e7f4      	b.n	8002cfe <HAL_DMA_IRQHandler+0xc6>
 8002d14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d18:	e7f1      	b.n	8002cfe <HAL_DMA_IRQHandler+0xc6>
 8002d1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d1e:	e7ee      	b.n	8002cfe <HAL_DMA_IRQHandler+0xc6>
 8002d20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d24:	e7eb      	b.n	8002cfe <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d26:	2508      	movs	r5, #8
 8002d28:	4095      	lsls	r5, r2
 8002d2a:	4225      	tst	r5, r4
 8002d2c:	d011      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x11a>
 8002d2e:	0709      	lsls	r1, r1, #28
 8002d30:	d50f      	bpl.n	8002d52 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d32:	6819      	ldr	r1, [r3, #0]
 8002d34:	f021 010e 	bic.w	r1, r1, #14
 8002d38:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	fa03 f202 	lsl.w	r2, r3, r2
 8002d40:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d42:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002d44:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002d4e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002d50:	e79e      	b.n	8002c90 <HAL_DMA_IRQHandler+0x58>
}
 8002d52:	bc70      	pop	{r4, r5, r6}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40020008 	.word	0x40020008
 8002d5c:	40020000 	.word	0x40020000

08002d60 <HAL_DMA_GetState>:
  return hdma->State;
 8002d60:	f890 0021 	ldrb.w	r0, [r0, #33]	@ 0x21
}
 8002d64:	4770      	bx	lr
	...

08002d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d6c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8002d6e:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d70:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8002efc <HAL_GPIO_Init+0x194>
 8002d74:	4b62      	ldr	r3, [pc, #392]	@ (8002f00 <HAL_GPIO_Init+0x198>)
      switch (GPIO_Init->Mode)
 8002d76:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8002f04 <HAL_GPIO_Init+0x19c>
 8002d7a:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8002f08 <HAL_GPIO_Init+0x1a0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d7e:	680a      	ldr	r2, [r1, #0]
 8002d80:	fa32 f506 	lsrs.w	r5, r2, r6
 8002d84:	d102      	bne.n	8002d8c <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8002d86:	b003      	add	sp, #12
 8002d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002d8c:	2701      	movs	r7, #1
 8002d8e:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d90:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 8002d94:	ea37 0202 	bics.w	r2, r7, r2
 8002d98:	d17a      	bne.n	8002e90 <HAL_GPIO_Init+0x128>
      switch (GPIO_Init->Mode)
 8002d9a:	684a      	ldr	r2, [r1, #4]
 8002d9c:	2a03      	cmp	r2, #3
 8002d9e:	d807      	bhi.n	8002db0 <HAL_GPIO_Init+0x48>
 8002da0:	3a01      	subs	r2, #1
 8002da2:	2a02      	cmp	r2, #2
 8002da4:	f200 8083 	bhi.w	8002eae <HAL_GPIO_Init+0x146>
 8002da8:	e8df f002 	tbb	[pc, r2]
 8002dac:	9792      	.short	0x9792
 8002dae:	9d          	.byte	0x9d
 8002daf:	00          	.byte	0x00
 8002db0:	2a12      	cmp	r2, #18
 8002db2:	f000 8095 	beq.w	8002ee0 <HAL_GPIO_Init+0x178>
 8002db6:	d86d      	bhi.n	8002e94 <HAL_GPIO_Init+0x12c>
 8002db8:	2a11      	cmp	r2, #17
 8002dba:	f000 808b 	beq.w	8002ed4 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dbe:	2dff      	cmp	r5, #255	@ 0xff
 8002dc0:	bf98      	it	ls
 8002dc2:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dc4:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dc8:	bf88      	it	hi
 8002dca:	f100 0904 	addhi.w	r9, r0, #4
 8002dce:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dd2:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002dd6:	bf88      	it	hi
 8002dd8:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dda:	fa0b fa02 	lsl.w	sl, fp, r2
 8002dde:	ea27 070a 	bic.w	r7, r7, sl
 8002de2:	fa04 f202 	lsl.w	r2, r4, r2
 8002de6:	4317      	orrs	r7, r2
 8002de8:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dec:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002df0:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8002df4:	d04c      	beq.n	8002e90 <HAL_GPIO_Init+0x128>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002df6:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8002dfa:	f026 0703 	bic.w	r7, r6, #3
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	f8cc 2018 	str.w	r2, [ip, #24]
 8002e06:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8002e0a:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8002e0e:	f002 0201 	and.w	r2, r2, #1
 8002e12:	9201      	str	r2, [sp, #4]
 8002e14:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e18:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e1c:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e1e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002e22:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e24:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002e28:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e2c:	4a37      	ldr	r2, [pc, #220]	@ (8002f0c <HAL_GPIO_Init+0x1a4>)
 8002e2e:	4290      	cmp	r0, r2
 8002e30:	d05d      	beq.n	8002eee <HAL_GPIO_Init+0x186>
 8002e32:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e36:	4290      	cmp	r0, r2
 8002e38:	d05b      	beq.n	8002ef2 <HAL_GPIO_Init+0x18a>
 8002e3a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e3e:	4290      	cmp	r0, r2
 8002e40:	d059      	beq.n	8002ef6 <HAL_GPIO_Init+0x18e>
 8002e42:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e46:	4290      	cmp	r0, r2
 8002e48:	bf14      	ite	ne
 8002e4a:	2204      	movne	r2, #4
 8002e4c:	2203      	moveq	r2, #3
 8002e4e:	fa02 f20a 	lsl.w	r2, r2, sl
 8002e52:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8002e56:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e58:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e5a:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e5e:	bf14      	ite	ne
 8002e60:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e62:	43aa      	biceq	r2, r5
 8002e64:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e66:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e68:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e6c:	bf14      	ite	ne
 8002e6e:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e70:	43aa      	biceq	r2, r5
 8002e72:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8002e74:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e76:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002e7a:	bf14      	ite	ne
 8002e7c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e7e:	43aa      	biceq	r2, r5
 8002e80:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8002e82:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e84:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002e88:	bf14      	ite	ne
 8002e8a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e8c:	43aa      	biceq	r2, r5
 8002e8e:	601a      	str	r2, [r3, #0]
	position++;
 8002e90:	3601      	adds	r6, #1
 8002e92:	e774      	b.n	8002d7e <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8002e94:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8002f10 <HAL_GPIO_Init+0x1a8>
 8002e98:	454a      	cmp	r2, r9
 8002e9a:	d008      	beq.n	8002eae <HAL_GPIO_Init+0x146>
 8002e9c:	d810      	bhi.n	8002ec0 <HAL_GPIO_Init+0x158>
 8002e9e:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8002ea2:	454a      	cmp	r2, r9
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_Init+0x146>
 8002ea6:	4572      	cmp	r2, lr
 8002ea8:	d001      	beq.n	8002eae <HAL_GPIO_Init+0x146>
 8002eaa:	4542      	cmp	r2, r8
 8002eac:	d187      	bne.n	8002dbe <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002eae:	688a      	ldr	r2, [r1, #8]
 8002eb0:	b1da      	cbz	r2, 8002eea <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002eb2:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002eb4:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8002eb8:	bf0c      	ite	eq
 8002eba:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8002ebc:	6147      	strne	r7, [r0, #20]
 8002ebe:	e77e      	b.n	8002dbe <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8002ec0:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8002f14 <HAL_GPIO_Init+0x1ac>
 8002ec4:	454a      	cmp	r2, r9
 8002ec6:	d0f2      	beq.n	8002eae <HAL_GPIO_Init+0x146>
 8002ec8:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8002ecc:	454a      	cmp	r2, r9
 8002ece:	e7ed      	b.n	8002eac <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ed0:	68cc      	ldr	r4, [r1, #12]
          break;
 8002ed2:	e774      	b.n	8002dbe <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ed4:	68cc      	ldr	r4, [r1, #12]
 8002ed6:	3404      	adds	r4, #4
          break;
 8002ed8:	e771      	b.n	8002dbe <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002eda:	68cc      	ldr	r4, [r1, #12]
 8002edc:	3408      	adds	r4, #8
          break;
 8002ede:	e76e      	b.n	8002dbe <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ee0:	68cc      	ldr	r4, [r1, #12]
 8002ee2:	340c      	adds	r4, #12
          break;
 8002ee4:	e76b      	b.n	8002dbe <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8002ee6:	2400      	movs	r4, #0
 8002ee8:	e769      	b.n	8002dbe <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002eea:	2404      	movs	r4, #4
 8002eec:	e767      	b.n	8002dbe <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002eee:	2200      	movs	r2, #0
 8002ef0:	e7ad      	b.n	8002e4e <HAL_GPIO_Init+0xe6>
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	e7ab      	b.n	8002e4e <HAL_GPIO_Init+0xe6>
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	e7a9      	b.n	8002e4e <HAL_GPIO_Init+0xe6>
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40010400 	.word	0x40010400
 8002f04:	10210000 	.word	0x10210000
 8002f08:	10110000 	.word	0x10110000
 8002f0c:	40010800 	.word	0x40010800
 8002f10:	10220000 	.word	0x10220000
 8002f14:	10310000 	.word	0x10310000

08002f18 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f18:	6883      	ldr	r3, [r0, #8]
 8002f1a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002f1c:	bf14      	ite	ne
 8002f1e:	2001      	movne	r0, #1
 8002f20:	2000      	moveq	r0, #0
 8002f22:	4770      	bx	lr

08002f24 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f24:	b10a      	cbz	r2, 8002f2a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f26:	6101      	str	r1, [r0, #16]
  }
}
 8002f28:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f2a:	0409      	lsls	r1, r1, #16
 8002f2c:	e7fb      	b.n	8002f26 <HAL_GPIO_WritePin+0x2>

08002f2e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f2e:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f30:	ea01 0203 	and.w	r2, r1, r3
 8002f34:	ea21 0103 	bic.w	r1, r1, r3
 8002f38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002f3c:	6101      	str	r1, [r0, #16]
}
 8002f3e:	4770      	bx	lr

08002f40 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f40:	6801      	ldr	r1, [r0, #0]
 8002f42:	2200      	movs	r2, #0
 8002f44:	694b      	ldr	r3, [r1, #20]
 8002f46:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 8002f4a:	d010      	beq.n	8002f6e <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f4c:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8002f50:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f52:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f54:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f56:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5a:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f5e:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f60:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f64:	f043 0304 	orr.w	r3, r3, #4
 8002f68:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 8002f6a:	2001      	movs	r0, #1
 8002f6c:	4770      	bx	lr
  }
  return HAL_OK;
 8002f6e:	4618      	mov	r0, r3
}
 8002f70:	4770      	bx	lr

08002f72 <I2C_WaitOnFlagUntilTimeout>:
{
 8002f72:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8002f76:	4606      	mov	r6, r0
 8002f78:	460f      	mov	r7, r1
 8002f7a:	4691      	mov	r9, r2
 8002f7c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f7e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8002f82:	6833      	ldr	r3, [r6, #0]
 8002f84:	f1ba 0f01 	cmp.w	sl, #1
 8002f88:	bf0c      	ite	eq
 8002f8a:	695c      	ldreq	r4, [r3, #20]
 8002f8c:	699c      	ldrne	r4, [r3, #24]
 8002f8e:	ea27 0404 	bic.w	r4, r7, r4
 8002f92:	b2a4      	uxth	r4, r4
 8002f94:	fab4 f484 	clz	r4, r4
 8002f98:	0964      	lsrs	r4, r4, #5
 8002f9a:	45a1      	cmp	r9, r4
 8002f9c:	d001      	beq.n	8002fa2 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	e025      	b.n	8002fee <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8002fa2:	1c6a      	adds	r2, r5, #1
 8002fa4:	d0ee      	beq.n	8002f84 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa6:	f7ff fd17 	bl	80029d8 <HAL_GetTick>
 8002faa:	9b08      	ldr	r3, [sp, #32]
 8002fac:	1ac0      	subs	r0, r0, r3
 8002fae:	42a8      	cmp	r0, r5
 8002fb0:	d801      	bhi.n	8002fb6 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002fb2:	2d00      	cmp	r5, #0
 8002fb4:	d1e5      	bne.n	8002f82 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fb6:	6833      	ldr	r3, [r6, #0]
 8002fb8:	f1ba 0f01 	cmp.w	sl, #1
 8002fbc:	bf0c      	ite	eq
 8002fbe:	695b      	ldreq	r3, [r3, #20]
 8002fc0:	699b      	ldrne	r3, [r3, #24]
 8002fc2:	ea27 0303 	bic.w	r3, r7, r3
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	fab3 f383 	clz	r3, r3
 8002fcc:	095b      	lsrs	r3, r3, #5
 8002fce:	4599      	cmp	r9, r3
 8002fd0:	d1d7      	bne.n	8002f82 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fd2:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fd4:	2220      	movs	r2, #32
          return HAL_ERROR;
 8002fd6:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fd8:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fda:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fde:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fe2:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002fe4:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fe8:	f042 0220 	orr.w	r2, r2, #32
 8002fec:	6432      	str	r2, [r6, #64]	@ 0x40
}
 8002fee:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08002ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ff6:	4604      	mov	r4, r0
 8002ff8:	460f      	mov	r7, r1
 8002ffa:	4616      	mov	r6, r2
 8002ffc:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ffe:	6825      	ldr	r5, [r4, #0]
 8003000:	6968      	ldr	r0, [r5, #20]
 8003002:	ea27 0000 	bic.w	r0, r7, r0
 8003006:	b280      	uxth	r0, r0
 8003008:	b1c0      	cbz	r0, 800303c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800300a:	696b      	ldr	r3, [r5, #20]
 800300c:	055a      	lsls	r2, r3, #21
 800300e:	d517      	bpl.n	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003010:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8003012:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003014:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003018:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800301a:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 800301e:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003020:	2300      	movs	r3, #0
 8003022:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003024:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003028:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800302c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800302e:	f043 0304 	orr.w	r3, r3, #4
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003032:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8003034:	2300      	movs	r3, #0
      return HAL_ERROR;
 8003036:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8003038:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800303c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003040:	1c73      	adds	r3, r6, #1
 8003042:	d0dd      	beq.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003044:	f7ff fcc8 	bl	80029d8 <HAL_GetTick>
 8003048:	eba0 0008 	sub.w	r0, r0, r8
 800304c:	42b0      	cmp	r0, r6
 800304e:	d801      	bhi.n	8003054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 8003050:	2e00      	cmp	r6, #0
 8003052:	d1d4      	bne.n	8002ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003054:	6823      	ldr	r3, [r4, #0]
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	ea27 0202 	bic.w	r2, r7, r2
 800305c:	b292      	uxth	r2, r2
 800305e:	2a00      	cmp	r2, #0
 8003060:	d0cd      	beq.n	8002ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003062:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8003064:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003066:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003068:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003070:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003072:	4313      	orrs	r3, r2
 8003074:	e7dd      	b.n	8003032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08003076 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003076:	b570      	push	{r4, r5, r6, lr}
 8003078:	4604      	mov	r4, r0
 800307a:	460d      	mov	r5, r1
 800307c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800307e:	6823      	ldr	r3, [r4, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	061b      	lsls	r3, r3, #24
 8003084:	d501      	bpl.n	800308a <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8003086:	2000      	movs	r0, #0
 8003088:	e01e      	b.n	80030c8 <I2C_WaitOnTXEFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800308a:	4620      	mov	r0, r4
 800308c:	f7ff ff58 	bl	8002f40 <I2C_IsAcknowledgeFailed>
 8003090:	b9c8      	cbnz	r0, 80030c6 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003092:	1c6a      	adds	r2, r5, #1
 8003094:	d0f3      	beq.n	800307e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003096:	f7ff fc9f 	bl	80029d8 <HAL_GetTick>
 800309a:	1b80      	subs	r0, r0, r6
 800309c:	42a8      	cmp	r0, r5
 800309e:	d801      	bhi.n	80030a4 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80030a0:	2d00      	cmp	r5, #0
 80030a2:	d1ec      	bne.n	800307e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 80030ac:	d1e7      	bne.n	800307e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 80030ae:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030b0:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030b2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ba:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80030bc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030c0:	f042 0220 	orr.w	r2, r2, #32
 80030c4:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80030c6:	2001      	movs	r0, #1
}
 80030c8:	bd70      	pop	{r4, r5, r6, pc}

080030ca <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80030ca:	b570      	push	{r4, r5, r6, lr}
 80030cc:	4604      	mov	r4, r0
 80030ce:	460d      	mov	r5, r1
 80030d0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	075b      	lsls	r3, r3, #29
 80030d8:	d501      	bpl.n	80030de <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80030da:	2000      	movs	r0, #0
 80030dc:	e01e      	b.n	800311c <I2C_WaitOnBTFFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030de:	4620      	mov	r0, r4
 80030e0:	f7ff ff2e 	bl	8002f40 <I2C_IsAcknowledgeFailed>
 80030e4:	b9c8      	cbnz	r0, 800311a <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80030e6:	1c6a      	adds	r2, r5, #1
 80030e8:	d0f3      	beq.n	80030d2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ea:	f7ff fc75 	bl	80029d8 <HAL_GetTick>
 80030ee:	1b80      	subs	r0, r0, r6
 80030f0:	42a8      	cmp	r0, r5
 80030f2:	d801      	bhi.n	80030f8 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80030f4:	2d00      	cmp	r5, #0
 80030f6:	d1ec      	bne.n	80030d2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f013 0304 	ands.w	r3, r3, #4
 8003100:	d1e7      	bne.n	80030d2 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8003102:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003104:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003106:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800310a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800310e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8003110:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003114:	f042 0220 	orr.w	r2, r2, #32
 8003118:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800311a:	2001      	movs	r0, #1
}
 800311c:	bd70      	pop	{r4, r5, r6, pc}

0800311e <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800311e:	b570      	push	{r4, r5, r6, lr}
 8003120:	4604      	mov	r4, r0
 8003122:	460d      	mov	r5, r1
 8003124:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003126:	6821      	ldr	r1, [r4, #0]
 8003128:	694b      	ldr	r3, [r1, #20]
 800312a:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 800312e:	d001      	beq.n	8003134 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8003130:	2000      	movs	r0, #0
 8003132:	e011      	b.n	8003158 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003134:	694a      	ldr	r2, [r1, #20]
 8003136:	06d2      	lsls	r2, r2, #27
 8003138:	d50f      	bpl.n	800315a <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800313a:	f06f 0210 	mvn.w	r2, #16
 800313e:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8003140:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003142:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003144:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003148:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800314c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800314e:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003150:	2300      	movs	r3, #0
      return HAL_ERROR;
 8003152:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 8003154:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003158:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315a:	f7ff fc3d 	bl	80029d8 <HAL_GetTick>
 800315e:	1b80      	subs	r0, r0, r6
 8003160:	42a8      	cmp	r0, r5
 8003162:	d801      	bhi.n	8003168 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003164:	2d00      	cmp	r5, #0
 8003166:	d1de      	bne.n	8003126 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003168:	6823      	ldr	r3, [r4, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8003170:	d1d9      	bne.n	8003126 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 8003172:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003174:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003176:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800317e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003180:	4313      	orrs	r3, r2
 8003182:	e7e4      	b.n	800314e <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08003184 <HAL_I2C_Init>:
{
 8003184:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8003186:	4604      	mov	r4, r0
 8003188:	b908      	cbnz	r0, 800318e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800318a:	2001      	movs	r0, #1
}
 800318c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800318e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003192:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003196:	b91b      	cbnz	r3, 80031a0 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8003198:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 800319c:	f7fd ff6e 	bl	800107c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80031a0:	2324      	movs	r3, #36	@ 0x24
 80031a2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	f022 0201 	bic.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031be:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031c0:	f001 fb34 	bl	800482c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031c4:	4b3f      	ldr	r3, [pc, #252]	@ (80032c4 <HAL_I2C_Init+0x140>)
 80031c6:	6865      	ldr	r5, [r4, #4]
 80031c8:	429d      	cmp	r5, r3
 80031ca:	bf94      	ite	ls
 80031cc:	4b3e      	ldrls	r3, [pc, #248]	@ (80032c8 <HAL_I2C_Init+0x144>)
 80031ce:	4b3f      	ldrhi	r3, [pc, #252]	@ (80032cc <HAL_I2C_Init+0x148>)
 80031d0:	4298      	cmp	r0, r3
 80031d2:	bf8c      	ite	hi
 80031d4:	2300      	movhi	r3, #0
 80031d6:	2301      	movls	r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1d6      	bne.n	800318a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031dc:	4e39      	ldr	r6, [pc, #228]	@ (80032c4 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 80031de:	4b3c      	ldr	r3, [pc, #240]	@ (80032d0 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031e0:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 80031e2:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031e6:	bf88      	it	hi
 80031e8:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031ec:	6822      	ldr	r2, [r4, #0]
 80031ee:	6851      	ldr	r1, [r2, #4]
 80031f0:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80031f4:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031f8:	bf82      	ittt	hi
 80031fa:	4373      	mulhi	r3, r6
 80031fc:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8003200:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003204:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003206:	6a11      	ldr	r1, [r2, #32]
 8003208:	3301      	adds	r3, #1
 800320a:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800320e:	430b      	orrs	r3, r1
 8003210:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003212:	69d1      	ldr	r1, [r2, #28]
 8003214:	1e43      	subs	r3, r0, #1
 8003216:	482b      	ldr	r0, [pc, #172]	@ (80032c4 <HAL_I2C_Init+0x140>)
 8003218:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 800321c:	4285      	cmp	r5, r0
 800321e:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8003222:	d832      	bhi.n	800328a <HAL_I2C_Init+0x106>
 8003224:	006d      	lsls	r5, r5, #1
 8003226:	fbb3 f3f5 	udiv	r3, r3, r5
 800322a:	f640 70fc 	movw	r0, #4092	@ 0xffc
 800322e:	3301      	adds	r3, #1
 8003230:	4203      	tst	r3, r0
 8003232:	d042      	beq.n	80032ba <HAL_I2C_Init+0x136>
 8003234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003238:	4319      	orrs	r1, r3
 800323a:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800323c:	6811      	ldr	r1, [r2, #0]
 800323e:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8003242:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8003246:	4303      	orrs	r3, r0
 8003248:	430b      	orrs	r3, r1
 800324a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800324c:	6891      	ldr	r1, [r2, #8]
 800324e:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8003252:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8003256:	4303      	orrs	r3, r0
 8003258:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800325c:	430b      	orrs	r3, r1
 800325e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003260:	68d1      	ldr	r1, [r2, #12]
 8003262:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8003266:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800326a:	4303      	orrs	r3, r0
 800326c:	430b      	orrs	r3, r1
 800326e:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003270:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003272:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800327a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800327c:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800327e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003282:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003284:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8003288:	e780      	b.n	800318c <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800328a:	68a0      	ldr	r0, [r4, #8]
 800328c:	b950      	cbnz	r0, 80032a4 <HAL_I2C_Init+0x120>
 800328e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003292:	fbb3 f3f5 	udiv	r3, r3, r5
 8003296:	3301      	adds	r3, #1
 8003298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800329c:	b17b      	cbz	r3, 80032be <HAL_I2C_Init+0x13a>
 800329e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032a2:	e7c9      	b.n	8003238 <HAL_I2C_Init+0xb4>
 80032a4:	2019      	movs	r0, #25
 80032a6:	4368      	muls	r0, r5
 80032a8:	fbb3 f3f0 	udiv	r3, r3, r0
 80032ac:	3301      	adds	r3, #1
 80032ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b2:	b123      	cbz	r3, 80032be <HAL_I2C_Init+0x13a>
 80032b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032b8:	e7be      	b.n	8003238 <HAL_I2C_Init+0xb4>
 80032ba:	2304      	movs	r3, #4
 80032bc:	e7bc      	b.n	8003238 <HAL_I2C_Init+0xb4>
 80032be:	2301      	movs	r3, #1
 80032c0:	e7ba      	b.n	8003238 <HAL_I2C_Init+0xb4>
 80032c2:	bf00      	nop
 80032c4:	000186a0 	.word	0x000186a0
 80032c8:	001e847f 	.word	0x001e847f
 80032cc:	003d08ff 	.word	0x003d08ff
 80032d0:	000f4240 	.word	0x000f4240

080032d4 <HAL_I2C_Master_Transmit>:
{
 80032d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032d8:	4604      	mov	r4, r0
 80032da:	b085      	sub	sp, #20
 80032dc:	4698      	mov	r8, r3
 80032de:	460d      	mov	r5, r1
 80032e0:	4691      	mov	r9, r2
 80032e2:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 80032e4:	f7ff fb78 	bl	80029d8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e8:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 80032ec:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ee:	2b20      	cmp	r3, #32
 80032f0:	d004      	beq.n	80032fc <HAL_I2C_Master_Transmit+0x28>
      return HAL_BUSY;
 80032f2:	2502      	movs	r5, #2
}
 80032f4:	4628      	mov	r0, r5
 80032f6:	b005      	add	sp, #20
 80032f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032fc:	9000      	str	r0, [sp, #0]
 80032fe:	2319      	movs	r3, #25
 8003300:	2201      	movs	r2, #1
 8003302:	4620      	mov	r0, r4
 8003304:	495c      	ldr	r1, [pc, #368]	@ (8003478 <HAL_I2C_Master_Transmit+0x1a4>)
 8003306:	f7ff fe34 	bl	8002f72 <I2C_WaitOnFlagUntilTimeout>
 800330a:	2800      	cmp	r0, #0
 800330c:	d1f1      	bne.n	80032f2 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 800330e:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8003312:	2b01      	cmp	r3, #1
 8003314:	d0ed      	beq.n	80032f2 <HAL_I2C_Master_Transmit+0x1e>
 8003316:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003318:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 800331a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800331e:	680b      	ldr	r3, [r1, #0]
 8003320:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8003322:	bf5e      	ittt	pl
 8003324:	680b      	ldrpl	r3, [r1, #0]
 8003326:	f043 0301 	orrpl.w	r3, r3, #1
 800332a:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800332c:	680b      	ldr	r3, [r1, #0]
 800332e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003332:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003334:	2321      	movs	r3, #33	@ 0x21
 8003336:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800333a:	2310      	movs	r3, #16
 800333c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003340:	2300      	movs	r3, #0
 8003342:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 8003344:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003348:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr    = pData;
 800334a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800334e:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003350:	4b4a      	ldr	r3, [pc, #296]	@ (800347c <HAL_I2C_Master_Transmit+0x1a8>)
 8003352:	62e3      	str	r3, [r4, #44]	@ 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003354:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003356:	2b08      	cmp	r3, #8
 8003358:	d004      	beq.n	8003364 <HAL_I2C_Master_Transmit+0x90>
 800335a:	2b01      	cmp	r3, #1
 800335c:	d002      	beq.n	8003364 <HAL_I2C_Master_Transmit+0x90>
 800335e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003362:	d104      	bne.n	800336e <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003364:	680b      	ldr	r3, [r1, #0]
 8003366:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800336a:	600b      	str	r3, [r1, #0]
 800336c:	e002      	b.n	8003374 <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800336e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003370:	2b12      	cmp	r3, #18
 8003372:	d0f7      	beq.n	8003364 <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003374:	2200      	movs	r2, #0
 8003376:	463b      	mov	r3, r7
 8003378:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800337c:	4620      	mov	r0, r4
 800337e:	9600      	str	r6, [sp, #0]
 8003380:	f7ff fdf7 	bl	8002f72 <I2C_WaitOnFlagUntilTimeout>
 8003384:	6822      	ldr	r2, [r4, #0]
 8003386:	b140      	cbz	r0, 800339a <HAL_I2C_Master_Transmit+0xc6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003388:	6813      	ldr	r3, [r2, #0]
 800338a:	05db      	lsls	r3, r3, #23
 800338c:	d401      	bmi.n	8003392 <HAL_I2C_Master_Transmit+0xbe>
      return HAL_ERROR;
 800338e:	2501      	movs	r5, #1
 8003390:	e7b0      	b.n	80032f4 <HAL_I2C_Master_Transmit+0x20>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003392:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003396:	6423      	str	r3, [r4, #64]	@ 0x40
 8003398:	e7f9      	b.n	800338e <HAL_I2C_Master_Transmit+0xba>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800339a:	6923      	ldr	r3, [r4, #16]
 800339c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033a0:	d121      	bne.n	80033e6 <HAL_I2C_Master_Transmit+0x112>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033a2:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 80033a6:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033a8:	4633      	mov	r3, r6
 80033aa:	463a      	mov	r2, r7
 80033ac:	4620      	mov	r0, r4
 80033ae:	4934      	ldr	r1, [pc, #208]	@ (8003480 <HAL_I2C_Master_Transmit+0x1ac>)
 80033b0:	f7ff fe1f 	bl	8002ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033b4:	4605      	mov	r5, r0
 80033b6:	2800      	cmp	r0, #0
 80033b8:	d1e9      	bne.n	800338e <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	9003      	str	r0, [sp, #12]
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	9203      	str	r2, [sp, #12]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	9303      	str	r3, [sp, #12]
 80033c6:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80033c8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80033ca:	b9f3      	cbnz	r3, 800340a <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033cc:	6821      	ldr	r1, [r4, #0]
 80033ce:	680a      	ldr	r2, [r1, #0]
 80033d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033d4:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80033d6:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80033d8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80033dc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 80033e4:	e786      	b.n	80032f4 <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033e6:	11eb      	asrs	r3, r5, #7
 80033e8:	f003 0306 	and.w	r3, r3, #6
 80033ec:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 80033f0:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033f2:	4620      	mov	r0, r4
 80033f4:	4633      	mov	r3, r6
 80033f6:	463a      	mov	r2, r7
 80033f8:	4922      	ldr	r1, [pc, #136]	@ (8003484 <HAL_I2C_Master_Transmit+0x1b0>)
 80033fa:	f7ff fdfa 	bl	8002ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033fe:	2800      	cmp	r0, #0
 8003400:	d1c5      	bne.n	800338e <HAL_I2C_Master_Transmit+0xba>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003402:	6823      	ldr	r3, [r4, #0]
 8003404:	b2ed      	uxtb	r5, r5
 8003406:	611d      	str	r5, [r3, #16]
 8003408:	e7ce      	b.n	80033a8 <HAL_I2C_Master_Transmit+0xd4>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800340a:	4632      	mov	r2, r6
 800340c:	4639      	mov	r1, r7
 800340e:	4620      	mov	r0, r4
 8003410:	f7ff fe31 	bl	8003076 <I2C_WaitOnTXEFlagUntilTimeout>
 8003414:	b140      	cbz	r0, 8003428 <HAL_I2C_Master_Transmit+0x154>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003416:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003418:	2b04      	cmp	r3, #4
 800341a:	d1b8      	bne.n	800338e <HAL_I2C_Master_Transmit+0xba>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341c:	6822      	ldr	r2, [r4, #0]
 800341e:	6813      	ldr	r3, [r2, #0]
 8003420:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	e7b2      	b.n	800338e <HAL_I2C_Master_Transmit+0xba>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003428:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800342a:	6820      	ldr	r0, [r4, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003432:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8003434:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003436:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003438:	3a01      	subs	r2, #1
 800343a:	b292      	uxth	r2, r2
 800343c:	8562      	strh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800343e:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003440:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 8003444:	1e51      	subs	r1, r2, #1
 8003446:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003448:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 800344c:	8521      	strh	r1, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800344e:	d00a      	beq.n	8003466 <HAL_I2C_Master_Transmit+0x192>
 8003450:	b149      	cbz	r1, 8003466 <HAL_I2C_Master_Transmit+0x192>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003452:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 8003454:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003456:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8003458:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 800345a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 800345c:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 800345e:	3b01      	subs	r3, #1
 8003460:	b29b      	uxth	r3, r3
 8003462:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8003464:	8522      	strh	r2, [r4, #40]	@ 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003466:	4632      	mov	r2, r6
 8003468:	4639      	mov	r1, r7
 800346a:	4620      	mov	r0, r4
 800346c:	f7ff fe2d 	bl	80030ca <I2C_WaitOnBTFFlagUntilTimeout>
 8003470:	2800      	cmp	r0, #0
 8003472:	d0a9      	beq.n	80033c8 <HAL_I2C_Master_Transmit+0xf4>
 8003474:	e7cf      	b.n	8003416 <HAL_I2C_Master_Transmit+0x142>
 8003476:	bf00      	nop
 8003478:	00100002 	.word	0x00100002
 800347c:	ffff0000 	.word	0xffff0000
 8003480:	00010002 	.word	0x00010002
 8003484:	00010008 	.word	0x00010008

08003488 <HAL_I2C_Master_Receive>:
{
 8003488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800348c:	4698      	mov	r8, r3
  __IO uint32_t count = 0U;
 800348e:	2300      	movs	r3, #0
{
 8003490:	4604      	mov	r4, r0
 8003492:	b089      	sub	sp, #36	@ 0x24
  __IO uint32_t count = 0U;
 8003494:	9302      	str	r3, [sp, #8]
{
 8003496:	460e      	mov	r6, r1
 8003498:	4691      	mov	r9, r2
 800349a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800349c:	f7ff fa9c 	bl	80029d8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a0:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 80034a4:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d004      	beq.n	80034b4 <HAL_I2C_Master_Receive+0x2c>
      return HAL_BUSY;
 80034aa:	2602      	movs	r6, #2
}
 80034ac:	4630      	mov	r0, r6
 80034ae:	b009      	add	sp, #36	@ 0x24
 80034b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034b4:	9000      	str	r0, [sp, #0]
 80034b6:	2319      	movs	r3, #25
 80034b8:	2201      	movs	r2, #1
 80034ba:	4620      	mov	r0, r4
 80034bc:	498f      	ldr	r1, [pc, #572]	@ (80036fc <HAL_I2C_Master_Receive+0x274>)
 80034be:	f7ff fd58 	bl	8002f72 <I2C_WaitOnFlagUntilTimeout>
 80034c2:	2800      	cmp	r0, #0
 80034c4:	d1f1      	bne.n	80034aa <HAL_I2C_Master_Receive+0x22>
    __HAL_LOCK(hi2c);
 80034c6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d0ed      	beq.n	80034aa <HAL_I2C_Master_Receive+0x22>
 80034ce:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034d0:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 80034d2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034d6:	680b      	ldr	r3, [r1, #0]
 80034d8:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80034da:	bf5e      	ittt	pl
 80034dc:	680b      	ldrpl	r3, [r1, #0]
 80034de:	f043 0301 	orrpl.w	r3, r3, #1
 80034e2:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034e4:	680b      	ldr	r3, [r1, #0]
 80034e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034ea:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80034ec:	2322      	movs	r3, #34	@ 0x22
 80034ee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034f2:	2310      	movs	r3, #16
 80034f4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034f8:	2300      	movs	r3, #0
 80034fa:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 80034fc:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003500:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr    = pData;
 8003502:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8003506:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003508:	4b7d      	ldr	r3, [pc, #500]	@ (8003700 <HAL_I2C_Master_Receive+0x278>)
 800350a:	62e3      	str	r3, [r4, #44]	@ 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800350c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800350e:	680a      	ldr	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003510:	2b08      	cmp	r3, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003512:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003516:	600a      	str	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003518:	d004      	beq.n	8003524 <HAL_I2C_Master_Receive+0x9c>
 800351a:	2b01      	cmp	r3, #1
 800351c:	d002      	beq.n	8003524 <HAL_I2C_Master_Receive+0x9c>
 800351e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003522:	d104      	bne.n	800352e <HAL_I2C_Master_Receive+0xa6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003524:	680b      	ldr	r3, [r1, #0]
 8003526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800352a:	600b      	str	r3, [r1, #0]
 800352c:	e002      	b.n	8003534 <HAL_I2C_Master_Receive+0xac>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800352e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003530:	2b11      	cmp	r3, #17
 8003532:	d0f7      	beq.n	8003524 <HAL_I2C_Master_Receive+0x9c>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003534:	463b      	mov	r3, r7
 8003536:	2200      	movs	r2, #0
 8003538:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800353c:	4620      	mov	r0, r4
 800353e:	9500      	str	r5, [sp, #0]
 8003540:	f7ff fd17 	bl	8002f72 <I2C_WaitOnFlagUntilTimeout>
 8003544:	6823      	ldr	r3, [r4, #0]
 8003546:	b138      	cbz	r0, 8003558 <HAL_I2C_Master_Receive+0xd0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003548:	681b      	ldr	r3, [r3, #0]
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800354a:	05d8      	lsls	r0, r3, #23
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800354c:	bf44      	itt	mi
 800354e:	f44f 7300 	movmi.w	r3, #512	@ 0x200
 8003552:	6423      	strmi	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8003554:	2601      	movs	r6, #1
 8003556:	e7a9      	b.n	80034ac <HAL_I2C_Master_Receive+0x24>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003558:	6922      	ldr	r2, [r4, #16]
 800355a:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 800355e:	d129      	bne.n	80035b4 <HAL_I2C_Master_Receive+0x12c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003560:	f046 0601 	orr.w	r6, r6, #1
 8003564:	b2f6      	uxtb	r6, r6
 8003566:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003568:	462b      	mov	r3, r5
 800356a:	463a      	mov	r2, r7
 800356c:	4620      	mov	r0, r4
 800356e:	4965      	ldr	r1, [pc, #404]	@ (8003704 <HAL_I2C_Master_Receive+0x27c>)
 8003570:	f7ff fd3f 	bl	8002ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003574:	4606      	mov	r6, r0
 8003576:	2800      	cmp	r0, #0
 8003578:	d1ec      	bne.n	8003554 <HAL_I2C_Master_Receive+0xcc>
    if (hi2c->XferSize == 0U)
 800357a:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357c:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 800357e:	2a00      	cmp	r2, #0
 8003580:	d14d      	bne.n	800361e <HAL_I2C_Master_Receive+0x196>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003582:	9003      	str	r0, [sp, #12]
 8003584:	695a      	ldr	r2, [r3, #20]
 8003586:	9203      	str	r2, [sp, #12]
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	9203      	str	r2, [sp, #12]
 800358c:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003594:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003596:	f8df 8170 	ldr.w	r8, [pc, #368]	@ 8003708 <HAL_I2C_Master_Receive+0x280>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800359a:	f8df 9170 	ldr.w	r9, [pc, #368]	@ 800370c <HAL_I2C_Master_Receive+0x284>
    while (hi2c->XferSize > 0U)
 800359e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d16c      	bne.n	800367e <HAL_I2C_Master_Receive+0x1f6>
    hi2c->State = HAL_I2C_STATE_READY;
 80035a4:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80035a6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80035aa:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ae:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 80035b2:	e77b      	b.n	80034ac <HAL_I2C_Master_Receive+0x24>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035b4:	ea4f 18e6 	mov.w	r8, r6, asr #7
 80035b8:	f008 0806 	and.w	r8, r8, #6
 80035bc:	f048 02f0 	orr.w	r2, r8, #240	@ 0xf0
 80035c0:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035c2:	4620      	mov	r0, r4
 80035c4:	462b      	mov	r3, r5
 80035c6:	463a      	mov	r2, r7
 80035c8:	4951      	ldr	r1, [pc, #324]	@ (8003710 <HAL_I2C_Master_Receive+0x288>)
 80035ca:	f7ff fd12 	bl	8002ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035ce:	2800      	cmp	r0, #0
 80035d0:	d1c0      	bne.n	8003554 <HAL_I2C_Master_Receive+0xcc>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	b2f6      	uxtb	r6, r6
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035d6:	463a      	mov	r2, r7
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035d8:	611e      	str	r6, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035da:	4620      	mov	r0, r4
 80035dc:	462b      	mov	r3, r5
 80035de:	4949      	ldr	r1, [pc, #292]	@ (8003704 <HAL_I2C_Master_Receive+0x27c>)
 80035e0:	f7ff fd07 	bl	8002ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035e4:	4602      	mov	r2, r0
 80035e6:	2800      	cmp	r0, #0
 80035e8:	d1b4      	bne.n	8003554 <HAL_I2C_Master_Receive+0xcc>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	9007      	str	r0, [sp, #28]
 80035ee:	6959      	ldr	r1, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035f0:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f2:	9107      	str	r1, [sp, #28]
 80035f4:	6999      	ldr	r1, [r3, #24]
 80035f6:	9107      	str	r1, [sp, #28]
 80035f8:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035fa:	6819      	ldr	r1, [r3, #0]
 80035fc:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8003600:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003602:	463b      	mov	r3, r7
 8003604:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003608:	9500      	str	r5, [sp, #0]
 800360a:	f7ff fcb2 	bl	8002f72 <I2C_WaitOnFlagUntilTimeout>
 800360e:	6822      	ldr	r2, [r4, #0]
 8003610:	b108      	cbz	r0, 8003616 <HAL_I2C_Master_Receive+0x18e>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003612:	6813      	ldr	r3, [r2, #0]
 8003614:	e799      	b.n	800354a <HAL_I2C_Master_Receive+0xc2>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003616:	f048 03f1 	orr.w	r3, r8, #241	@ 0xf1
 800361a:	6113      	str	r3, [r2, #16]
 800361c:	e7a4      	b.n	8003568 <HAL_I2C_Master_Receive+0xe0>
    else if (hi2c->XferSize == 1U)
 800361e:	2a01      	cmp	r2, #1
 8003620:	d111      	bne.n	8003646 <HAL_I2C_Master_Receive+0x1be>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	9004      	str	r0, [sp, #16]
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	9204      	str	r2, [sp, #16]
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	9204      	str	r2, [sp, #16]
 8003638:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003640:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003642:	b662      	cpsie	i
}
 8003644:	e7a7      	b.n	8003596 <HAL_I2C_Master_Receive+0x10e>
    else if (hi2c->XferSize == 2U)
 8003646:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003648:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 800364a:	d10e      	bne.n	800366a <HAL_I2C_Master_Receive+0x1e2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800364c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003650:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003652:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	9005      	str	r0, [sp, #20]
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	9205      	str	r2, [sp, #20]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	9205      	str	r2, [sp, #20]
 8003660:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003668:	e7ea      	b.n	8003640 <HAL_I2C_Master_Receive+0x1b8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800366a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800366e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003670:	9006      	str	r0, [sp, #24]
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	9206      	str	r2, [sp, #24]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	9306      	str	r3, [sp, #24]
 800367a:	9b06      	ldr	r3, [sp, #24]
 800367c:	e78b      	b.n	8003596 <HAL_I2C_Master_Receive+0x10e>
      if (hi2c->XferSize <= 3U)
 800367e:	2b03      	cmp	r3, #3
 8003680:	f200 8088 	bhi.w	8003794 <HAL_I2C_Master_Receive+0x30c>
        if (hi2c->XferSize == 1U)
 8003684:	2b01      	cmp	r3, #1
 8003686:	d116      	bne.n	80036b6 <HAL_I2C_Master_Receive+0x22e>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003688:	462a      	mov	r2, r5
 800368a:	4639      	mov	r1, r7
 800368c:	4620      	mov	r0, r4
 800368e:	f7ff fd46 	bl	800311e <I2C_WaitOnRXNEFlagUntilTimeout>
 8003692:	2800      	cmp	r0, #0
 8003694:	f47f af5e 	bne.w	8003554 <HAL_I2C_Master_Receive+0xcc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003698:	6823      	ldr	r3, [r4, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800369e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80036a0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80036a2:	3301      	adds	r3, #1
 80036a4:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80036a6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80036a8:	3b01      	subs	r3, #1
 80036aa:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80036ac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80036b4:	e773      	b.n	800359e <HAL_I2C_Master_Receive+0x116>
        else if (hi2c->XferSize == 2U)
 80036b6:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	463b      	mov	r3, r7
 80036be:	4641      	mov	r1, r8
 80036c0:	4620      	mov	r0, r4
 80036c2:	9500      	str	r5, [sp, #0]
        else if (hi2c->XferSize == 2U)
 80036c4:	d126      	bne.n	8003714 <HAL_I2C_Master_Receive+0x28c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036c6:	f7ff fc54 	bl	8002f72 <I2C_WaitOnFlagUntilTimeout>
 80036ca:	2800      	cmp	r0, #0
 80036cc:	f47f af42 	bne.w	8003554 <HAL_I2C_Master_Receive+0xcc>
 80036d0:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036da:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80036e0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80036e2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80036e4:	3301      	adds	r3, #1
 80036e6:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80036e8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80036ea:	3b01      	subs	r3, #1
 80036ec:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80036ee:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	8563      	strh	r3, [r4, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036f6:	b662      	cpsie	i
 80036f8:	e7ce      	b.n	8003698 <HAL_I2C_Master_Receive+0x210>
 80036fa:	bf00      	nop
 80036fc:	00100002 	.word	0x00100002
 8003700:	ffff0000 	.word	0xffff0000
 8003704:	00010002 	.word	0x00010002
 8003708:	00010004 	.word	0x00010004
 800370c:	20000014 	.word	0x20000014
 8003710:	00010008 	.word	0x00010008
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003714:	f7ff fc2d 	bl	8002f72 <I2C_WaitOnFlagUntilTimeout>
 8003718:	2800      	cmp	r0, #0
 800371a:	f47f af1b 	bne.w	8003554 <HAL_I2C_Master_Receive+0xcc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800371e:	6822      	ldr	r2, [r4, #0]
 8003720:	6813      	ldr	r3, [r2, #0]
 8003722:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003726:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003728:	b672      	cpsid	i
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800372a:	f246 11a8 	movw	r1, #25000	@ 0x61a8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003734:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003736:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003738:	1c53      	adds	r3, r2, #1
 800373a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800373c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800373e:	3b01      	subs	r3, #1
 8003740:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003742:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003744:	3b01      	subs	r3, #1
 8003746:	b29b      	uxth	r3, r3
 8003748:	8563      	strh	r3, [r4, #42]	@ 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800374a:	f8d9 3000 	ldr.w	r3, [r9]
 800374e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003752:	2123      	movs	r1, #35	@ 0x23
 8003754:	434b      	muls	r3, r1
 8003756:	9302      	str	r3, [sp, #8]
            count--;
 8003758:	9b02      	ldr	r3, [sp, #8]
 800375a:	3b01      	subs	r3, #1
 800375c:	9302      	str	r3, [sp, #8]
            if (count == 0U)
 800375e:	9b02      	ldr	r3, [sp, #8]
 8003760:	b96b      	cbnz	r3, 800377e <HAL_I2C_Master_Receive+0x2f6>
              hi2c->State               = HAL_I2C_STATE_READY;
 8003762:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003764:	6323      	str	r3, [r4, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003766:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800376a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800376e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003770:	f042 0220 	orr.w	r2, r2, #32
 8003774:	6422      	str	r2, [r4, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003776:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8003778:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
              return HAL_ERROR;
 800377c:	e6ea      	b.n	8003554 <HAL_I2C_Master_Receive+0xcc>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	6959      	ldr	r1, [r3, #20]
 8003782:	0749      	lsls	r1, r1, #29
 8003784:	d5e8      	bpl.n	8003758 <HAL_I2C_Master_Receive+0x2d0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003786:	6819      	ldr	r1, [r3, #0]
 8003788:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800378c:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	7053      	strb	r3, [r2, #1]
 8003792:	e7a6      	b.n	80036e2 <HAL_I2C_Master_Receive+0x25a>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003794:	462a      	mov	r2, r5
 8003796:	4639      	mov	r1, r7
 8003798:	4620      	mov	r0, r4
 800379a:	f7ff fcc0 	bl	800311e <I2C_WaitOnRXNEFlagUntilTimeout>
 800379e:	2800      	cmp	r0, #0
 80037a0:	f47f aed8 	bne.w	8003554 <HAL_I2C_Master_Receive+0xcc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80037aa:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 80037ac:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
        hi2c->pBuffPtr++;
 80037ae:	6a61      	ldr	r1, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 80037b0:	3a01      	subs	r2, #1
 80037b2:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 80037b4:	1c4b      	adds	r3, r1, #1
        hi2c->XferCount--;
 80037b6:	8562      	strh	r2, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037b8:	6822      	ldr	r2, [r4, #0]
        hi2c->pBuffPtr++;
 80037ba:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 80037bc:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037be:	6950      	ldr	r0, [r2, #20]
        hi2c->XferSize--;
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29b      	uxth	r3, r3
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037c4:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 80037c6:	8523      	strh	r3, [r4, #40]	@ 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037c8:	f57f aee9 	bpl.w	800359e <HAL_I2C_Master_Receive+0x116>
          if (hi2c->XferSize == 3U)
 80037cc:	2b03      	cmp	r3, #3
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ce:	bf02      	ittt	eq
 80037d0:	6813      	ldreq	r3, [r2, #0]
 80037d2:	f423 6380 	biceq.w	r3, r3, #1024	@ 0x400
 80037d6:	6013      	streq	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d8:	6913      	ldr	r3, [r2, #16]
 80037da:	704b      	strb	r3, [r1, #1]
 80037dc:	e760      	b.n	80036a0 <HAL_I2C_Master_Receive+0x218>
 80037de:	bf00      	nop

080037e0 <HAL_I2C_MasterTxCpltCallback>:
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
 80037e0:	4770      	bx	lr

080037e2 <HAL_I2C_MasterRxCpltCallback>:
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
 80037e2:	4770      	bx	lr

080037e4 <HAL_I2C_SlaveTxCpltCallback>:
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
 80037e4:	4770      	bx	lr

080037e6 <HAL_I2C_SlaveRxCpltCallback>:
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
 80037e6:	4770      	bx	lr

080037e8 <HAL_I2C_AddrCallback>:
}
 80037e8:	4770      	bx	lr

080037ea <HAL_I2C_ListenCpltCallback>:
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
 80037ea:	4770      	bx	lr

080037ec <HAL_I2C_MemTxCpltCallback>:
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
 80037ec:	4770      	bx	lr

080037ee <I2C_MemoryTransmit_TXE_BTF>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037ee:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
{
 80037f2:	b508      	push	{r3, lr}
  if (hi2c->EventCount == 0U)
 80037f4:	6d03      	ldr	r3, [r0, #80]	@ 0x50
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037f6:	b2d2      	uxtb	r2, r2
  if (hi2c->EventCount == 0U)
 80037f8:	b983      	cbnz	r3, 800381c <I2C_MemoryTransmit_TXE_BTF+0x2e>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80037fa:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80037fc:	6802      	ldr	r2, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80037fe:	2b01      	cmp	r3, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003800:	6c83      	ldr	r3, [r0, #72]	@ 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003802:	d105      	bne.n	8003810 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003804:	b2db      	uxtb	r3, r3
 8003806:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8003808:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800380a:	3302      	adds	r3, #2
      hi2c->EventCount++;
 800380c:	6503      	str	r3, [r0, #80]	@ 0x50
}
 800380e:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003810:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003814:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8003816:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003818:	3301      	adds	r3, #1
 800381a:	e7f7      	b.n	800380c <I2C_MemoryTransmit_TXE_BTF+0x1e>
  else if (hi2c->EventCount == 1U)
 800381c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800381e:	2b01      	cmp	r3, #1
 8003820:	d103      	bne.n	800382a <I2C_MemoryTransmit_TXE_BTF+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003822:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8003824:	6802      	ldr	r2, [r0, #0]
 8003826:	b2db      	uxtb	r3, r3
 8003828:	e7f4      	b.n	8003814 <I2C_MemoryTransmit_TXE_BTF+0x26>
  else if (hi2c->EventCount == 2U)
 800382a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800382c:	2b02      	cmp	r3, #2
 800382e:	d12f      	bne.n	8003890 <I2C_MemoryTransmit_TXE_BTF+0xa2>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003830:	2a22      	cmp	r2, #34	@ 0x22
 8003832:	d105      	bne.n	8003840 <I2C_MemoryTransmit_TXE_BTF+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003834:	6802      	ldr	r2, [r0, #0]
 8003836:	6813      	ldr	r3, [r2, #0]
 8003838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800383c:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 800383e:	e7ea      	b.n	8003816 <I2C_MemoryTransmit_TXE_BTF+0x28>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003840:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003842:	b29b      	uxth	r3, r3
 8003844:	b163      	cbz	r3, 8003860 <I2C_MemoryTransmit_TXE_BTF+0x72>
 8003846:	2a21      	cmp	r2, #33	@ 0x21
 8003848:	d10a      	bne.n	8003860 <I2C_MemoryTransmit_TXE_BTF+0x72>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800384a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800384c:	6802      	ldr	r2, [r0, #0]
 800384e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003852:	6111      	str	r1, [r2, #16]
      hi2c->pBuffPtr++;
 8003854:	6243      	str	r3, [r0, #36]	@ 0x24
      hi2c->XferCount--;
 8003856:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003858:	3b01      	subs	r3, #1
 800385a:	b29b      	uxth	r3, r3
 800385c:	8543      	strh	r3, [r0, #42]	@ 0x2a
 800385e:	e7d6      	b.n	800380e <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003860:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1d2      	bne.n	800380e <I2C_MemoryTransmit_TXE_BTF+0x20>
 8003868:	2a21      	cmp	r2, #33	@ 0x21
 800386a:	d1d0      	bne.n	800380e <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800386c:	6802      	ldr	r2, [r0, #0]
 800386e:	6851      	ldr	r1, [r2, #4]
 8003870:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8003874:	6051      	str	r1, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003876:	6811      	ldr	r1, [r2, #0]
 8003878:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800387c:	6011      	str	r1, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 800387e:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8003880:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003882:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003886:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800388a:	f7ff ffaf 	bl	80037ec <HAL_I2C_MemTxCpltCallback>
 800388e:	e7be      	b.n	800380e <I2C_MemoryTransmit_TXE_BTF+0x20>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003890:	6803      	ldr	r3, [r0, #0]
 8003892:	695a      	ldr	r2, [r3, #20]
 8003894:	0612      	lsls	r2, r2, #24
    hi2c->Instance->DR = 0x00U;
 8003896:	bf44      	itt	mi
 8003898:	2200      	movmi	r2, #0
 800389a:	611a      	strmi	r2, [r3, #16]
}
 800389c:	e7b7      	b.n	800380e <I2C_MemoryTransmit_TXE_BTF+0x20>

0800389e <HAL_I2C_MemRxCpltCallback>:
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
 800389e:	4770      	bx	lr

080038a0 <HAL_I2C_ErrorCallback>:
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
 80038a0:	4770      	bx	lr

080038a2 <HAL_I2C_AbortCpltCallback>:
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
 80038a2:	4770      	bx	lr

080038a4 <I2C_DMAAbort>:
  __IO uint32_t count = 0U;
 80038a4:	2300      	movs	r3, #0
{
 80038a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80038a8:	f246 11a8 	movw	r1, #25000	@ 0x61a8
  __IO uint32_t count = 0U;
 80038ac:	9301      	str	r3, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80038ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003960 <I2C_DMAAbort+0xbc>)
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80038b0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80038b2:	681b      	ldr	r3, [r3, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038b4:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80038b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80038bc:	2123      	movs	r1, #35	@ 0x23
 80038be:	434b      	muls	r3, r1
 80038c0:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80038c2:	6803      	ldr	r3, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038c4:	b2d2      	uxtb	r2, r2
    if (count == 0U)
 80038c6:	9901      	ldr	r1, [sp, #4]
 80038c8:	bb41      	cbnz	r1, 800391c <I2C_DMAAbort+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038ca:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80038cc:	f041 0120 	orr.w	r1, r1, #32
 80038d0:	6401      	str	r1, [r0, #64]	@ 0x40
  if (hi2c->hdmatx != NULL)
 80038d2:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80038d4:	b10c      	cbz	r4, 80038da <I2C_DMAAbort+0x36>
    hi2c->hdmatx->XferCpltCallback = NULL;
 80038d6:	2100      	movs	r1, #0
 80038d8:	62a1      	str	r1, [r4, #40]	@ 0x28
  if (hi2c->hdmarx != NULL)
 80038da:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80038dc:	b109      	cbz	r1, 80038e2 <I2C_DMAAbort+0x3e>
    hi2c->hdmarx->XferCpltCallback = NULL;
 80038de:	2500      	movs	r5, #0
 80038e0:	628d      	str	r5, [r1, #40]	@ 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e2:	681d      	ldr	r5, [r3, #0]
 80038e4:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80038e8:	601d      	str	r5, [r3, #0]
  hi2c->XferCount = 0U;
 80038ea:	2500      	movs	r5, #0
 80038ec:	8545      	strh	r5, [r0, #42]	@ 0x2a
  if (hi2c->hdmatx != NULL)
 80038ee:	b104      	cbz	r4, 80038f2 <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferAbortCallback = NULL;
 80038f0:	6365      	str	r5, [r4, #52]	@ 0x34
  if (hi2c->hdmarx != NULL)
 80038f2:	b101      	cbz	r1, 80038f6 <I2C_DMAAbort+0x52>
    hi2c->hdmarx->XferAbortCallback = NULL;
 80038f4:	634d      	str	r5, [r1, #52]	@ 0x34
  __HAL_I2C_DISABLE(hi2c);
 80038f6:	6819      	ldr	r1, [r3, #0]
 80038f8:	f021 0101 	bic.w	r1, r1, #1
 80038fc:	6019      	str	r1, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80038fe:	f890 103d 	ldrb.w	r1, [r0, #61]	@ 0x3d
 8003902:	2960      	cmp	r1, #96	@ 0x60
 8003904:	d111      	bne.n	800392a <I2C_DMAAbort+0x86>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003906:	2320      	movs	r3, #32
 8003908:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800390c:	2300      	movs	r3, #0
 800390e:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003912:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003914:	f7ff ffc5 	bl	80038a2 <HAL_I2C_AbortCpltCallback>
}
 8003918:	b003      	add	sp, #12
 800391a:	bd30      	pop	{r4, r5, pc}
    count--;
 800391c:	9901      	ldr	r1, [sp, #4]
 800391e:	3901      	subs	r1, #1
 8003920:	9101      	str	r1, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003922:	6819      	ldr	r1, [r3, #0]
 8003924:	0589      	lsls	r1, r1, #22
 8003926:	d4ce      	bmi.n	80038c6 <I2C_DMAAbort+0x22>
 8003928:	e7d3      	b.n	80038d2 <I2C_DMAAbort+0x2e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800392a:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 800392e:	2a28      	cmp	r2, #40	@ 0x28
 8003930:	d10e      	bne.n	8003950 <I2C_DMAAbort+0xac>
      __HAL_I2C_ENABLE(hi2c);
 8003932:	6819      	ldr	r1, [r3, #0]
 8003934:	f041 0101 	orr.w	r1, r1, #1
 8003938:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800393a:	6819      	ldr	r1, [r3, #0]
 800393c:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 8003940:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003942:	2300      	movs	r3, #0
 8003944:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003946:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 800394a:	f7ff ffa9 	bl	80038a0 <HAL_I2C_ErrorCallback>
}
 800394e:	e7e3      	b.n	8003918 <I2C_DMAAbort+0x74>
      hi2c->State = HAL_I2C_STATE_READY;
 8003950:	2320      	movs	r3, #32
 8003952:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003956:	2300      	movs	r3, #0
 8003958:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
 800395c:	e7f5      	b.n	800394a <I2C_DMAAbort+0xa6>
 800395e:	bf00      	nop
 8003960:	20000014 	.word	0x20000014

08003964 <I2C_ITError>:
{
 8003964:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003966:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800396a:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
{
 800396e:	4604      	mov	r4, r0
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003970:	2b10      	cmp	r3, #16
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003972:	b2d9      	uxtb	r1, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003974:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003976:	6803      	ldr	r3, [r0, #0]
 8003978:	d001      	beq.n	800397e <I2C_ITError+0x1a>
 800397a:	2940      	cmp	r1, #64	@ 0x40
 800397c:	d113      	bne.n	80039a6 <I2C_ITError+0x42>
 800397e:	2a22      	cmp	r2, #34	@ 0x22
 8003980:	d111      	bne.n	80039a6 <I2C_ITError+0x42>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003982:	6819      	ldr	r1, [r3, #0]
 8003984:	f421 6100 	bic.w	r1, r1, #2048	@ 0x800
 8003988:	6019      	str	r1, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800398a:	6859      	ldr	r1, [r3, #4]
 800398c:	f411 6100 	ands.w	r1, r1, #2048	@ 0x800
 8003990:	d106      	bne.n	80039a0 <I2C_ITError+0x3c>
 8003992:	2a60      	cmp	r2, #96	@ 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 8003994:	bf1e      	ittt	ne
 8003996:	2220      	movne	r2, #32
 8003998:	f884 203d 	strbne.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800399c:	f884 103e 	strbne.w	r1, [r4, #62]	@ 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 80039a0:	2200      	movs	r2, #0
 80039a2:	6322      	str	r2, [r4, #48]	@ 0x30
 80039a4:	e007      	b.n	80039b6 <I2C_ITError+0x52>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039a6:	f002 0128 	and.w	r1, r2, #40	@ 0x28
 80039aa:	2928      	cmp	r1, #40	@ 0x28
 80039ac:	d1ed      	bne.n	800398a <I2C_ITError+0x26>
    hi2c->PreviousState = I2C_STATE_NONE;
 80039ae:	2200      	movs	r2, #0
 80039b0:	6322      	str	r2, [r4, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80039b2:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 80039bc:	d04f      	beq.n	8003a5e <I2C_ITError+0xfa>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80039be:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80039c0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80039c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039c6:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80039c8:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	4b37      	ldr	r3, [pc, #220]	@ (8003aac <I2C_ITError+0x148>)
 80039d0:	d02b      	beq.n	8003a2a <I2C_ITError+0xc6>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80039d2:	6343      	str	r3, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80039d4:	f7ff f8ea 	bl	8002bac <HAL_DMA_Abort_IT>
 80039d8:	b150      	cbz	r0, 80039f0 <I2C_ITError+0x8c>
        __HAL_I2C_DISABLE(hi2c);
 80039da:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80039dc:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        __HAL_I2C_DISABLE(hi2c);
 80039de:	6813      	ldr	r3, [r2, #0]
 80039e0:	f023 0301 	bic.w	r3, r3, #1
 80039e4:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80039e6:	2320      	movs	r3, #32
 80039e8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80039ec:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80039ee:	4798      	blx	r3
  CurrentError = hi2c->ErrorCode;
 80039f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80039f2:	0719      	lsls	r1, r3, #28
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039f4:	bf1f      	itttt	ne
 80039f6:	6822      	ldrne	r2, [r4, #0]
 80039f8:	6853      	ldrne	r3, [r2, #4]
 80039fa:	f423 63e0 	bicne.w	r3, r3, #1792	@ 0x700
 80039fe:	6053      	strne	r3, [r2, #4]
  CurrentState = hi2c->State;
 8003a00:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003a04:	6c22      	ldr	r2, [r4, #64]	@ 0x40
  CurrentState = hi2c->State;
 8003a06:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003a08:	0752      	lsls	r2, r2, #29
 8003a0a:	d50d      	bpl.n	8003a28 <I2C_ITError+0xc4>
 8003a0c:	2b28      	cmp	r3, #40	@ 0x28
 8003a0e:	d10b      	bne.n	8003a28 <I2C_ITError+0xc4>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a10:	4b27      	ldr	r3, [pc, #156]	@ (8003ab0 <I2C_ITError+0x14c>)
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a12:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a14:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a16:	2300      	movs	r3, #0
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a18:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a1a:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a1c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a20:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a24:	f7ff fee1 	bl	80037ea <HAL_I2C_ListenCpltCallback>
}
 8003a28:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a2a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003a2c:	6343      	str	r3, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a2e:	f7ff f8bd 	bl	8002bac <HAL_DMA_Abort_IT>
 8003a32:	2800      	cmp	r0, #0
 8003a34:	d0dc      	beq.n	80039f0 <I2C_ITError+0x8c>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	0651      	lsls	r1, r2, #25
 8003a3c:	d505      	bpl.n	8003a4a <I2C_ITError+0xe6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a42:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003a44:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a46:	3301      	adds	r3, #1
 8003a48:	6263      	str	r3, [r4, #36]	@ 0x24
        __HAL_I2C_DISABLE(hi2c);
 8003a4a:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a4c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        __HAL_I2C_DISABLE(hi2c);
 8003a4e:	6813      	ldr	r3, [r2, #0]
 8003a50:	f023 0301 	bic.w	r3, r3, #1
 8003a54:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003a56:	2320      	movs	r3, #32
 8003a58:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a5c:	e7c6      	b.n	80039ec <I2C_ITError+0x88>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a5e:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 8003a62:	2960      	cmp	r1, #96	@ 0x60
 8003a64:	d115      	bne.n	8003a92 <I2C_ITError+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a66:	2120      	movs	r1, #32
 8003a68:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a6c:	6422      	str	r2, [r4, #64]	@ 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a6e:	695a      	ldr	r2, [r3, #20]
 8003a70:	0652      	lsls	r2, r2, #25
 8003a72:	d505      	bpl.n	8003a80 <I2C_ITError+0x11c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a78:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003a7a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	6263      	str	r3, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE(hi2c);
 8003a80:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a82:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8003a84:	6813      	ldr	r3, [r2, #0]
 8003a86:	f023 0301 	bic.w	r3, r3, #1
 8003a8a:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a8c:	f7ff ff09 	bl	80038a2 <HAL_I2C_AbortCpltCallback>
 8003a90:	e7ae      	b.n	80039f0 <I2C_ITError+0x8c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a92:	695a      	ldr	r2, [r3, #20]
 8003a94:	0650      	lsls	r0, r2, #25
 8003a96:	d505      	bpl.n	8003aa4 <I2C_ITError+0x140>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a9c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003a9e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	6263      	str	r3, [r4, #36]	@ 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	f7ff fefb 	bl	80038a0 <HAL_I2C_ErrorCallback>
 8003aaa:	e7a1      	b.n	80039f0 <I2C_ITError+0x8c>
 8003aac:	080038a5 	.word	0x080038a5
 8003ab0:	ffff0000 	.word	0xffff0000

08003ab4 <HAL_I2C_EV_IRQHandler>:
{
 8003ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ab6:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003ab8:	6803      	ldr	r3, [r0, #0]
{
 8003aba:	b08f      	sub	sp, #60	@ 0x3c
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003abc:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003abe:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ac0:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ac4:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003ac8:	2810      	cmp	r0, #16
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003aca:	b2c5      	uxtb	r5, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003acc:	b2c9      	uxtb	r1, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003ace:	d002      	beq.n	8003ad6 <HAL_I2C_EV_IRQHandler+0x22>
 8003ad0:	2d40      	cmp	r5, #64	@ 0x40
 8003ad2:	f040 82e5 	bne.w	80040a0 <HAL_I2C_EV_IRQHandler+0x5ec>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ad6:	699f      	ldr	r7, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ad8:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003ada:	f010 0f01 	tst.w	r0, #1
 8003ade:	d107      	bne.n	8003af0 <HAL_I2C_EV_IRQHandler+0x3c>
 8003ae0:	f5b6 0f2a 	cmp.w	r6, #11141120	@ 0xaa0000
 8003ae4:	d002      	beq.n	8003aec <HAL_I2C_EV_IRQHandler+0x38>
 8003ae6:	f1b6 4f2a 	cmp.w	r6, #2852126720	@ 0xaa000000
 8003aea:	d151      	bne.n	8003b90 <HAL_I2C_EV_IRQHandler+0xdc>
}
 8003aec:	b00f      	add	sp, #60	@ 0x3c
 8003aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003af0:	0596      	lsls	r6, r2, #22
 8003af2:	d54d      	bpl.n	8003b90 <HAL_I2C_EV_IRQHandler+0xdc>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003af4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003af6:	f5b2 0f2a 	cmp.w	r2, #11141120	@ 0xaa0000
 8003afa:	d10c      	bne.n	8003b16 <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003afc:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003afe:	62e2      	str	r2, [r4, #44]	@ 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b00:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 8003b04:	2a40      	cmp	r2, #64	@ 0x40
 8003b06:	d111      	bne.n	8003b2c <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8003b08:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003b0a:	b952      	cbnz	r2, 8003b22 <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b0c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003b0e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b12:	611a      	str	r2, [r3, #16]
 8003b14:	e7ea      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003b16:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003b18:	f1b2 4f2a 	cmp.w	r2, #2852126720	@ 0xaa000000
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003b1e:	2208      	movs	r2, #8
 8003b20:	e7ed      	b.n	8003afe <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b22:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003b24:	f042 0201 	orr.w	r2, r2, #1
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	e7f2      	b.n	8003b12 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b2c:	6922      	ldr	r2, [r4, #16]
 8003b2e:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8003b32:	d11a      	bne.n	8003b6a <HAL_I2C_EV_IRQHandler+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b34:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8003b38:	2a21      	cmp	r2, #33	@ 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b3a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b3c:	d111      	bne.n	8003b62 <HAL_I2C_EV_IRQHandler+0xae>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b3e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003b42:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b44:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003b46:	b10a      	cbz	r2, 8003b4c <HAL_I2C_EV_IRQHandler+0x98>
 8003b48:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003b4a:	b92a      	cbnz	r2, 8003b58 <HAL_I2C_EV_IRQHandler+0xa4>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b4c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003b4e:	2a00      	cmp	r2, #0
 8003b50:	d0cc      	beq.n	8003aec <HAL_I2C_EV_IRQHandler+0x38>
 8003b52:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003b54:	2a00      	cmp	r2, #0
 8003b56:	d0c9      	beq.n	8003aec <HAL_I2C_EV_IRQHandler+0x38>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b5e:	605a      	str	r2, [r3, #4]
 8003b60:	e7c4      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	e7eb      	b.n	8003b42 <HAL_I2C_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 8003b6a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003b6c:	b932      	cbnz	r2, 8003b7c <HAL_I2C_EV_IRQHandler+0xc8>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003b6e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003b70:	11d2      	asrs	r2, r2, #7
 8003b72:	f002 0206 	and.w	r2, r2, #6
 8003b76:	f042 02f0 	orr.w	r2, r2, #240	@ 0xf0
 8003b7a:	e7ca      	b.n	8003b12 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8003b7c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003b7e:	2a01      	cmp	r2, #1
 8003b80:	d1b4      	bne.n	8003aec <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003b82:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003b84:	11d2      	asrs	r2, r2, #7
 8003b86:	f002 0206 	and.w	r2, r2, #6
 8003b8a:	f042 02f1 	orr.w	r2, r2, #241	@ 0xf1
 8003b8e:	e7c0      	b.n	8003b12 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b90:	0706      	lsls	r6, r0, #28
 8003b92:	d503      	bpl.n	8003b9c <HAL_I2C_EV_IRQHandler+0xe8>
 8003b94:	0596      	lsls	r6, r2, #22
 8003b96:	d501      	bpl.n	8003b9c <HAL_I2C_EV_IRQHandler+0xe8>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003b98:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003b9a:	e7e4      	b.n	8003b66 <HAL_I2C_EV_IRQHandler+0xb2>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b9c:	0786      	lsls	r6, r0, #30
 8003b9e:	f140 80f0 	bpl.w	8003d82 <HAL_I2C_EV_IRQHandler+0x2ce>
 8003ba2:	0596      	lsls	r6, r2, #22
 8003ba4:	f140 80ed 	bpl.w	8003d82 <HAL_I2C_EV_IRQHandler+0x2ce>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003ba8:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003bac:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003bae:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bb0:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003bb4:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bb6:	2822      	cmp	r0, #34	@ 0x22
 8003bb8:	f040 80db 	bne.w	8003d72 <HAL_I2C_EV_IRQHandler+0x2be>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003bbc:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003bbe:	b940      	cbnz	r0, 8003bd2 <HAL_I2C_EV_IRQHandler+0x11e>
 8003bc0:	2940      	cmp	r1, #64	@ 0x40
 8003bc2:	d106      	bne.n	8003bd2 <HAL_I2C_EV_IRQHandler+0x11e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc4:	9000      	str	r0, [sp, #0]
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	9200      	str	r2, [sp, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	9b00      	ldr	r3, [sp, #0]
 8003bd0:	e78c      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003bd2:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8003bd4:	b989      	cbnz	r1, 8003bfa <HAL_I2C_EV_IRQHandler+0x146>
 8003bd6:	6920      	ldr	r0, [r4, #16]
 8003bd8:	f5b0 4f40 	cmp.w	r0, #49152	@ 0xc000
 8003bdc:	d10d      	bne.n	8003bfa <HAL_I2C_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bde:	9101      	str	r1, [sp, #4]
 8003be0:	695a      	ldr	r2, [r3, #20]
 8003be2:	9201      	str	r2, [sp, #4]
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	9201      	str	r2, [sp, #4]
 8003be8:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bf0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003bf2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8003bf4:	3301      	adds	r3, #1
      hi2c->EventCount = 0U;
 8003bf6:	6523      	str	r3, [r4, #80]	@ 0x50
 8003bf8:	e778      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->XferCount == 0U)
 8003bfa:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8003bfc:	b289      	uxth	r1, r1
 8003bfe:	b951      	cbnz	r1, 8003c16 <HAL_I2C_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c00:	9102      	str	r1, [sp, #8]
 8003c02:	695a      	ldr	r2, [r3, #20]
 8003c04:	9202      	str	r2, [sp, #8]
 8003c06:	699a      	ldr	r2, [r3, #24]
 8003c08:	9202      	str	r2, [sp, #8]
 8003c0a:	9a02      	ldr	r2, [sp, #8]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	e019      	b.n	8003c4a <HAL_I2C_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 8003c16:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8003c18:	b289      	uxth	r1, r1
 8003c1a:	2901      	cmp	r1, #1
 8003c1c:	d149      	bne.n	8003cb2 <HAL_I2C_EV_IRQHandler+0x1fe>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003c1e:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8003c22:	d11b      	bne.n	8003c5c <HAL_I2C_EV_IRQHandler+0x1a8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c2a:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 8003c32:	d00c      	beq.n	8003c4e <HAL_I2C_EV_IRQHandler+0x19a>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c3a:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	9203      	str	r2, [sp, #12]
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	9203      	str	r2, [sp, #12]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	9303      	str	r3, [sp, #12]
 8003c48:	9b03      	ldr	r3, [sp, #12]
      hi2c->EventCount = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	e7d3      	b.n	8003bf6 <HAL_I2C_EV_IRQHandler+0x142>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c4e:	9204      	str	r2, [sp, #16]
 8003c50:	695a      	ldr	r2, [r3, #20]
 8003c52:	9204      	str	r2, [sp, #16]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	9204      	str	r2, [sp, #16]
 8003c58:	9a04      	ldr	r2, [sp, #16]
 8003c5a:	e7d7      	b.n	8003c0c <HAL_I2C_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003c5c:	2a08      	cmp	r2, #8
 8003c5e:	d01c      	beq.n	8003c9a <HAL_I2C_EV_IRQHandler+0x1e6>
 8003c60:	2a20      	cmp	r2, #32
 8003c62:	d01a      	beq.n	8003c9a <HAL_I2C_EV_IRQHandler+0x1e6>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003c64:	2d12      	cmp	r5, #18
 8003c66:	d10d      	bne.n	8003c84 <HAL_I2C_EV_IRQHandler+0x1d0>
 8003c68:	2a01      	cmp	r2, #1
 8003c6a:	d116      	bne.n	8003c9a <HAL_I2C_EV_IRQHandler+0x1e6>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c72:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c74:	2200      	movs	r2, #0
 8003c76:	9205      	str	r2, [sp, #20]
 8003c78:	695a      	ldr	r2, [r3, #20]
 8003c7a:	9205      	str	r2, [sp, #20]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	9305      	str	r3, [sp, #20]
 8003c80:	9b05      	ldr	r3, [sp, #20]
 8003c82:	e7e2      	b.n	8003c4a <HAL_I2C_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c84:	2a10      	cmp	r2, #16
 8003c86:	d8f1      	bhi.n	8003c6c <HAL_I2C_EV_IRQHandler+0x1b8>
 8003c88:	4986      	ldr	r1, [pc, #536]	@ (8003ea4 <HAL_I2C_EV_IRQHandler+0x3f0>)
 8003c8a:	fa41 f202 	asr.w	r2, r1, r2
 8003c8e:	07d7      	lsls	r7, r2, #31
 8003c90:	d4ec      	bmi.n	8003c6c <HAL_I2C_EV_IRQHandler+0x1b8>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c98:	e7eb      	b.n	8003c72 <HAL_I2C_EV_IRQHandler+0x1be>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ca0:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	9206      	str	r2, [sp, #24]
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	9206      	str	r2, [sp, #24]
 8003caa:	699a      	ldr	r2, [r3, #24]
 8003cac:	9206      	str	r2, [sp, #24]
 8003cae:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb0:	e7ac      	b.n	8003c0c <HAL_I2C_EV_IRQHandler+0x158>
      else if (hi2c->XferCount == 2U)
 8003cb2:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8003cb4:	b289      	uxth	r1, r1
 8003cb6:	2902      	cmp	r1, #2
 8003cb8:	d138      	bne.n	8003d2c <HAL_I2C_EV_IRQHandler+0x278>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003cba:	2a10      	cmp	r2, #16
 8003cbc:	d803      	bhi.n	8003cc6 <HAL_I2C_EV_IRQHandler+0x212>
 8003cbe:	497a      	ldr	r1, [pc, #488]	@ (8003ea8 <HAL_I2C_EV_IRQHandler+0x3f4>)
 8003cc0:	40d1      	lsrs	r1, r2
 8003cc2:	07ce      	lsls	r6, r1, #31
 8003cc4:	d418      	bmi.n	8003cf8 <HAL_I2C_EV_IRQHandler+0x244>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cc6:	6819      	ldr	r1, [r3, #0]
 8003cc8:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 8003ccc:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cce:	2100      	movs	r1, #0
 8003cd0:	9107      	str	r1, [sp, #28]
 8003cd2:	6959      	ldr	r1, [r3, #20]
 8003cd4:	9107      	str	r1, [sp, #28]
 8003cd6:	6999      	ldr	r1, [r3, #24]
 8003cd8:	9107      	str	r1, [sp, #28]
 8003cda:	9907      	ldr	r1, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cdc:	6819      	ldr	r1, [r3, #0]
 8003cde:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8003ce2:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ce4:	6859      	ldr	r1, [r3, #4]
 8003ce6:	050d      	lsls	r5, r1, #20
 8003ce8:	d5af      	bpl.n	8003c4a <HAL_I2C_EV_IRQHandler+0x196>
 8003cea:	2a20      	cmp	r2, #32
 8003cec:	d81b      	bhi.n	8003d26 <HAL_I2C_EV_IRQHandler+0x272>
 8003cee:	2a07      	cmp	r2, #7
 8003cf0:	d80e      	bhi.n	8003d10 <HAL_I2C_EV_IRQHandler+0x25c>
 8003cf2:	2a01      	cmp	r2, #1
 8003cf4:	d1a9      	bne.n	8003c4a <HAL_I2C_EV_IRQHandler+0x196>
 8003cf6:	e011      	b.n	8003d1c <HAL_I2C_EV_IRQHandler+0x268>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf8:	6819      	ldr	r1, [r3, #0]
 8003cfa:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 8003cfe:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d00:	2100      	movs	r1, #0
 8003d02:	9108      	str	r1, [sp, #32]
 8003d04:	6959      	ldr	r1, [r3, #20]
 8003d06:	9108      	str	r1, [sp, #32]
 8003d08:	6999      	ldr	r1, [r3, #24]
 8003d0a:	9108      	str	r1, [sp, #32]
 8003d0c:	9908      	ldr	r1, [sp, #32]
 8003d0e:	e7e9      	b.n	8003ce4 <HAL_I2C_EV_IRQHandler+0x230>
 8003d10:	f1a2 0108 	sub.w	r1, r2, #8
 8003d14:	4a65      	ldr	r2, [pc, #404]	@ (8003eac <HAL_I2C_EV_IRQHandler+0x3f8>)
 8003d16:	40ca      	lsrs	r2, r1
 8003d18:	07d0      	lsls	r0, r2, #31
 8003d1a:	d596      	bpl.n	8003c4a <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d22:	605a      	str	r2, [r3, #4]
 8003d24:	e791      	b.n	8003c4a <HAL_I2C_EV_IRQHandler+0x196>
 8003d26:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8003d2a:	e7e3      	b.n	8003cf4 <HAL_I2C_EV_IRQHandler+0x240>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2c:	6819      	ldr	r1, [r3, #0]
 8003d2e:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 8003d32:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d34:	6859      	ldr	r1, [r3, #4]
 8003d36:	0509      	lsls	r1, r1, #20
 8003d38:	d505      	bpl.n	8003d46 <HAL_I2C_EV_IRQHandler+0x292>
 8003d3a:	2a20      	cmp	r2, #32
 8003d3c:	d816      	bhi.n	8003d6c <HAL_I2C_EV_IRQHandler+0x2b8>
 8003d3e:	2a07      	cmp	r2, #7
 8003d40:	d809      	bhi.n	8003d56 <HAL_I2C_EV_IRQHandler+0x2a2>
 8003d42:	2a01      	cmp	r2, #1
 8003d44:	d00d      	beq.n	8003d62 <HAL_I2C_EV_IRQHandler+0x2ae>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d46:	2200      	movs	r2, #0
 8003d48:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d54:	e779      	b.n	8003c4a <HAL_I2C_EV_IRQHandler+0x196>
 8003d56:	f1a2 0108 	sub.w	r1, r2, #8
 8003d5a:	4a54      	ldr	r2, [pc, #336]	@ (8003eac <HAL_I2C_EV_IRQHandler+0x3f8>)
 8003d5c:	40ca      	lsrs	r2, r1
 8003d5e:	07d2      	lsls	r2, r2, #31
 8003d60:	d5f1      	bpl.n	8003d46 <HAL_I2C_EV_IRQHandler+0x292>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d68:	605a      	str	r2, [r3, #4]
 8003d6a:	e7ec      	b.n	8003d46 <HAL_I2C_EV_IRQHandler+0x292>
 8003d6c:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8003d70:	e7e8      	b.n	8003d44 <HAL_I2C_EV_IRQHandler+0x290>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d72:	2200      	movs	r2, #0
 8003d74:	920a      	str	r2, [sp, #40]	@ 0x28
 8003d76:	695a      	ldr	r2, [r3, #20]
 8003d78:	920a      	str	r2, [sp, #40]	@ 0x28
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003d80:	e6b4      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003d82:	077f      	lsls	r7, r7, #29
 8003d84:	f140 8094 	bpl.w	8003eb0 <HAL_I2C_EV_IRQHandler+0x3fc>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d88:	685e      	ldr	r6, [r3, #4]
 8003d8a:	0536      	lsls	r6, r6, #20
 8003d8c:	f53f aeae 	bmi.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d90:	0607      	lsls	r7, r0, #24
 8003d92:	f000 0604 	and.w	r6, r0, #4
 8003d96:	d53e      	bpl.n	8003e16 <HAL_I2C_EV_IRQHandler+0x362>
 8003d98:	0550      	lsls	r0, r2, #21
 8003d9a:	d53c      	bpl.n	8003e16 <HAL_I2C_EV_IRQHandler+0x362>
 8003d9c:	2e00      	cmp	r6, #0
 8003d9e:	d13d      	bne.n	8003e1c <HAL_I2C_EV_IRQHandler+0x368>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003da0:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003da4:	8d25      	ldrh	r5, [r4, #40]	@ 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003da6:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003daa:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003dac:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003dae:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003db0:	b9c5      	cbnz	r5, 8003de4 <HAL_I2C_EV_IRQHandler+0x330>
 8003db2:	2a21      	cmp	r2, #33	@ 0x21
 8003db4:	d118      	bne.n	8003de8 <HAL_I2C_EV_IRQHandler+0x334>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003db6:	2808      	cmp	r0, #8
 8003db8:	d058      	beq.n	8003e6c <HAL_I2C_EV_IRQHandler+0x3b8>
 8003dba:	2820      	cmp	r0, #32
 8003dbc:	d056      	beq.n	8003e6c <HAL_I2C_EV_IRQHandler+0x3b8>
 8003dbe:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 8003dc2:	d053      	beq.n	8003e6c <HAL_I2C_EV_IRQHandler+0x3b8>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003dca:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003dcc:	2311      	movs	r3, #17
 8003dce:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003dd6:	2320      	movs	r3, #32
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dd8:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8003dda:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dde:	f7ff fcff 	bl	80037e0 <HAL_I2C_MasterTxCpltCallback>
 8003de2:	e683      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003de4:	2a21      	cmp	r2, #33	@ 0x21
 8003de6:	d005      	beq.n	8003df4 <HAL_I2C_EV_IRQHandler+0x340>
 8003de8:	2940      	cmp	r1, #64	@ 0x40
 8003dea:	f47f ae7f 	bne.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003dee:	2a22      	cmp	r2, #34	@ 0x22
 8003df0:	f47f ae7c 	bne.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 8003df4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003df6:	b292      	uxth	r2, r2
 8003df8:	b91a      	cbnz	r2, 8003e02 <HAL_I2C_EV_IRQHandler+0x34e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e00:	e6ad      	b.n	8003b5e <HAL_I2C_EV_IRQHandler+0xaa>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e02:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 8003e06:	2a40      	cmp	r2, #64	@ 0x40
 8003e08:	d116      	bne.n	8003e38 <HAL_I2C_EV_IRQHandler+0x384>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e0a:	4620      	mov	r0, r4
}
 8003e0c:	b00f      	add	sp, #60	@ 0x3c
 8003e0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e12:	f7ff bcec 	b.w	80037ee <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e16:	2e00      	cmp	r6, #0
 8003e18:	f43f ae68 	beq.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
 8003e1c:	0597      	lsls	r7, r2, #22
 8003e1e:	f57f ae65 	bpl.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003e22:	2921      	cmp	r1, #33	@ 0x21
 8003e24:	d139      	bne.n	8003e9a <HAL_I2C_EV_IRQHandler+0x3e6>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e26:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e28:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8003e2c:	2a21      	cmp	r2, #33	@ 0x21
 8003e2e:	f47f ae5d 	bne.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 8003e32:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003e34:	b292      	uxth	r2, r2
 8003e36:	b14a      	cbz	r2, 8003e4c <HAL_I2C_EV_IRQHandler+0x398>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e38:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003e3a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003e3e:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8003e40:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8003e42:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	8563      	strh	r3, [r4, #42]	@ 0x2a
      }
 8003e4a:	e64f      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x38>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e4c:	2908      	cmp	r1, #8
 8003e4e:	d00d      	beq.n	8003e6c <HAL_I2C_EV_IRQHandler+0x3b8>
 8003e50:	2920      	cmp	r1, #32
 8003e52:	d00b      	beq.n	8003e6c <HAL_I2C_EV_IRQHandler+0x3b8>
 8003e54:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 8003e58:	d008      	beq.n	8003e6c <HAL_I2C_EV_IRQHandler+0x3b8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e5a:	6859      	ldr	r1, [r3, #4]
 8003e5c:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8003e60:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e62:	2311      	movs	r3, #17
 8003e64:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e66:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 8003e6a:	e7b4      	b.n	8003dd6 <HAL_I2C_EV_IRQHandler+0x322>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e6c:	685a      	ldr	r2, [r3, #4]
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003e6e:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e70:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e74:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e7c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e7e:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003e80:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e82:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e84:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e88:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e90:	2a40      	cmp	r2, #64	@ 0x40
 8003e92:	d1a4      	bne.n	8003dde <HAL_I2C_EV_IRQHandler+0x32a>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003e94:	f7ff fcaa 	bl	80037ec <HAL_I2C_MemTxCpltCallback>
 8003e98:	e628      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x38>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003e9a:	2d40      	cmp	r5, #64	@ 0x40
 8003e9c:	f47f ae26 	bne.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
 8003ea0:	e7b3      	b.n	8003e0a <HAL_I2C_EV_IRQHandler+0x356>
 8003ea2:	bf00      	nop
 8003ea4:	fffeffeb 	.word	0xfffeffeb
 8003ea8:	00010014 	.word	0x00010014
 8003eac:	01000101 	.word	0x01000101
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003eb0:	6859      	ldr	r1, [r3, #4]
 8003eb2:	050e      	lsls	r6, r1, #20
 8003eb4:	f53f ae1a 	bmi.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003eb8:	0645      	lsls	r5, r0, #25
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003eba:	f000 0104 	and.w	r1, r0, #4
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ebe:	f140 8086 	bpl.w	8003fce <HAL_I2C_EV_IRQHandler+0x51a>
 8003ec2:	0550      	lsls	r0, r2, #21
 8003ec4:	f140 8083 	bpl.w	8003fce <HAL_I2C_EV_IRQHandler+0x51a>
 8003ec8:	2900      	cmp	r1, #0
 8003eca:	f040 8083 	bne.w	8003fd4 <HAL_I2C_EV_IRQHandler+0x520>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ece:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8003ed2:	2a22      	cmp	r2, #34	@ 0x22
 8003ed4:	f47f ae0a 	bne.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
    CurrentXferOptions = hi2c->XferOptions;
 8003ed8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    tmp = hi2c->XferCount;
 8003eda:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003edc:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8003ede:	2a03      	cmp	r2, #3
 8003ee0:	d914      	bls.n	8003f0c <HAL_I2C_EV_IRQHandler+0x458>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003ee6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003ee8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003eea:	3301      	adds	r3, #1
 8003eec:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003eee:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8003ef6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	f47f adf6 	bne.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f00:	6822      	ldr	r2, [r4, #0]
 8003f02:	6853      	ldr	r3, [r2, #4]
 8003f04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f08:	6053      	str	r3, [r2, #4]
 8003f0a:	e5ef      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003f0c:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8003f0e:	2d02      	cmp	r5, #2
 8003f10:	f43f af73 	beq.w	8003dfa <HAL_I2C_EV_IRQHandler+0x346>
 8003f14:	2a01      	cmp	r2, #1
 8003f16:	f63f af70 	bhi.w	8003dfa <HAL_I2C_EV_IRQHandler+0x346>
  __IO uint32_t count = 0U;
 8003f1a:	910b      	str	r1, [sp, #44]	@ 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f1c:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8003f20:	4a78      	ldr	r2, [pc, #480]	@ (8004104 <HAL_I2C_EV_IRQHandler+0x650>)
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	fbb2 f2f1 	udiv	r2, r2, r1
 8003f28:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003f2c:	920b      	str	r2, [sp, #44]	@ 0x2c
    count--;
 8003f2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003f30:	3a01      	subs	r2, #1
 8003f32:	920b      	str	r2, [sp, #44]	@ 0x2c
    if (count == 0U)
 8003f34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003f36:	b9d1      	cbnz	r1, 8003f6e <HAL_I2C_EV_IRQHandler+0x4ba>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f38:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        HAL_I2C_ErrorCallback(hi2c);
 8003f3a:	4620      	mov	r0, r4
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f3c:	f042 0220 	orr.w	r2, r2, #32
 8003f40:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f48:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003f4e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003f50:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003f52:	3301      	adds	r3, #1
 8003f54:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8003f56:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f5e:	2320      	movs	r3, #32
 8003f60:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f64:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003f68:	f7ff fc9a 	bl	80038a0 <HAL_I2C_ErrorCallback>
 8003f6c:	e5be      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x38>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	f412 7200 	ands.w	r2, r2, #512	@ 0x200
 8003f74:	d1db      	bne.n	8003f2e <HAL_I2C_EV_IRQHandler+0x47a>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f76:	6819      	ldr	r1, [r3, #0]
 8003f78:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8003f7c:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f7e:	6859      	ldr	r1, [r3, #4]
 8003f80:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8003f84:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f86:	6919      	ldr	r1, [r3, #16]
 8003f88:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003f8a:	7019      	strb	r1, [r3, #0]
        hi2c->pBuffPtr++;
 8003f8c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003f8e:	3301      	adds	r3, #1
 8003f90:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8003f92:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	2320      	movs	r3, #32
 8003f9c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fa0:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa4:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fa8:	2b40      	cmp	r3, #64	@ 0x40
 8003faa:	d104      	bne.n	8003fb6 <HAL_I2C_EV_IRQHandler+0x502>
          hi2c->PreviousState = I2C_STATE_NONE;
 8003fac:	6322      	str	r2, [r4, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003fae:	4620      	mov	r0, r4
 8003fb0:	f7ff fc75 	bl	800389e <HAL_I2C_MemRxCpltCallback>
 8003fb4:	e59a      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x38>
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003fb6:	2808      	cmp	r0, #8
 8003fb8:	d001      	beq.n	8003fbe <HAL_I2C_EV_IRQHandler+0x50a>
 8003fba:	2820      	cmp	r0, #32
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003fbc:	d101      	bne.n	8003fc2 <HAL_I2C_EV_IRQHandler+0x50e>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e000      	b.n	8003fc4 <HAL_I2C_EV_IRQHandler+0x510>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003fc2:	2312      	movs	r3, #18
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003fc4:	4620      	mov	r0, r4
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003fc6:	6323      	str	r3, [r4, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003fc8:	f7ff fc0b 	bl	80037e2 <HAL_I2C_MasterRxCpltCallback>
 8003fcc:	e58e      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fce:	2900      	cmp	r1, #0
 8003fd0:	f43f ad8c 	beq.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
 8003fd4:	0592      	lsls	r2, r2, #22
 8003fd6:	f57f ad89 	bpl.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fda:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  if (hi2c->XferCount == 4U)
 8003fdc:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fde:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  if (hi2c->XferCount == 4U)
 8003fe0:	b280      	uxth	r0, r0
 8003fe2:	2804      	cmp	r0, #4
 8003fe4:	d109      	bne.n	8003ffa <HAL_I2C_EV_IRQHandler+0x546>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fec:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8003ff2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ff8:	e723      	b.n	8003e42 <HAL_I2C_EV_IRQHandler+0x38e>
  else if (hi2c->XferCount == 3U)
 8003ffa:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8003ffc:	b280      	uxth	r0, r0
 8003ffe:	2803      	cmp	r0, #3
 8004000:	d10c      	bne.n	800401c <HAL_I2C_EV_IRQHandler+0x568>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004002:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004004:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004006:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
 800400a:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800400c:	d0ef      	beq.n	8003fee <HAL_I2C_EV_IRQHandler+0x53a>
 800400e:	2a02      	cmp	r2, #2
 8004010:	d0ed      	beq.n	8003fee <HAL_I2C_EV_IRQHandler+0x53a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004018:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800401a:	e7e8      	b.n	8003fee <HAL_I2C_EV_IRQHandler+0x53a>
  else if (hi2c->XferCount == 2U)
 800401c:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 800401e:	b280      	uxth	r0, r0
 8004020:	2802      	cmp	r0, #2
 8004022:	d1e4      	bne.n	8003fee <HAL_I2C_EV_IRQHandler+0x53a>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004024:	2a04      	cmp	r2, #4
 8004026:	d033      	beq.n	8004090 <HAL_I2C_EV_IRQHandler+0x5dc>
 8004028:	d807      	bhi.n	800403a <HAL_I2C_EV_IRQHandler+0x586>
 800402a:	2a01      	cmp	r2, #1
 800402c:	d007      	beq.n	800403e <HAL_I2C_EV_IRQHandler+0x58a>
 800402e:	2a02      	cmp	r2, #2
 8004030:	d02e      	beq.n	8004090 <HAL_I2C_EV_IRQHandler+0x5dc>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004032:	6818      	ldr	r0, [r3, #0]
 8004034:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 8004038:	e004      	b.n	8004044 <HAL_I2C_EV_IRQHandler+0x590>
 800403a:	2a10      	cmp	r2, #16
 800403c:	d1f9      	bne.n	8004032 <HAL_I2C_EV_IRQHandler+0x57e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004044:	6018      	str	r0, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 800404a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800404c:	1c4b      	adds	r3, r1, #1
 800404e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8004050:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004052:	3b01      	subs	r3, #1
 8004054:	b29b      	uxth	r3, r3
 8004056:	8563      	strh	r3, [r4, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	704b      	strb	r3, [r1, #1]
    hi2c->pBuffPtr++;
 800405e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004060:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 8004062:	3301      	adds	r3, #1
 8004064:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8004066:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004068:	3b01      	subs	r3, #1
 800406a:	b29b      	uxth	r3, r3
 800406c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800406e:	684b      	ldr	r3, [r1, #4]
 8004070:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004074:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004076:	2320      	movs	r3, #32
 8004078:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800407c:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8004080:	2b40      	cmp	r3, #64	@ 0x40
 8004082:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004086:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800408a:	d105      	bne.n	8004098 <HAL_I2C_EV_IRQHandler+0x5e4>
      hi2c->PreviousState = I2C_STATE_NONE;
 800408c:	6323      	str	r3, [r4, #48]	@ 0x30
 800408e:	e78e      	b.n	8003fae <HAL_I2C_EV_IRQHandler+0x4fa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
 8004096:	e7d5      	b.n	8004044 <HAL_I2C_EV_IRQHandler+0x590>
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004098:	2a08      	cmp	r2, #8
 800409a:	d090      	beq.n	8003fbe <HAL_I2C_EV_IRQHandler+0x50a>
 800409c:	2a20      	cmp	r2, #32
 800409e:	e78d      	b.n	8003fbc <HAL_I2C_EV_IRQHandler+0x508>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040a0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80040a2:	b310      	cbz	r0, 80040ea <HAL_I2C_EV_IRQHandler+0x636>
  uint32_t sr2itflags               = 0U;
 80040a4:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80040a6:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040a8:	0787      	lsls	r7, r0, #30
 80040aa:	d52d      	bpl.n	8004108 <HAL_I2C_EV_IRQHandler+0x654>
 80040ac:	0596      	lsls	r6, r2, #22
 80040ae:	d52b      	bpl.n	8004108 <HAL_I2C_EV_IRQHandler+0x654>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040b0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80040b2:	b102      	cbz	r2, 80040b6 <HAL_I2C_EV_IRQHandler+0x602>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80040b4:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040b6:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80040ba:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 80040be:	2a28      	cmp	r2, #40	@ 0x28
 80040c0:	d116      	bne.n	80040f0 <HAL_I2C_EV_IRQHandler+0x63c>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80040c2:	685a      	ldr	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80040c4:	062f      	lsls	r7, r5, #24
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80040c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ca:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hi2c);
 80040cc:	f04f 0300 	mov.w	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80040d0:	f085 0104 	eor.w	r1, r5, #4
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80040d4:	4620      	mov	r0, r4
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80040d6:	bf54      	ite	pl
 80040d8:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80040da:	8b22      	ldrhmi	r2, [r4, #24]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80040dc:	f3c1 0180 	ubfx	r1, r1, #2, #1
    __HAL_UNLOCK(hi2c);
 80040e0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80040e4:	f7ff fb80 	bl	80037e8 <HAL_I2C_AddrCallback>
 80040e8:	e500      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80040ea:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80040ec:	6958      	ldr	r0, [r3, #20]
 80040ee:	e7db      	b.n	80040a8 <HAL_I2C_EV_IRQHandler+0x5f4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f0:	2200      	movs	r2, #0
 80040f2:	920c      	str	r2, [sp, #48]	@ 0x30
 80040f4:	6959      	ldr	r1, [r3, #20]
 80040f6:	910c      	str	r1, [sp, #48]	@ 0x30
 80040f8:	699b      	ldr	r3, [r3, #24]
    __HAL_UNLOCK(hi2c);
 80040fa:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fe:	930c      	str	r3, [sp, #48]	@ 0x30
 8004100:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004102:	e4f3      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x38>
 8004104:	20000014 	.word	0x20000014
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004108:	06c6      	lsls	r6, r0, #27
 800410a:	f140 80b1 	bpl.w	8004270 <HAL_I2C_EV_IRQHandler+0x7bc>
 800410e:	0595      	lsls	r5, r2, #22
 8004110:	f140 80ae 	bpl.w	8004270 <HAL_I2C_EV_IRQHandler+0x7bc>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004114:	f894 503d 	ldrb.w	r5, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004118:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800411a:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800411c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004120:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004122:	2200      	movs	r2, #0
 8004124:	920d      	str	r2, [sp, #52]	@ 0x34
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	920d      	str	r2, [sp, #52]	@ 0x34
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	f042 0201 	orr.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800413a:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	0510      	lsls	r0, r2, #20
 8004140:	d520      	bpl.n	8004184 <HAL_I2C_EV_IRQHandler+0x6d0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004142:	f005 02f7 	and.w	r2, r5, #247	@ 0xf7
 8004146:	2a22      	cmp	r2, #34	@ 0x22
 8004148:	d14a      	bne.n	80041e0 <HAL_I2C_EV_IRQHandler+0x72c>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800414a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800414c:	6802      	ldr	r2, [r0, #0]
 800414e:	6852      	ldr	r2, [r2, #4]
 8004150:	b292      	uxth	r2, r2
 8004152:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 8004154:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004156:	b292      	uxth	r2, r2
 8004158:	b11a      	cbz	r2, 8004162 <HAL_I2C_EV_IRQHandler+0x6ae>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800415a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800415c:	f042 0204 	orr.w	r2, r2, #4
 8004160:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004168:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800416a:	f7fe fdf9 	bl	8002d60 <HAL_DMA_GetState>
 800416e:	2801      	cmp	r0, #1
 8004170:	d008      	beq.n	8004184 <HAL_I2C_EV_IRQHandler+0x6d0>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004172:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004174:	4b79      	ldr	r3, [pc, #484]	@ (800435c <HAL_I2C_EV_IRQHandler+0x8a8>)
 8004176:	6343      	str	r3, [r0, #52]	@ 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004178:	f7fe fd18 	bl	8002bac <HAL_DMA_Abort_IT>
 800417c:	b110      	cbz	r0, 8004184 <HAL_I2C_EV_IRQHandler+0x6d0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800417e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004180:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8004182:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8004184:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004186:	b29b      	uxth	r3, r3
 8004188:	b313      	cbz	r3, 80041d0 <HAL_I2C_EV_IRQHandler+0x71c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800418a:	6823      	ldr	r3, [r4, #0]
 800418c:	695a      	ldr	r2, [r3, #20]
 800418e:	0751      	lsls	r1, r2, #29
 8004190:	d509      	bpl.n	80041a6 <HAL_I2C_EV_IRQHandler+0x6f2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004196:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004198:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800419a:	3301      	adds	r3, #1
 800419c:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800419e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041a6:	6823      	ldr	r3, [r4, #0]
 80041a8:	695a      	ldr	r2, [r3, #20]
 80041aa:	0652      	lsls	r2, r2, #25
 80041ac:	d509      	bpl.n	80041c2 <HAL_I2C_EV_IRQHandler+0x70e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80041b2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80041b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80041b6:	3301      	adds	r3, #1
 80041b8:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80041ba:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29b      	uxth	r3, r3
 80041c0:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80041c2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	b11b      	cbz	r3, 80041d0 <HAL_I2C_EV_IRQHandler+0x71c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80041ca:	f043 0304 	orr.w	r3, r3, #4
 80041ce:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80041d2:	b313      	cbz	r3, 800421a <HAL_I2C_EV_IRQHandler+0x766>
    I2C_ITError(hi2c);
 80041d4:	4620      	mov	r0, r4
}
 80041d6:	b00f      	add	sp, #60	@ 0x3c
 80041d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 80041dc:	f7ff bbc2 	b.w	8003964 <I2C_ITError>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80041e0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80041e2:	6802      	ldr	r2, [r0, #0]
 80041e4:	6852      	ldr	r2, [r2, #4]
 80041e6:	b292      	uxth	r2, r2
 80041e8:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 80041ea:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80041ec:	b292      	uxth	r2, r2
 80041ee:	b11a      	cbz	r2, 80041f8 <HAL_I2C_EV_IRQHandler+0x744>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041f0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80041f2:	f042 0204 	orr.w	r2, r2, #4
 80041f6:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041fe:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004200:	f7fe fdae 	bl	8002d60 <HAL_DMA_GetState>
 8004204:	2801      	cmp	r0, #1
 8004206:	d0bd      	beq.n	8004184 <HAL_I2C_EV_IRQHandler+0x6d0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004208:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800420a:	4b54      	ldr	r3, [pc, #336]	@ (800435c <HAL_I2C_EV_IRQHandler+0x8a8>)
 800420c:	6343      	str	r3, [r0, #52]	@ 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800420e:	f7fe fccd 	bl	8002bac <HAL_DMA_Abort_IT>
 8004212:	2800      	cmp	r0, #0
 8004214:	d0b6      	beq.n	8004184 <HAL_I2C_EV_IRQHandler+0x6d0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004216:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8004218:	e7b2      	b.n	8004180 <HAL_I2C_EV_IRQHandler+0x6cc>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800421a:	2d2a      	cmp	r5, #42	@ 0x2a
 800421c:	d106      	bne.n	800422c <HAL_I2C_EV_IRQHandler+0x778>
      hi2c->PreviousState = I2C_STATE_NONE;
 800421e:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004220:	2328      	movs	r3, #40	@ 0x28
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004222:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004224:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004228:	f7ff fadd 	bl	80037e6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800422c:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8004230:	2b28      	cmp	r3, #40	@ 0x28
 8004232:	d10c      	bne.n	800424e <HAL_I2C_EV_IRQHandler+0x79a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004234:	4b4a      	ldr	r3, [pc, #296]	@ (8004360 <HAL_I2C_EV_IRQHandler+0x8ac>)
      hi2c->State = HAL_I2C_STATE_READY;
 8004236:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004238:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800423a:	2300      	movs	r3, #0
      HAL_I2C_ListenCpltCallback(hi2c);
 800423c:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 800423e:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004240:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004244:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004248:	f7ff facf 	bl	80037ea <HAL_I2C_ListenCpltCallback>
 800424c:	e44e      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800424e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004250:	2b22      	cmp	r3, #34	@ 0x22
 8004252:	d002      	beq.n	800425a <HAL_I2C_EV_IRQHandler+0x7a6>
 8004254:	2d22      	cmp	r5, #34	@ 0x22
 8004256:	f47f ac49 	bne.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 800425a:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800425c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800425e:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004260:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004264:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004268:	4620      	mov	r0, r4
 800426a:	f7ff fabc 	bl	80037e6 <HAL_I2C_SlaveRxCpltCallback>
 800426e:	e43d      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004270:	f001 01f7 	and.w	r1, r1, #247	@ 0xf7
 8004274:	2921      	cmp	r1, #33	@ 0x21
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004276:	f000 0504 	and.w	r5, r0, #4
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800427a:	d135      	bne.n	80042e8 <HAL_I2C_EV_IRQHandler+0x834>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800427c:	0607      	lsls	r7, r0, #24
 800427e:	d527      	bpl.n	80042d0 <HAL_I2C_EV_IRQHandler+0x81c>
 8004280:	0556      	lsls	r6, r2, #21
 8004282:	d525      	bpl.n	80042d0 <HAL_I2C_EV_IRQHandler+0x81c>
 8004284:	bb3d      	cbnz	r5, 80042d6 <HAL_I2C_EV_IRQHandler+0x822>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004286:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
  if (hi2c->XferCount != 0U)
 800428a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800428c:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 800428e:	b292      	uxth	r2, r2
 8004290:	2a00      	cmp	r2, #0
 8004292:	f43f ac2b 	beq.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004296:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004298:	f812 5b01 	ldrb.w	r5, [r2], #1
 800429c:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 800429e:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 80042a0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80042a2:	3a01      	subs	r2, #1
 80042a4:	b292      	uxth	r2, r2
 80042a6:	8562      	strh	r2, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042a8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80042aa:	b292      	uxth	r2, r2
 80042ac:	2a00      	cmp	r2, #0
 80042ae:	f47f ac1d 	bne.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
 80042b2:	2829      	cmp	r0, #41	@ 0x29
 80042b4:	f47f ac1a 	bne.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042b8:	685a      	ldr	r2, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042ba:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042c0:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042c2:	2328      	movs	r3, #40	@ 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042c4:	6321      	str	r1, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042c6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042ca:	f7ff fa8b 	bl	80037e4 <HAL_I2C_SlaveTxCpltCallback>
 80042ce:	e40d      	b.n	8003aec <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042d0:	2d00      	cmp	r5, #0
 80042d2:	f43f ac0b 	beq.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
 80042d6:	0595      	lsls	r5, r2, #22
 80042d8:	f57f ac08 	bpl.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 80042dc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80042de:	b292      	uxth	r2, r2
 80042e0:	2a00      	cmp	r2, #0
 80042e2:	f43f ac03 	beq.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
 80042e6:	e5a7      	b.n	8003e38 <HAL_I2C_EV_IRQHandler+0x384>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042e8:	0640      	lsls	r0, r0, #25
 80042ea:	d527      	bpl.n	800433c <HAL_I2C_EV_IRQHandler+0x888>
 80042ec:	0551      	lsls	r1, r2, #21
 80042ee:	d525      	bpl.n	800433c <HAL_I2C_EV_IRQHandler+0x888>
 80042f0:	bb3d      	cbnz	r5, 8004342 <HAL_I2C_EV_IRQHandler+0x88e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042f2:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  if (hi2c->XferCount != 0U)
 80042f6:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042f8:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 80042fa:	b289      	uxth	r1, r1
 80042fc:	2900      	cmp	r1, #0
 80042fe:	f43f abf5 	beq.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004302:	6919      	ldr	r1, [r3, #16]
 8004304:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004306:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8004308:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800430a:	3301      	adds	r3, #1
 800430c:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 800430e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004310:	3b01      	subs	r3, #1
 8004312:	b29b      	uxth	r3, r3
 8004314:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004316:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	f47f abe6 	bne.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
 8004320:	2a2a      	cmp	r2, #42	@ 0x2a
 8004322:	f47f abe3 	bne.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004326:	6822      	ldr	r2, [r4, #0]
 8004328:	6853      	ldr	r3, [r2, #4]
 800432a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800432e:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004330:	2322      	movs	r3, #34	@ 0x22
 8004332:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004334:	2328      	movs	r3, #40	@ 0x28
 8004336:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
 800433a:	e795      	b.n	8004268 <HAL_I2C_EV_IRQHandler+0x7b4>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800433c:	2d00      	cmp	r5, #0
 800433e:	f43f abd5 	beq.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
 8004342:	0592      	lsls	r2, r2, #22
 8004344:	f57f abd2 	bpl.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8004348:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800434a:	b292      	uxth	r2, r2
 800434c:	2a00      	cmp	r2, #0
 800434e:	f43f abcd 	beq.w	8003aec <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	e64b      	b.n	8003ff2 <HAL_I2C_EV_IRQHandler+0x53e>
 800435a:	bf00      	nop
 800435c:	080038a5 	.word	0x080038a5
 8004360:	ffff0000 	.word	0xffff0000

08004364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004364:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004368:	4605      	mov	r5, r0
 800436a:	b338      	cbz	r0, 80043bc <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800436c:	6803      	ldr	r3, [r0, #0]
 800436e:	07db      	lsls	r3, r3, #31
 8004370:	d410      	bmi.n	8004394 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004372:	682b      	ldr	r3, [r5, #0]
 8004374:	079f      	lsls	r7, r3, #30
 8004376:	d45e      	bmi.n	8004436 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004378:	682b      	ldr	r3, [r5, #0]
 800437a:	0719      	lsls	r1, r3, #28
 800437c:	f100 8095 	bmi.w	80044aa <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004380:	682b      	ldr	r3, [r5, #0]
 8004382:	075a      	lsls	r2, r3, #29
 8004384:	f100 80c1 	bmi.w	800450a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004388:	69eb      	ldr	r3, [r5, #28]
 800438a:	2b00      	cmp	r3, #0
 800438c:	f040 812c 	bne.w	80045e8 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8004390:	2000      	movs	r0, #0
 8004392:	e029      	b.n	80043e8 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004394:	4c90      	ldr	r4, [pc, #576]	@ (80045d8 <HAL_RCC_OscConfig+0x274>)
 8004396:	6863      	ldr	r3, [r4, #4]
 8004398:	f003 030c 	and.w	r3, r3, #12
 800439c:	2b04      	cmp	r3, #4
 800439e:	d007      	beq.n	80043b0 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043a0:	6863      	ldr	r3, [r4, #4]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d10a      	bne.n	80043c0 <HAL_RCC_OscConfig+0x5c>
 80043aa:	6863      	ldr	r3, [r4, #4]
 80043ac:	03de      	lsls	r6, r3, #15
 80043ae:	d507      	bpl.n	80043c0 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b0:	6823      	ldr	r3, [r4, #0]
 80043b2:	039c      	lsls	r4, r3, #14
 80043b4:	d5dd      	bpl.n	8004372 <HAL_RCC_OscConfig+0xe>
 80043b6:	686b      	ldr	r3, [r5, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1da      	bne.n	8004372 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80043bc:	2001      	movs	r0, #1
 80043be:	e013      	b.n	80043e8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043c0:	686b      	ldr	r3, [r5, #4]
 80043c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043c6:	d112      	bne.n	80043ee <HAL_RCC_OscConfig+0x8a>
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80043d0:	f7fe fb02 	bl	80029d8 <HAL_GetTick>
 80043d4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	0398      	lsls	r0, r3, #14
 80043da:	d4ca      	bmi.n	8004372 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043dc:	f7fe fafc 	bl	80029d8 <HAL_GetTick>
 80043e0:	1b80      	subs	r0, r0, r6
 80043e2:	2864      	cmp	r0, #100	@ 0x64
 80043e4:	d9f7      	bls.n	80043d6 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80043e6:	2003      	movs	r0, #3
}
 80043e8:	b002      	add	sp, #8
 80043ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ee:	b99b      	cbnz	r3, 8004418 <HAL_RCC_OscConfig+0xb4>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043f6:	6023      	str	r3, [r4, #0]
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043fe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004400:	f7fe faea 	bl	80029d8 <HAL_GetTick>
 8004404:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	0399      	lsls	r1, r3, #14
 800440a:	d5b2      	bpl.n	8004372 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800440c:	f7fe fae4 	bl	80029d8 <HAL_GetTick>
 8004410:	1b80      	subs	r0, r0, r6
 8004412:	2864      	cmp	r0, #100	@ 0x64
 8004414:	d9f7      	bls.n	8004406 <HAL_RCC_OscConfig+0xa2>
 8004416:	e7e6      	b.n	80043e6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004418:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	d103      	bne.n	8004428 <HAL_RCC_OscConfig+0xc4>
 8004420:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	e7cf      	b.n	80043c8 <HAL_RCC_OscConfig+0x64>
 8004428:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004434:	e7cb      	b.n	80043ce <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004436:	4c68      	ldr	r4, [pc, #416]	@ (80045d8 <HAL_RCC_OscConfig+0x274>)
 8004438:	6863      	ldr	r3, [r4, #4]
 800443a:	f013 0f0c 	tst.w	r3, #12
 800443e:	d007      	beq.n	8004450 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004440:	6863      	ldr	r3, [r4, #4]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	2b08      	cmp	r3, #8
 8004448:	d110      	bne.n	800446c <HAL_RCC_OscConfig+0x108>
 800444a:	6863      	ldr	r3, [r4, #4]
 800444c:	03da      	lsls	r2, r3, #15
 800444e:	d40d      	bmi.n	800446c <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	079b      	lsls	r3, r3, #30
 8004454:	d502      	bpl.n	800445c <HAL_RCC_OscConfig+0xf8>
 8004456:	692b      	ldr	r3, [r5, #16]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d1af      	bne.n	80043bc <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	696a      	ldr	r2, [r5, #20]
 8004460:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004464:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004468:	6023      	str	r3, [r4, #0]
 800446a:	e785      	b.n	8004378 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800446c:	692a      	ldr	r2, [r5, #16]
 800446e:	4b5b      	ldr	r3, [pc, #364]	@ (80045dc <HAL_RCC_OscConfig+0x278>)
 8004470:	b16a      	cbz	r2, 800448e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8004472:	2201      	movs	r2, #1
 8004474:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004476:	f7fe faaf 	bl	80029d8 <HAL_GetTick>
 800447a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800447c:	6823      	ldr	r3, [r4, #0]
 800447e:	079f      	lsls	r7, r3, #30
 8004480:	d4ec      	bmi.n	800445c <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004482:	f7fe faa9 	bl	80029d8 <HAL_GetTick>
 8004486:	1b80      	subs	r0, r0, r6
 8004488:	2802      	cmp	r0, #2
 800448a:	d9f7      	bls.n	800447c <HAL_RCC_OscConfig+0x118>
 800448c:	e7ab      	b.n	80043e6 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800448e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004490:	f7fe faa2 	bl	80029d8 <HAL_GetTick>
 8004494:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	0798      	lsls	r0, r3, #30
 800449a:	f57f af6d 	bpl.w	8004378 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800449e:	f7fe fa9b 	bl	80029d8 <HAL_GetTick>
 80044a2:	1b80      	subs	r0, r0, r6
 80044a4:	2802      	cmp	r0, #2
 80044a6:	d9f6      	bls.n	8004496 <HAL_RCC_OscConfig+0x132>
 80044a8:	e79d      	b.n	80043e6 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044aa:	69aa      	ldr	r2, [r5, #24]
 80044ac:	4e4a      	ldr	r6, [pc, #296]	@ (80045d8 <HAL_RCC_OscConfig+0x274>)
 80044ae:	4b4b      	ldr	r3, [pc, #300]	@ (80045dc <HAL_RCC_OscConfig+0x278>)
 80044b0:	b1e2      	cbz	r2, 80044ec <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80044b2:	2201      	movs	r2, #1
 80044b4:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80044b8:	f7fe fa8e 	bl	80029d8 <HAL_GetTick>
 80044bc:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044be:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80044c0:	079b      	lsls	r3, r3, #30
 80044c2:	d50d      	bpl.n	80044e0 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044c4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80044c8:	4b45      	ldr	r3, [pc, #276]	@ (80045e0 <HAL_RCC_OscConfig+0x27c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80044d0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80044d2:	bf00      	nop
  }
  while (Delay --);
 80044d4:	9b01      	ldr	r3, [sp, #4]
 80044d6:	1e5a      	subs	r2, r3, #1
 80044d8:	9201      	str	r2, [sp, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f9      	bne.n	80044d2 <HAL_RCC_OscConfig+0x16e>
 80044de:	e74f      	b.n	8004380 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044e0:	f7fe fa7a 	bl	80029d8 <HAL_GetTick>
 80044e4:	1b00      	subs	r0, r0, r4
 80044e6:	2802      	cmp	r0, #2
 80044e8:	d9e9      	bls.n	80044be <HAL_RCC_OscConfig+0x15a>
 80044ea:	e77c      	b.n	80043e6 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80044ec:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80044f0:	f7fe fa72 	bl	80029d8 <HAL_GetTick>
 80044f4:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f6:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80044f8:	079f      	lsls	r7, r3, #30
 80044fa:	f57f af41 	bpl.w	8004380 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044fe:	f7fe fa6b 	bl	80029d8 <HAL_GetTick>
 8004502:	1b00      	subs	r0, r0, r4
 8004504:	2802      	cmp	r0, #2
 8004506:	d9f6      	bls.n	80044f6 <HAL_RCC_OscConfig+0x192>
 8004508:	e76d      	b.n	80043e6 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800450a:	4c33      	ldr	r4, [pc, #204]	@ (80045d8 <HAL_RCC_OscConfig+0x274>)
 800450c:	69e3      	ldr	r3, [r4, #28]
 800450e:	00d8      	lsls	r0, r3, #3
 8004510:	d424      	bmi.n	800455c <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8004512:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004514:	69e3      	ldr	r3, [r4, #28]
 8004516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800451a:	61e3      	str	r3, [r4, #28]
 800451c:	69e3      	ldr	r3, [r4, #28]
 800451e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004526:	4e2f      	ldr	r6, [pc, #188]	@ (80045e4 <HAL_RCC_OscConfig+0x280>)
 8004528:	6833      	ldr	r3, [r6, #0]
 800452a:	05d9      	lsls	r1, r3, #23
 800452c:	d518      	bpl.n	8004560 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800452e:	68eb      	ldr	r3, [r5, #12]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d126      	bne.n	8004582 <HAL_RCC_OscConfig+0x21e>
 8004534:	6a23      	ldr	r3, [r4, #32]
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800453c:	f7fe fa4c 	bl	80029d8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004540:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004544:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004546:	6a23      	ldr	r3, [r4, #32]
 8004548:	079b      	lsls	r3, r3, #30
 800454a:	d53f      	bpl.n	80045cc <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 800454c:	2f00      	cmp	r7, #0
 800454e:	f43f af1b 	beq.w	8004388 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004552:	69e3      	ldr	r3, [r4, #28]
 8004554:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004558:	61e3      	str	r3, [r4, #28]
 800455a:	e715      	b.n	8004388 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800455c:	2700      	movs	r7, #0
 800455e:	e7e2      	b.n	8004526 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004560:	6833      	ldr	r3, [r6, #0]
 8004562:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004566:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004568:	f7fe fa36 	bl	80029d8 <HAL_GetTick>
 800456c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800456e:	6833      	ldr	r3, [r6, #0]
 8004570:	05da      	lsls	r2, r3, #23
 8004572:	d4dc      	bmi.n	800452e <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004574:	f7fe fa30 	bl	80029d8 <HAL_GetTick>
 8004578:	eba0 0008 	sub.w	r0, r0, r8
 800457c:	2864      	cmp	r0, #100	@ 0x64
 800457e:	d9f6      	bls.n	800456e <HAL_RCC_OscConfig+0x20a>
 8004580:	e731      	b.n	80043e6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004582:	b9ab      	cbnz	r3, 80045b0 <HAL_RCC_OscConfig+0x24c>
 8004584:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004586:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800458a:	f023 0301 	bic.w	r3, r3, #1
 800458e:	6223      	str	r3, [r4, #32]
 8004590:	6a23      	ldr	r3, [r4, #32]
 8004592:	f023 0304 	bic.w	r3, r3, #4
 8004596:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004598:	f7fe fa1e 	bl	80029d8 <HAL_GetTick>
 800459c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800459e:	6a23      	ldr	r3, [r4, #32]
 80045a0:	0798      	lsls	r0, r3, #30
 80045a2:	d5d3      	bpl.n	800454c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a4:	f7fe fa18 	bl	80029d8 <HAL_GetTick>
 80045a8:	1b80      	subs	r0, r0, r6
 80045aa:	4540      	cmp	r0, r8
 80045ac:	d9f7      	bls.n	800459e <HAL_RCC_OscConfig+0x23a>
 80045ae:	e71a      	b.n	80043e6 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b0:	2b05      	cmp	r3, #5
 80045b2:	6a23      	ldr	r3, [r4, #32]
 80045b4:	d103      	bne.n	80045be <HAL_RCC_OscConfig+0x25a>
 80045b6:	f043 0304 	orr.w	r3, r3, #4
 80045ba:	6223      	str	r3, [r4, #32]
 80045bc:	e7ba      	b.n	8004534 <HAL_RCC_OscConfig+0x1d0>
 80045be:	f023 0301 	bic.w	r3, r3, #1
 80045c2:	6223      	str	r3, [r4, #32]
 80045c4:	6a23      	ldr	r3, [r4, #32]
 80045c6:	f023 0304 	bic.w	r3, r3, #4
 80045ca:	e7b6      	b.n	800453a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045cc:	f7fe fa04 	bl	80029d8 <HAL_GetTick>
 80045d0:	1b80      	subs	r0, r0, r6
 80045d2:	4540      	cmp	r0, r8
 80045d4:	d9b7      	bls.n	8004546 <HAL_RCC_OscConfig+0x1e2>
 80045d6:	e706      	b.n	80043e6 <HAL_RCC_OscConfig+0x82>
 80045d8:	40021000 	.word	0x40021000
 80045dc:	42420000 	.word	0x42420000
 80045e0:	20000014 	.word	0x20000014
 80045e4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045e8:	4c2a      	ldr	r4, [pc, #168]	@ (8004694 <HAL_RCC_OscConfig+0x330>)
 80045ea:	6862      	ldr	r2, [r4, #4]
 80045ec:	f002 020c 	and.w	r2, r2, #12
 80045f0:	2a08      	cmp	r2, #8
 80045f2:	d03e      	beq.n	8004672 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045f4:	2200      	movs	r2, #0
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	4b27      	ldr	r3, [pc, #156]	@ (8004698 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 80045fa:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045fc:	d12c      	bne.n	8004658 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80045fe:	f7fe f9eb 	bl	80029d8 <HAL_GetTick>
 8004602:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	0199      	lsls	r1, r3, #6
 8004608:	d420      	bmi.n	800464c <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800460a:	6a2b      	ldr	r3, [r5, #32]
 800460c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004610:	d105      	bne.n	800461e <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004612:	6862      	ldr	r2, [r4, #4]
 8004614:	68a9      	ldr	r1, [r5, #8]
 8004616:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800461a:	430a      	orrs	r2, r1
 800461c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800461e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8004620:	6862      	ldr	r2, [r4, #4]
 8004622:	430b      	orrs	r3, r1
 8004624:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8004628:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800462a:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800462c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800462e:	4b1a      	ldr	r3, [pc, #104]	@ (8004698 <HAL_RCC_OscConfig+0x334>)
 8004630:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004632:	f7fe f9d1 	bl	80029d8 <HAL_GetTick>
 8004636:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	019a      	lsls	r2, r3, #6
 800463c:	f53f aea8 	bmi.w	8004390 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004640:	f7fe f9ca 	bl	80029d8 <HAL_GetTick>
 8004644:	1b40      	subs	r0, r0, r5
 8004646:	2802      	cmp	r0, #2
 8004648:	d9f6      	bls.n	8004638 <HAL_RCC_OscConfig+0x2d4>
 800464a:	e6cc      	b.n	80043e6 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464c:	f7fe f9c4 	bl	80029d8 <HAL_GetTick>
 8004650:	1b80      	subs	r0, r0, r6
 8004652:	2802      	cmp	r0, #2
 8004654:	d9d6      	bls.n	8004604 <HAL_RCC_OscConfig+0x2a0>
 8004656:	e6c6      	b.n	80043e6 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8004658:	f7fe f9be 	bl	80029d8 <HAL_GetTick>
 800465c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	019b      	lsls	r3, r3, #6
 8004662:	f57f ae95 	bpl.w	8004390 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004666:	f7fe f9b7 	bl	80029d8 <HAL_GetTick>
 800466a:	1b40      	subs	r0, r0, r5
 800466c:	2802      	cmp	r0, #2
 800466e:	d9f6      	bls.n	800465e <HAL_RCC_OscConfig+0x2fa>
 8004670:	e6b9      	b.n	80043e6 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004672:	2b01      	cmp	r3, #1
 8004674:	f43f aea2 	beq.w	80043bc <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8004678:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467a:	6a2b      	ldr	r3, [r5, #32]
 800467c:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8004680:	429a      	cmp	r2, r3
 8004682:	f47f ae9b 	bne.w	80043bc <HAL_RCC_OscConfig+0x58>
 8004686:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004688:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468c:	1ac0      	subs	r0, r0, r3
 800468e:	bf18      	it	ne
 8004690:	2001      	movne	r0, #1
 8004692:	e6a9      	b.n	80043e8 <HAL_RCC_OscConfig+0x84>
 8004694:	40021000 	.word	0x40021000
 8004698:	42420000 	.word	0x42420000

0800469c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800469c:	4a0f      	ldr	r2, [pc, #60]	@ (80046dc <HAL_RCC_GetSysClockFreq+0x40>)
 800469e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80046a0:	f003 010c 	and.w	r1, r3, #12
 80046a4:	2904      	cmp	r1, #4
 80046a6:	d014      	beq.n	80046d2 <HAL_RCC_GetSysClockFreq+0x36>
 80046a8:	2908      	cmp	r1, #8
 80046aa:	d114      	bne.n	80046d6 <HAL_RCC_GetSysClockFreq+0x3a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046ac:	480c      	ldr	r0, [pc, #48]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x44>)
 80046ae:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046b2:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046b4:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046b6:	d509      	bpl.n	80046cc <HAL_RCC_GetSysClockFreq+0x30>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046b8:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046ba:	4a0a      	ldr	r2, [pc, #40]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0x48>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046bc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046c0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046c2:	4a09      	ldr	r2, [pc, #36]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x4c>)
 80046c4:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80046ca:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046cc:	4b07      	ldr	r3, [pc, #28]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x50>)
 80046ce:	4358      	muls	r0, r3
 80046d0:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80046d2:	4804      	ldr	r0, [pc, #16]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0x48>)
 80046d4:	4770      	bx	lr
  switch (tmpreg & RCC_CFGR_SWS)
 80046d6:	4806      	ldr	r0, [pc, #24]	@ (80046f0 <HAL_RCC_GetSysClockFreq+0x54>)
}
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	40021000 	.word	0x40021000
 80046e0:	0800aeb2 	.word	0x0800aeb2
 80046e4:	00f42400 	.word	0x00f42400
 80046e8:	0800aeb0 	.word	0x0800aeb0
 80046ec:	003d0900 	.word	0x003d0900
 80046f0:	007a1200 	.word	0x007a1200

080046f4 <HAL_RCC_ClockConfig>:
{
 80046f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80046fa:	4604      	mov	r4, r0
 80046fc:	b910      	cbnz	r0, 8004704 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80046fe:	2001      	movs	r0, #1
}
 8004700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004704:	4a44      	ldr	r2, [pc, #272]	@ (8004818 <HAL_RCC_ClockConfig+0x124>)
 8004706:	6813      	ldr	r3, [r2, #0]
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	428b      	cmp	r3, r1
 800470e:	d328      	bcc.n	8004762 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004710:	6821      	ldr	r1, [r4, #0]
 8004712:	078e      	lsls	r6, r1, #30
 8004714:	d430      	bmi.n	8004778 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004716:	07ca      	lsls	r2, r1, #31
 8004718:	d443      	bmi.n	80047a2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800471a:	4a3f      	ldr	r2, [pc, #252]	@ (8004818 <HAL_RCC_ClockConfig+0x124>)
 800471c:	6813      	ldr	r3, [r2, #0]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	42ab      	cmp	r3, r5
 8004724:	d865      	bhi.n	80047f2 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004726:	6822      	ldr	r2, [r4, #0]
 8004728:	4d3c      	ldr	r5, [pc, #240]	@ (800481c <HAL_RCC_ClockConfig+0x128>)
 800472a:	f012 0f04 	tst.w	r2, #4
 800472e:	d16c      	bne.n	800480a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004730:	0713      	lsls	r3, r2, #28
 8004732:	d506      	bpl.n	8004742 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004734:	686b      	ldr	r3, [r5, #4]
 8004736:	6922      	ldr	r2, [r4, #16]
 8004738:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800473c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004740:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004742:	f7ff ffab 	bl	800469c <HAL_RCC_GetSysClockFreq>
 8004746:	686b      	ldr	r3, [r5, #4]
 8004748:	4a35      	ldr	r2, [pc, #212]	@ (8004820 <HAL_RCC_ClockConfig+0x12c>)
 800474a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800474e:	5cd3      	ldrb	r3, [r2, r3]
 8004750:	40d8      	lsrs	r0, r3
 8004752:	4b34      	ldr	r3, [pc, #208]	@ (8004824 <HAL_RCC_ClockConfig+0x130>)
 8004754:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004756:	4b34      	ldr	r3, [pc, #208]	@ (8004828 <HAL_RCC_ClockConfig+0x134>)
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	f7fe f8fb 	bl	8002954 <HAL_InitTick>
  return HAL_OK;
 800475e:	2000      	movs	r0, #0
 8004760:	e7ce      	b.n	8004700 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004762:	6813      	ldr	r3, [r2, #0]
 8004764:	f023 0307 	bic.w	r3, r3, #7
 8004768:	430b      	orrs	r3, r1
 800476a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800476c:	6813      	ldr	r3, [r2, #0]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	428b      	cmp	r3, r1
 8004774:	d1c3      	bne.n	80046fe <HAL_RCC_ClockConfig+0xa>
 8004776:	e7cb      	b.n	8004710 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004778:	4b28      	ldr	r3, [pc, #160]	@ (800481c <HAL_RCC_ClockConfig+0x128>)
 800477a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800477e:	bf1e      	ittt	ne
 8004780:	685a      	ldrne	r2, [r3, #4]
 8004782:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8004786:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004788:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800478a:	bf42      	ittt	mi
 800478c:	685a      	ldrmi	r2, [r3, #4]
 800478e:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8004792:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	68a0      	ldr	r0, [r4, #8]
 8004798:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800479c:	4302      	orrs	r2, r0
 800479e:	605a      	str	r2, [r3, #4]
 80047a0:	e7b9      	b.n	8004716 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a2:	6862      	ldr	r2, [r4, #4]
 80047a4:	4e1d      	ldr	r6, [pc, #116]	@ (800481c <HAL_RCC_ClockConfig+0x128>)
 80047a6:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a8:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047aa:	d11a      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ac:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b0:	d0a5      	beq.n	80046fe <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047b2:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b4:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047b8:	f023 0303 	bic.w	r3, r3, #3
 80047bc:	4313      	orrs	r3, r2
 80047be:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80047c0:	f7fe f90a 	bl	80029d8 <HAL_GetTick>
 80047c4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c6:	6873      	ldr	r3, [r6, #4]
 80047c8:	6862      	ldr	r2, [r4, #4]
 80047ca:	f003 030c 	and.w	r3, r3, #12
 80047ce:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80047d2:	d0a2      	beq.n	800471a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d4:	f7fe f900 	bl	80029d8 <HAL_GetTick>
 80047d8:	1bc0      	subs	r0, r0, r7
 80047da:	4540      	cmp	r0, r8
 80047dc:	d9f3      	bls.n	80047c6 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80047de:	2003      	movs	r0, #3
 80047e0:	e78e      	b.n	8004700 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047e2:	2a02      	cmp	r2, #2
 80047e4:	d102      	bne.n	80047ec <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80047ea:	e7e1      	b.n	80047b0 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ec:	f013 0f02 	tst.w	r3, #2
 80047f0:	e7de      	b.n	80047b0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f2:	6813      	ldr	r3, [r2, #0]
 80047f4:	f023 0307 	bic.w	r3, r3, #7
 80047f8:	432b      	orrs	r3, r5
 80047fa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fc:	6813      	ldr	r3, [r2, #0]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	42ab      	cmp	r3, r5
 8004804:	f47f af7b 	bne.w	80046fe <HAL_RCC_ClockConfig+0xa>
 8004808:	e78d      	b.n	8004726 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800480a:	686b      	ldr	r3, [r5, #4]
 800480c:	68e1      	ldr	r1, [r4, #12]
 800480e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004812:	430b      	orrs	r3, r1
 8004814:	606b      	str	r3, [r5, #4]
 8004816:	e78b      	b.n	8004730 <HAL_RCC_ClockConfig+0x3c>
 8004818:	40022000 	.word	0x40022000
 800481c:	40021000 	.word	0x40021000
 8004820:	0800aea0 	.word	0x0800aea0
 8004824:	20000014 	.word	0x20000014
 8004828:	2000001c 	.word	0x2000001c

0800482c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800482c:	4b04      	ldr	r3, [pc, #16]	@ (8004840 <HAL_RCC_GetPCLK1Freq+0x14>)
 800482e:	4a05      	ldr	r2, [pc, #20]	@ (8004844 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004836:	5cd3      	ldrb	r3, [r2, r3]
 8004838:	4a03      	ldr	r2, [pc, #12]	@ (8004848 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800483a:	6810      	ldr	r0, [r2, #0]
}
 800483c:	40d8      	lsrs	r0, r3
 800483e:	4770      	bx	lr
 8004840:	40021000 	.word	0x40021000
 8004844:	0800ae98 	.word	0x0800ae98
 8004848:	20000014 	.word	0x20000014

0800484c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800484c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004850:	461f      	mov	r7, r3
 8004852:	4689      	mov	r9, r1
 8004854:	4690      	mov	r8, r2
 8004856:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004858:	f7fe f8be 	bl	80029d8 <HAL_GetTick>
 800485c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800485e:	443d      	add	r5, r7
 8004860:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8004862:	f7fe f8b9 	bl	80029d8 <HAL_GetTick>
 8004866:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004868:	4b25      	ldr	r3, [pc, #148]	@ (8004900 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 800486a:	681e      	ldr	r6, [r3, #0]
 800486c:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8004870:	436e      	muls	r6, r5
 8004872:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004874:	6822      	ldr	r2, [r4, #0]
 8004876:	6893      	ldr	r3, [r2, #8]
 8004878:	ea39 0303 	bics.w	r3, r9, r3
 800487c:	bf0c      	ite	eq
 800487e:	2301      	moveq	r3, #1
 8004880:	2300      	movne	r3, #0
 8004882:	4543      	cmp	r3, r8
 8004884:	d101      	bne.n	800488a <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 8004886:	2000      	movs	r0, #0
 8004888:	e02e      	b.n	80048e8 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 800488a:	1c7b      	adds	r3, r7, #1
 800488c:	d0f3      	beq.n	8004876 <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800488e:	f7fe f8a3 	bl	80029d8 <HAL_GetTick>
 8004892:	eba0 000a 	sub.w	r0, r0, sl
 8004896:	42a8      	cmp	r0, r5
 8004898:	d329      	bcc.n	80048ee <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80048a2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048a4:	6862      	ldr	r2, [r4, #4]
 80048a6:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80048aa:	d10a      	bne.n	80048c2 <SPI_WaitFlagStateUntilTimeout+0x76>
 80048ac:	68a2      	ldr	r2, [r4, #8]
 80048ae:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80048b2:	d002      	beq.n	80048ba <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048b4:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80048b8:	d103      	bne.n	80048c2 <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048c0:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048c2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80048c4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80048c8:	d107      	bne.n	80048da <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048d8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80048da:	2301      	movs	r3, #1
 80048dc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80048e0:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80048e2:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80048e4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 80048e8:	b002      	add	sp, #8
 80048ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 80048ee:	9a01      	ldr	r2, [sp, #4]
      count--;
 80048f0:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 80048f2:	2a00      	cmp	r2, #0
      count--;
 80048f4:	f103 33ff 	add.w	r3, r3, #4294967295
 80048f8:	bf08      	it	eq
 80048fa:	4615      	moveq	r5, r2
 80048fc:	9301      	str	r3, [sp, #4]
 80048fe:	e7b9      	b.n	8004874 <SPI_WaitFlagStateUntilTimeout+0x28>
 8004900:	20000014 	.word	0x20000014

08004904 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004904:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004906:	460b      	mov	r3, r1
 8004908:	9200      	str	r2, [sp, #0]
{
 800490a:	460d      	mov	r5, r1
 800490c:	4616      	mov	r6, r2
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800490e:	2102      	movs	r1, #2
 8004910:	2201      	movs	r2, #1
{
 8004912:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004914:	f7ff ff9a 	bl	800484c <SPI_WaitFlagStateUntilTimeout>
 8004918:	4602      	mov	r2, r0
 800491a:	b128      	cbz	r0, 8004928 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800491c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 800491e:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004920:	f043 0320 	orr.w	r3, r3, #32
 8004924:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004926:	e007      	b.n	8004938 <SPI_EndRxTxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004928:	462b      	mov	r3, r5
 800492a:	2180      	movs	r1, #128	@ 0x80
 800492c:	4620      	mov	r0, r4
 800492e:	9600      	str	r6, [sp, #0]
 8004930:	f7ff ff8c 	bl	800484c <SPI_WaitFlagStateUntilTimeout>
 8004934:	2800      	cmp	r0, #0
 8004936:	d1f1      	bne.n	800491c <SPI_EndRxTxTransaction+0x18>
  }
  return HAL_OK;
}
 8004938:	b002      	add	sp, #8
 800493a:	bd70      	pop	{r4, r5, r6, pc}

0800493c <HAL_SPI_Init>:
{
 800493c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800493e:	4604      	mov	r4, r0
 8004940:	2800      	cmp	r0, #0
 8004942:	d051      	beq.n	80049e8 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004944:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8004946:	2b00      	cmp	r3, #0
 8004948:	d14a      	bne.n	80049e0 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800494a:	6842      	ldr	r2, [r0, #4]
 800494c:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8004950:	d000      	beq.n	8004954 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004952:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004954:	2300      	movs	r3, #0
 8004956:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004958:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800495c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004960:	b923      	cbnz	r3, 800496c <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 8004962:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8004964:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8004968:	f7fd f824 	bl	80019b4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 800496c:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800496e:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004970:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8004974:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004976:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8004978:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800497c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800497e:	6863      	ldr	r3, [r4, #4]
 8004980:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 8004984:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8004988:	4303      	orrs	r3, r0
 800498a:	68e0      	ldr	r0, [r4, #12]
 800498c:	69a1      	ldr	r1, [r4, #24]
 800498e:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 8004992:	4303      	orrs	r3, r0
 8004994:	6920      	ldr	r0, [r4, #16]
 8004996:	f000 0002 	and.w	r0, r0, #2
 800499a:	4303      	orrs	r3, r0
 800499c:	6960      	ldr	r0, [r4, #20]
 800499e:	f000 0001 	and.w	r0, r0, #1
 80049a2:	4303      	orrs	r3, r0
 80049a4:	f401 7000 	and.w	r0, r1, #512	@ 0x200
 80049a8:	4303      	orrs	r3, r0
 80049aa:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80049ac:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049ae:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 80049b2:	4303      	orrs	r3, r0
 80049b4:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80049b6:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049ba:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 80049be:	4303      	orrs	r3, r0
 80049c0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80049c2:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 80049c6:	4303      	orrs	r3, r0
 80049c8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80049ca:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049cc:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ce:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049d4:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80049d6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049d8:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049da:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 80049de:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049e0:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049e6:	e7b5      	b.n	8004954 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80049e8:	2001      	movs	r0, #1
 80049ea:	e7f8      	b.n	80049de <HAL_SPI_Init+0xa2>

080049ec <HAL_SPI_Transmit>:
{
 80049ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80049f0:	4604      	mov	r4, r0
 80049f2:	461f      	mov	r7, r3
 80049f4:	460d      	mov	r5, r1
 80049f6:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 80049f8:	f7fd ffee 	bl	80029d8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80049fc:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 8004a00:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	b2d8      	uxtb	r0, r3
 8004a06:	f040 809f 	bne.w	8004b48 <HAL_SPI_Transmit+0x15c>
  if ((pData == NULL) || (Size == 0U))
 8004a0a:	2d00      	cmp	r5, #0
 8004a0c:	d074      	beq.n	8004af8 <HAL_SPI_Transmit+0x10c>
 8004a0e:	f1b8 0f00 	cmp.w	r8, #0
 8004a12:	d071      	beq.n	8004af8 <HAL_SPI_Transmit+0x10c>
  __HAL_LOCK(hspi);
 8004a14:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	f000 8095 	beq.w	8004b48 <HAL_SPI_Transmit+0x15c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a24:	2300      	movs	r3, #0
 8004a26:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 8004a28:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 8004a2c:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a30:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004a32:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004a34:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a36:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8004a38:	6826      	ldr	r6, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  __HAL_LOCK(hspi);
 8004a3e:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004a42:	6325      	str	r5, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004a44:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a48:	d107      	bne.n	8004a5a <HAL_SPI_Transmit+0x6e>
    __HAL_SPI_DISABLE(hspi);
 8004a4a:	6833      	ldr	r3, [r6, #0]
 8004a4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a50:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8004a52:	6833      	ldr	r3, [r6, #0]
 8004a54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a58:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a5a:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a5c:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a5e:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004a60:	bf5e      	ittt	pl
 8004a62:	6833      	ldrpl	r3, [r6, #0]
 8004a64:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8004a68:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a6a:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a6e:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a70:	d145      	bne.n	8004afe <HAL_SPI_Transmit+0x112>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a72:	b113      	cbz	r3, 8004a7a <HAL_SPI_Transmit+0x8e>
 8004a74:	f1b8 0f01 	cmp.w	r8, #1
 8004a78:	d107      	bne.n	8004a8a <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a7a:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004a7e:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a80:	6325      	str	r5, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a82:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8004a8a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	b9d3      	cbnz	r3, 8004ac6 <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a90:	464a      	mov	r2, r9
 8004a92:	4639      	mov	r1, r7
 8004a94:	4620      	mov	r0, r4
 8004a96:	f7ff ff35 	bl	8004904 <SPI_EndRxTxTransaction>
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	d151      	bne.n	8004b42 <HAL_SPI_Transmit+0x156>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a9e:	68a3      	ldr	r3, [r4, #8]
 8004aa0:	b933      	cbnz	r3, 8004ab0 <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aa2:	9301      	str	r3, [sp, #4]
 8004aa4:	6823      	ldr	r3, [r4, #0]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	9201      	str	r2, [sp, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	9301      	str	r3, [sp, #4]
 8004aae:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004ab6:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ab8:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 8004aba:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004abe:	1ac0      	subs	r0, r0, r3
 8004ac0:	bf18      	it	ne
 8004ac2:	2001      	movne	r0, #1
 8004ac4:	e018      	b.n	8004af8 <HAL_SPI_Transmit+0x10c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ac6:	6822      	ldr	r2, [r4, #0]
 8004ac8:	6893      	ldr	r3, [r2, #8]
 8004aca:	0798      	lsls	r0, r3, #30
 8004acc:	d505      	bpl.n	8004ada <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ace:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004ad0:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004ad4:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ad6:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ad8:	e7d3      	b.n	8004a82 <HAL_SPI_Transmit+0x96>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ada:	f7fd ff7d 	bl	80029d8 <HAL_GetTick>
 8004ade:	eba0 0009 	sub.w	r0, r0, r9
 8004ae2:	42b8      	cmp	r0, r7
 8004ae4:	d3d1      	bcc.n	8004a8a <HAL_SPI_Transmit+0x9e>
 8004ae6:	1c79      	adds	r1, r7, #1
 8004ae8:	d0cf      	beq.n	8004a8a <HAL_SPI_Transmit+0x9e>
          hspi->State = HAL_SPI_STATE_READY;
 8004aea:	2301      	movs	r3, #1
 8004aec:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004af0:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8004af2:	2003      	movs	r0, #3
          __HAL_UNLOCK(hspi);
 8004af4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8004af8:	b003      	add	sp, #12
 8004afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004afe:	b113      	cbz	r3, 8004b06 <HAL_SPI_Transmit+0x11a>
 8004b00:	f1b8 0f01 	cmp.w	r8, #1
 8004b04:	d108      	bne.n	8004b18 <HAL_SPI_Transmit+0x12c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b06:	782b      	ldrb	r3, [r5, #0]
 8004b08:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b10:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8004b18:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0b7      	beq.n	8004a90 <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	0792      	lsls	r2, r2, #30
 8004b26:	d503      	bpl.n	8004b30 <HAL_SPI_Transmit+0x144>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b28:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004b2a:	7812      	ldrb	r2, [r2, #0]
 8004b2c:	731a      	strb	r2, [r3, #12]
 8004b2e:	e7ec      	b.n	8004b0a <HAL_SPI_Transmit+0x11e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b30:	f7fd ff52 	bl	80029d8 <HAL_GetTick>
 8004b34:	eba0 0009 	sub.w	r0, r0, r9
 8004b38:	42b8      	cmp	r0, r7
 8004b3a:	d3ed      	bcc.n	8004b18 <HAL_SPI_Transmit+0x12c>
 8004b3c:	1c7b      	adds	r3, r7, #1
 8004b3e:	d0eb      	beq.n	8004b18 <HAL_SPI_Transmit+0x12c>
 8004b40:	e7d3      	b.n	8004aea <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b42:	2320      	movs	r3, #32
 8004b44:	6563      	str	r3, [r4, #84]	@ 0x54
 8004b46:	e7aa      	b.n	8004a9e <HAL_SPI_Transmit+0xb2>
    return HAL_BUSY;
 8004b48:	2002      	movs	r0, #2
 8004b4a:	e7d5      	b.n	8004af8 <HAL_SPI_Transmit+0x10c>

08004b4c <HAL_SPI_Transmit_DMA>:
{
 8004b4c:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State != HAL_SPI_STATE_READY)
 8004b4e:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
{
 8004b52:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	b2dd      	uxtb	r5, r3
 8004b58:	d14e      	bne.n	8004bf8 <HAL_SPI_Transmit_DMA+0xac>
  if ((pData == NULL) || (Size == 0U))
 8004b5a:	2900      	cmp	r1, #0
 8004b5c:	d036      	beq.n	8004bcc <HAL_SPI_Transmit_DMA+0x80>
 8004b5e:	2a00      	cmp	r2, #0
 8004b60:	d034      	beq.n	8004bcc <HAL_SPI_Transmit_DMA+0x80>
  __HAL_LOCK(hspi);
 8004b62:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d046      	beq.n	8004bf8 <HAL_SPI_Transmit_DMA+0xac>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b70:	2300      	movs	r3, #0
 8004b72:	6543      	str	r3, [r0, #84]	@ 0x54
  hspi->RxISR       = NULL;
 8004b74:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
  hspi->TxXferCount = Size;
 8004b78:	86c2      	strh	r2, [r0, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b7a:	6383      	str	r3, [r0, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004b7c:	8783      	strh	r3, [r0, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004b7e:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b80:	6883      	ldr	r3, [r0, #8]
  hspi->TxXferSize  = Size;
 8004b82:	8682      	strh	r2, [r0, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
    __HAL_SPI_DISABLE(hspi);
 8004b88:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hspi);
 8004b8a:	f880 5050 	strb.w	r5, [r0, #80]	@ 0x50
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004b8e:	6301      	str	r1, [r0, #48]	@ 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b90:	d107      	bne.n	8004ba2 <HAL_SPI_Transmit_DMA+0x56>
    __HAL_SPI_DISABLE(hspi);
 8004b92:	6813      	ldr	r3, [r2, #0]
 8004b94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b98:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8004b9a:	6813      	ldr	r3, [r2, #0]
 8004b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ba0:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferAbortCallback = NULL;
 8004ba2:	2600      	movs	r6, #0
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004ba4:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8004ba6:	4b15      	ldr	r3, [pc, #84]	@ (8004bfc <HAL_SPI_Transmit_DMA+0xb0>)
  hspi->hdmatx->XferAbortCallback = NULL;
 8004ba8:	6346      	str	r6, [r0, #52]	@ 0x34
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004baa:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004bac:	4b14      	ldr	r3, [pc, #80]	@ (8004c00 <HAL_SPI_Transmit_DMA+0xb4>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004bae:	320c      	adds	r2, #12
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004bb0:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004bb2:	4b14      	ldr	r3, [pc, #80]	@ (8004c04 <HAL_SPI_Transmit_DMA+0xb8>)
 8004bb4:	6303      	str	r3, [r0, #48]	@ 0x30
                                 hspi->TxXferCount))
 8004bb6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	f7fd ffbb 	bl	8002b34 <HAL_DMA_Start_IT>
 8004bbe:	b138      	cbz	r0, 8004bd0 <HAL_SPI_Transmit_DMA+0x84>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004bc0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004bc2:	f884 6050 	strb.w	r6, [r4, #80]	@ 0x50
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004bc6:	f043 0310 	orr.w	r3, r3, #16
 8004bca:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8004bcc:	4628      	mov	r0, r5
 8004bce:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_UNLOCK(hspi);
 8004bd0:	2500      	movs	r5, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8004bd8:	bf5e      	ittt	pl
 8004bda:	681a      	ldrpl	r2, [r3, #0]
 8004bdc:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8004be0:	601a      	strpl	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8004be2:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	f042 0220 	orr.w	r2, r2, #32
 8004bec:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	f042 0202 	orr.w	r2, r2, #2
 8004bf4:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 8004bf6:	e7e9      	b.n	8004bcc <HAL_SPI_Transmit_DMA+0x80>
    return HAL_BUSY;
 8004bf8:	2502      	movs	r5, #2
 8004bfa:	e7e7      	b.n	8004bcc <HAL_SPI_Transmit_DMA+0x80>
 8004bfc:	08004c0d 	.word	0x08004c0d
 8004c00:	08004c3b 	.word	0x08004c3b
 8004c04:	08004c19 	.word	0x08004c19

08004c08 <HAL_SPI_TxCpltCallback>:
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
 8004c08:	4770      	bx	lr

08004c0a <HAL_SPI_TxHalfCpltCallback>:
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
 8004c0a:	4770      	bx	lr

08004c0c <SPI_DMAHalfTransmitCplt>:
{
 8004c0c:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004c0e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8004c10:	f7ff fffb 	bl	8004c0a <HAL_SPI_TxHalfCpltCallback>
}
 8004c14:	bd08      	pop	{r3, pc}

08004c16 <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 8004c16:	4770      	bx	lr

08004c18 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004c18:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 8004c1a:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c1c:	6802      	ldr	r2, [r0, #0]
 8004c1e:	6853      	ldr	r3, [r2, #4]
 8004c20:	f023 0303 	bic.w	r3, r3, #3
 8004c24:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c26:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8004c28:	f043 0310 	orr.w	r3, r3, #16
 8004c2c:	6543      	str	r3, [r0, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
  HAL_SPI_ErrorCallback(hspi);
 8004c34:	f7ff ffef 	bl	8004c16 <HAL_SPI_ErrorCallback>
}
 8004c38:	bd08      	pop	{r3, pc}

08004c3a <SPI_DMATransmitCplt>:
{
 8004c3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c3c:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004c3e:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  tickstart = HAL_GetTick();
 8004c40:	f7fd feca 	bl	80029d8 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004c44:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8004c46:	4602      	mov	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	069b      	lsls	r3, r3, #26
 8004c4c:	d426      	bmi.n	8004c9c <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004c4e:	6823      	ldr	r3, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004c50:	4620      	mov	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004c52:	6859      	ldr	r1, [r3, #4]
 8004c54:	f021 0120 	bic.w	r1, r1, #32
 8004c58:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004c5a:	6859      	ldr	r1, [r3, #4]
 8004c5c:	f021 0102 	bic.w	r1, r1, #2
 8004c60:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004c62:	2164      	movs	r1, #100	@ 0x64
 8004c64:	f7ff fe4e 	bl	8004904 <SPI_EndRxTxTransaction>
 8004c68:	b118      	cbz	r0, 8004c72 <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c6a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004c6c:	f043 0320 	orr.w	r3, r3, #32
 8004c70:	6563      	str	r3, [r4, #84]	@ 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c72:	68a3      	ldr	r3, [r4, #8]
 8004c74:	b933      	cbnz	r3, 8004c84 <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c76:	9301      	str	r3, [sp, #4]
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	9201      	str	r2, [sp, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	9301      	str	r3, [sp, #4]
 8004c82:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	86e3      	strh	r3, [r4, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c8e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004c90:	b123      	cbz	r3, 8004c9c <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 8004c92:	4620      	mov	r0, r4
 8004c94:	f7ff ffbf 	bl	8004c16 <HAL_SPI_ErrorCallback>
}
 8004c98:	b003      	add	sp, #12
 8004c9a:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	f7ff ffb3 	bl	8004c08 <HAL_SPI_TxCpltCallback>
 8004ca2:	e7f9      	b.n	8004c98 <SPI_DMATransmitCplt+0x5e>

08004ca4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	b530      	push	{r4, r5, lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ca8:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004cac:	f893 203f 	ldrb.w	r2, [r3, #63]	@ 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004cb0:	f893 5042 	ldrb.w	r5, [r3, #66]	@ 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004cb4:	f893 4043 	ldrb.w	r4, [r3, #67]	@ 0x43
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004cb8:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004cba:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004cbc:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004cbe:	b2e4      	uxtb	r4, r4

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004cc0:	b9e1      	cbnz	r1, 8004cfc <HAL_TIM_Encoder_Start_IT+0x58>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cc2:	2801      	cmp	r0, #1
 8004cc4:	d159      	bne.n	8004d7a <HAL_TIM_Encoder_Start_IT+0xd6>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cc6:	2d01      	cmp	r5, #1
 8004cc8:	d117      	bne.n	8004cfa <HAL_TIM_Encoder_Start_IT+0x56>
    {
      return HAL_ERROR;
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cd4:	681a      	ldr	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cd6:	6a11      	ldr	r1, [r2, #32]
 8004cd8:	f021 0101 	bic.w	r1, r1, #1
 8004cdc:	6211      	str	r1, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cde:	6a11      	ldr	r1, [r2, #32]
 8004ce0:	f041 0101 	orr.w	r1, r1, #1
 8004ce4:	6211      	str	r1, [r2, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ce6:	68d1      	ldr	r1, [r2, #12]
 8004ce8:	f041 0102 	orr.w	r1, r1, #2
  return HAL_OK;
 8004cec:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004cee:	60d1      	str	r1, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	6813      	ldr	r3, [r2, #0]
 8004cf4:	f043 0301 	orr.w	r3, r3, #1
 8004cf8:	6013      	str	r3, [r2, #0]
}
 8004cfa:	bd30      	pop	{r4, r5, pc}
  else if (Channel == TIM_CHANNEL_2)
 8004cfc:	2904      	cmp	r1, #4
 8004cfe:	d115      	bne.n	8004d2c <HAL_TIM_Encoder_Start_IT+0x88>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d00:	2a01      	cmp	r2, #1
 8004d02:	d13a      	bne.n	8004d7a <HAL_TIM_Encoder_Start_IT+0xd6>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d04:	2c01      	cmp	r4, #1
 8004d06:	d138      	bne.n	8004d7a <HAL_TIM_Encoder_Start_IT+0xd6>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d08:	2202      	movs	r2, #2
 8004d0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d12:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 8004d14:	6a11      	ldr	r1, [r2, #32]
 8004d16:	f021 0110 	bic.w	r1, r1, #16
 8004d1a:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d1c:	6a11      	ldr	r1, [r2, #32]
 8004d1e:	f041 0110 	orr.w	r1, r1, #16
 8004d22:	6211      	str	r1, [r2, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d24:	68d1      	ldr	r1, [r2, #12]
 8004d26:	f041 0104 	orr.w	r1, r1, #4
 8004d2a:	e7df      	b.n	8004cec <HAL_TIM_Encoder_Start_IT+0x48>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d2c:	2801      	cmp	r0, #1
 8004d2e:	d124      	bne.n	8004d7a <HAL_TIM_Encoder_Start_IT+0xd6>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d30:	2a01      	cmp	r2, #1
 8004d32:	d1e2      	bne.n	8004cfa <HAL_TIM_Encoder_Start_IT+0x56>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d34:	2d01      	cmp	r5, #1
 8004d36:	d1e0      	bne.n	8004cfa <HAL_TIM_Encoder_Start_IT+0x56>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d38:	2c01      	cmp	r4, #1
 8004d3a:	d1de      	bne.n	8004cfa <HAL_TIM_Encoder_Start_IT+0x56>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d4e:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 8004d50:	6a11      	ldr	r1, [r2, #32]
 8004d52:	f021 0101 	bic.w	r1, r1, #1
 8004d56:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d58:	6a11      	ldr	r1, [r2, #32]
 8004d5a:	f041 0101 	orr.w	r1, r1, #1
 8004d5e:	6211      	str	r1, [r2, #32]
  TIMx->CCER &= ~tmp;
 8004d60:	6a11      	ldr	r1, [r2, #32]
 8004d62:	f021 0110 	bic.w	r1, r1, #16
 8004d66:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d68:	6a11      	ldr	r1, [r2, #32]
 8004d6a:	f041 0110 	orr.w	r1, r1, #16
 8004d6e:	6211      	str	r1, [r2, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d70:	68d1      	ldr	r1, [r2, #12]
 8004d72:	f041 0102 	orr.w	r1, r1, #2
 8004d76:	60d1      	str	r1, [r2, #12]
 8004d78:	e7d4      	b.n	8004d24 <HAL_TIM_Encoder_Start_IT+0x80>
      return HAL_ERROR;
 8004d7a:	2001      	movs	r0, #1
 8004d7c:	e7bd      	b.n	8004cfa <HAL_TIM_Encoder_Start_IT+0x56>

08004d7e <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8004d7e:	4770      	bx	lr

08004d80 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8004d80:	4770      	bx	lr

08004d82 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8004d82:	4770      	bx	lr

08004d84 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8004d84:	4770      	bx	lr

08004d86 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8004d86:	6803      	ldr	r3, [r0, #0]
{
 8004d88:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8004d8a:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d8c:	691e      	ldr	r6, [r3, #16]
{
 8004d8e:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d90:	07b1      	lsls	r1, r6, #30
 8004d92:	d50d      	bpl.n	8004db0 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d94:	07aa      	lsls	r2, r5, #30
 8004d96:	d50b      	bpl.n	8004db0 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d98:	f06f 0202 	mvn.w	r2, #2
 8004d9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d9e:	2201      	movs	r2, #1
 8004da0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	079b      	lsls	r3, r3, #30
 8004da6:	d069      	beq.n	8004e7c <HAL_TIM_IRQHandler+0xf6>
          HAL_TIM_IC_CaptureCallback(htim);
 8004da8:	f7fc fdb2 	bl	8001910 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dac:	2300      	movs	r3, #0
 8004dae:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004db0:	0771      	lsls	r1, r6, #29
 8004db2:	d510      	bpl.n	8004dd6 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004db4:	076a      	lsls	r2, r5, #29
 8004db6:	d50e      	bpl.n	8004dd6 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004db8:	f06f 0204 	mvn.w	r2, #4
 8004dbc:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8004dbe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004dcc:	d05c      	beq.n	8004e88 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8004dce:	f7fc fd9f 	bl	8001910 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004dd6:	0733      	lsls	r3, r6, #28
 8004dd8:	d50f      	bpl.n	8004dfa <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004dda:	0728      	lsls	r0, r5, #28
 8004ddc:	d50d      	bpl.n	8004dfa <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004dde:	f06f 0208 	mvn.w	r2, #8
 8004de2:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8004de4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004de6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004de8:	2204      	movs	r2, #4
 8004dea:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	0799      	lsls	r1, r3, #30
 8004df0:	d050      	beq.n	8004e94 <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 8004df2:	f7fc fd8d 	bl	8001910 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df6:	2300      	movs	r3, #0
 8004df8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004dfa:	06f2      	lsls	r2, r6, #27
 8004dfc:	d510      	bpl.n	8004e20 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004dfe:	06eb      	lsls	r3, r5, #27
 8004e00:	d50e      	bpl.n	8004e20 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e02:	f06f 0210 	mvn.w	r2, #16
 8004e06:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8004e08:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e0c:	2208      	movs	r2, #8
 8004e0e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004e16:	d043      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e18:	f7fc fd7a 	bl	8001910 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e20:	07f0      	lsls	r0, r6, #31
 8004e22:	d508      	bpl.n	8004e36 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e24:	07e9      	lsls	r1, r5, #31
 8004e26:	d506      	bpl.n	8004e36 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e28:	f06f 0201 	mvn.w	r2, #1
 8004e2c:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e2e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e30:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e32:	f7ff ffa4 	bl	8004d7e <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e36:	0632      	lsls	r2, r6, #24
 8004e38:	d508      	bpl.n	8004e4c <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e3a:	062b      	lsls	r3, r5, #24
 8004e3c:	d506      	bpl.n	8004e4c <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e3e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e42:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_BreakCallback(htim);
 8004e44:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e46:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004e48:	f000 f8f5 	bl	8005036 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e4c:	0670      	lsls	r0, r6, #25
 8004e4e:	d508      	bpl.n	8004e62 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e50:	0669      	lsls	r1, r5, #25
 8004e52:	d506      	bpl.n	8004e62 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e58:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_TriggerCallback(htim);
 8004e5a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e5c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004e5e:	f7ff ff91 	bl	8004d84 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e62:	06b2      	lsls	r2, r6, #26
 8004e64:	d522      	bpl.n	8004eac <HAL_TIM_IRQHandler+0x126>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e66:	06ab      	lsls	r3, r5, #26
 8004e68:	d520      	bpl.n	8004eac <HAL_TIM_IRQHandler+0x126>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e6a:	f06f 0220 	mvn.w	r2, #32
 8004e6e:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_CommutCallback(htim);
 8004e70:	4620      	mov	r0, r4
}
 8004e72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e76:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004e78:	f000 b8dc 	b.w	8005034 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7c:	f7ff ff80 	bl	8004d80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e80:	4620      	mov	r0, r4
 8004e82:	f7ff ff7e 	bl	8004d82 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e86:	e791      	b.n	8004dac <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e88:	f7ff ff7a 	bl	8004d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	f7ff ff78 	bl	8004d82 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e92:	e79e      	b.n	8004dd2 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e94:	f7ff ff74 	bl	8004d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f7ff ff72 	bl	8004d82 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e9e:	e7aa      	b.n	8004df6 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea0:	f7ff ff6e 	bl	8004d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	f7ff ff6c 	bl	8004d82 <HAL_TIM_PWM_PulseFinishedCallback>
 8004eaa:	e7b7      	b.n	8004e1c <HAL_TIM_IRQHandler+0x96>
}
 8004eac:	bd70      	pop	{r4, r5, r6, pc}
	...

08004eb0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8004f2c <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 8004eb2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eb4:	4290      	cmp	r0, r2
 8004eb6:	d00a      	beq.n	8004ece <TIM_Base_SetConfig+0x1e>
 8004eb8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004ebc:	d007      	beq.n	8004ece <TIM_Base_SetConfig+0x1e>
 8004ebe:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004ec2:	4290      	cmp	r0, r2
 8004ec4:	d003      	beq.n	8004ece <TIM_Base_SetConfig+0x1e>
 8004ec6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004eca:	4290      	cmp	r0, r2
 8004ecc:	d115      	bne.n	8004efa <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8004ece:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ed0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004ed4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ed6:	4a15      	ldr	r2, [pc, #84]	@ (8004f2c <TIM_Base_SetConfig+0x7c>)
 8004ed8:	4290      	cmp	r0, r2
 8004eda:	d00a      	beq.n	8004ef2 <TIM_Base_SetConfig+0x42>
 8004edc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004ee0:	d007      	beq.n	8004ef2 <TIM_Base_SetConfig+0x42>
 8004ee2:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004ee6:	4290      	cmp	r0, r2
 8004ee8:	d003      	beq.n	8004ef2 <TIM_Base_SetConfig+0x42>
 8004eea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004eee:	4290      	cmp	r0, r2
 8004ef0:	d103      	bne.n	8004efa <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ef2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ef4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ef8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004efa:	694a      	ldr	r2, [r1, #20]
 8004efc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f00:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004f02:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f04:	688b      	ldr	r3, [r1, #8]
 8004f06:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f08:	680b      	ldr	r3, [r1, #0]
 8004f0a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f0c:	4b07      	ldr	r3, [pc, #28]	@ (8004f2c <TIM_Base_SetConfig+0x7c>)
 8004f0e:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8004f10:	bf04      	itt	eq
 8004f12:	690b      	ldreq	r3, [r1, #16]
 8004f14:	6303      	streq	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004f16:	2301      	movs	r3, #1
 8004f18:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f1a:	6903      	ldr	r3, [r0, #16]
 8004f1c:	07db      	lsls	r3, r3, #31
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f1e:	bf42      	ittt	mi
 8004f20:	6903      	ldrmi	r3, [r0, #16]
 8004f22:	f023 0301 	bicmi.w	r3, r3, #1
 8004f26:	6103      	strmi	r3, [r0, #16]
}
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40012c00 	.word	0x40012c00

08004f30 <HAL_TIM_Encoder_Init>:
{
 8004f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f32:	460d      	mov	r5, r1
  if (htim == NULL)
 8004f34:	4604      	mov	r4, r0
 8004f36:	2800      	cmp	r0, #0
 8004f38:	d04c      	beq.n	8004fd4 <HAL_TIM_Encoder_Init+0xa4>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004f3a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004f3e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004f42:	b91b      	cbnz	r3, 8004f4c <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8004f44:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8004f48:	f7fd fcaa 	bl	80028a0 <HAL_TIM_Encoder_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004f4c:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f4e:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f54:	f851 0b04 	ldr.w	r0, [r1], #4
 8004f58:	6883      	ldr	r3, [r0, #8]
 8004f5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f5e:	f023 0307 	bic.w	r3, r3, #7
 8004f62:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f64:	f7ff ffa4 	bl	8004eb0 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8004f68:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8004f6a:	682a      	ldr	r2, [r5, #0]
  tmpccmr1 = htim->Instance->CCMR1;
 8004f6c:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f6e:	69ae      	ldr	r6, [r5, #24]
  tmpsmcr |= sConfig->EncoderMode;
 8004f70:	4311      	orrs	r1, r2
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f72:	68aa      	ldr	r2, [r5, #8]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f78:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f7c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 8004f80:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f82:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f84:	69ee      	ldr	r6, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8004f8c:	68ee      	ldr	r6, [r5, #12]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f8e:	f422 427c 	bic.w	r2, r2, #64512	@ 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f92:	4333      	orrs	r3, r6
 8004f94:	6a2e      	ldr	r6, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f96:	f022 02fc 	bic.w	r2, r2, #252	@ 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f9a:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  tmpccer = htim->Instance->CCER;
 8004f9e:	6a07      	ldr	r7, [r0, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fa0:	696e      	ldr	r6, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004fa2:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fa4:	686a      	ldr	r2, [r5, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004fa6:	f027 0722 	bic.w	r7, r7, #34	@ 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004faa:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  htim->Instance->SMCR = tmpsmcr;
 8004fae:	6081      	str	r1, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fb0:	4317      	orrs	r7, r2
  htim->Instance->CCMR1 = tmpccmr1;
 8004fb2:	6183      	str	r3, [r0, #24]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fb4:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8004fb6:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 8004fb8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fba:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fbe:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fc2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fc6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 8004fce:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8004fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004fd4:	2001      	movs	r0, #1
 8004fd6:	e7fc      	b.n	8004fd2 <HAL_TIM_Encoder_Init+0xa2>

08004fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fd8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fda:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8004fde:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	f04f 0002 	mov.w	r0, #2
 8004fe6:	d022      	beq.n	800502e <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fe8:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004fea:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004fee:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ff0:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ff2:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ff6:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8004ff8:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ffa:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ffc:	4c0c      	ldr	r4, [pc, #48]	@ (8005030 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8004ffe:	42a3      	cmp	r3, r4
 8005000:	d00a      	beq.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8005002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005006:	d007      	beq.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8005008:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 800500c:	42a3      	cmp	r3, r4
 800500e:	d003      	beq.n	8005018 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8005010:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8005014:	42a3      	cmp	r3, r4
 8005016:	d104      	bne.n	8005022 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005018:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800501a:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800501e:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005020:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005022:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8005024:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005026:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800502a:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 800502e:	bd30      	pop	{r4, r5, pc}
 8005030:	40012c00 	.word	0x40012c00

08005034 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8005034:	4770      	bx	lr

08005036 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8005036:	4770      	bx	lr

08005038 <__cvt>:
 8005038:	2b00      	cmp	r3, #0
 800503a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800503e:	461d      	mov	r5, r3
 8005040:	bfbb      	ittet	lt
 8005042:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005046:	461d      	movlt	r5, r3
 8005048:	2300      	movge	r3, #0
 800504a:	232d      	movlt	r3, #45	@ 0x2d
 800504c:	b088      	sub	sp, #32
 800504e:	4614      	mov	r4, r2
 8005050:	bfb8      	it	lt
 8005052:	4614      	movlt	r4, r2
 8005054:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005056:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005058:	7013      	strb	r3, [r2, #0]
 800505a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800505c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005060:	f023 0820 	bic.w	r8, r3, #32
 8005064:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005068:	d005      	beq.n	8005076 <__cvt+0x3e>
 800506a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800506e:	d100      	bne.n	8005072 <__cvt+0x3a>
 8005070:	3601      	adds	r6, #1
 8005072:	2302      	movs	r3, #2
 8005074:	e000      	b.n	8005078 <__cvt+0x40>
 8005076:	2303      	movs	r3, #3
 8005078:	aa07      	add	r2, sp, #28
 800507a:	9204      	str	r2, [sp, #16]
 800507c:	aa06      	add	r2, sp, #24
 800507e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005082:	e9cd 3600 	strd	r3, r6, [sp]
 8005086:	4622      	mov	r2, r4
 8005088:	462b      	mov	r3, r5
 800508a:	f000 fe6d 	bl	8005d68 <_dtoa_r>
 800508e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005092:	4607      	mov	r7, r0
 8005094:	d119      	bne.n	80050ca <__cvt+0x92>
 8005096:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005098:	07db      	lsls	r3, r3, #31
 800509a:	d50e      	bpl.n	80050ba <__cvt+0x82>
 800509c:	eb00 0906 	add.w	r9, r0, r6
 80050a0:	2200      	movs	r2, #0
 80050a2:	2300      	movs	r3, #0
 80050a4:	4620      	mov	r0, r4
 80050a6:	4629      	mov	r1, r5
 80050a8:	f7fb fd32 	bl	8000b10 <__aeabi_dcmpeq>
 80050ac:	b108      	cbz	r0, 80050b2 <__cvt+0x7a>
 80050ae:	f8cd 901c 	str.w	r9, [sp, #28]
 80050b2:	2230      	movs	r2, #48	@ 0x30
 80050b4:	9b07      	ldr	r3, [sp, #28]
 80050b6:	454b      	cmp	r3, r9
 80050b8:	d31e      	bcc.n	80050f8 <__cvt+0xc0>
 80050ba:	4638      	mov	r0, r7
 80050bc:	9b07      	ldr	r3, [sp, #28]
 80050be:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80050c0:	1bdb      	subs	r3, r3, r7
 80050c2:	6013      	str	r3, [r2, #0]
 80050c4:	b008      	add	sp, #32
 80050c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80050ce:	eb00 0906 	add.w	r9, r0, r6
 80050d2:	d1e5      	bne.n	80050a0 <__cvt+0x68>
 80050d4:	7803      	ldrb	r3, [r0, #0]
 80050d6:	2b30      	cmp	r3, #48	@ 0x30
 80050d8:	d10a      	bne.n	80050f0 <__cvt+0xb8>
 80050da:	2200      	movs	r2, #0
 80050dc:	2300      	movs	r3, #0
 80050de:	4620      	mov	r0, r4
 80050e0:	4629      	mov	r1, r5
 80050e2:	f7fb fd15 	bl	8000b10 <__aeabi_dcmpeq>
 80050e6:	b918      	cbnz	r0, 80050f0 <__cvt+0xb8>
 80050e8:	f1c6 0601 	rsb	r6, r6, #1
 80050ec:	f8ca 6000 	str.w	r6, [sl]
 80050f0:	f8da 3000 	ldr.w	r3, [sl]
 80050f4:	4499      	add	r9, r3
 80050f6:	e7d3      	b.n	80050a0 <__cvt+0x68>
 80050f8:	1c59      	adds	r1, r3, #1
 80050fa:	9107      	str	r1, [sp, #28]
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	e7d9      	b.n	80050b4 <__cvt+0x7c>

08005100 <__exponent>:
 8005100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005102:	2900      	cmp	r1, #0
 8005104:	bfb6      	itet	lt
 8005106:	232d      	movlt	r3, #45	@ 0x2d
 8005108:	232b      	movge	r3, #43	@ 0x2b
 800510a:	4249      	neglt	r1, r1
 800510c:	2909      	cmp	r1, #9
 800510e:	7002      	strb	r2, [r0, #0]
 8005110:	7043      	strb	r3, [r0, #1]
 8005112:	dd29      	ble.n	8005168 <__exponent+0x68>
 8005114:	f10d 0307 	add.w	r3, sp, #7
 8005118:	461d      	mov	r5, r3
 800511a:	270a      	movs	r7, #10
 800511c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005120:	461a      	mov	r2, r3
 8005122:	fb07 1416 	mls	r4, r7, r6, r1
 8005126:	3430      	adds	r4, #48	@ 0x30
 8005128:	f802 4c01 	strb.w	r4, [r2, #-1]
 800512c:	460c      	mov	r4, r1
 800512e:	2c63      	cmp	r4, #99	@ 0x63
 8005130:	4631      	mov	r1, r6
 8005132:	f103 33ff 	add.w	r3, r3, #4294967295
 8005136:	dcf1      	bgt.n	800511c <__exponent+0x1c>
 8005138:	3130      	adds	r1, #48	@ 0x30
 800513a:	1e94      	subs	r4, r2, #2
 800513c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005140:	4623      	mov	r3, r4
 8005142:	1c41      	adds	r1, r0, #1
 8005144:	42ab      	cmp	r3, r5
 8005146:	d30a      	bcc.n	800515e <__exponent+0x5e>
 8005148:	f10d 0309 	add.w	r3, sp, #9
 800514c:	1a9b      	subs	r3, r3, r2
 800514e:	42ac      	cmp	r4, r5
 8005150:	bf88      	it	hi
 8005152:	2300      	movhi	r3, #0
 8005154:	3302      	adds	r3, #2
 8005156:	4403      	add	r3, r0
 8005158:	1a18      	subs	r0, r3, r0
 800515a:	b003      	add	sp, #12
 800515c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800515e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005162:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005166:	e7ed      	b.n	8005144 <__exponent+0x44>
 8005168:	2330      	movs	r3, #48	@ 0x30
 800516a:	3130      	adds	r1, #48	@ 0x30
 800516c:	7083      	strb	r3, [r0, #2]
 800516e:	70c1      	strb	r1, [r0, #3]
 8005170:	1d03      	adds	r3, r0, #4
 8005172:	e7f1      	b.n	8005158 <__exponent+0x58>

08005174 <_printf_float>:
 8005174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005178:	b091      	sub	sp, #68	@ 0x44
 800517a:	460c      	mov	r4, r1
 800517c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005180:	4616      	mov	r6, r2
 8005182:	461f      	mov	r7, r3
 8005184:	4605      	mov	r5, r0
 8005186:	f000 fce1 	bl	8005b4c <_localeconv_r>
 800518a:	6803      	ldr	r3, [r0, #0]
 800518c:	4618      	mov	r0, r3
 800518e:	9308      	str	r3, [sp, #32]
 8005190:	f7fa ffde 	bl	8000150 <strlen>
 8005194:	2300      	movs	r3, #0
 8005196:	930e      	str	r3, [sp, #56]	@ 0x38
 8005198:	f8d8 3000 	ldr.w	r3, [r8]
 800519c:	9009      	str	r0, [sp, #36]	@ 0x24
 800519e:	3307      	adds	r3, #7
 80051a0:	f023 0307 	bic.w	r3, r3, #7
 80051a4:	f103 0208 	add.w	r2, r3, #8
 80051a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80051ac:	f8d4 b000 	ldr.w	fp, [r4]
 80051b0:	f8c8 2000 	str.w	r2, [r8]
 80051b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80051b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80051bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051be:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80051c2:	f04f 32ff 	mov.w	r2, #4294967295
 80051c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80051ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80051ce:	4b9c      	ldr	r3, [pc, #624]	@ (8005440 <_printf_float+0x2cc>)
 80051d0:	f7fb fcd0 	bl	8000b74 <__aeabi_dcmpun>
 80051d4:	bb70      	cbnz	r0, 8005234 <_printf_float+0xc0>
 80051d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80051da:	f04f 32ff 	mov.w	r2, #4294967295
 80051de:	4b98      	ldr	r3, [pc, #608]	@ (8005440 <_printf_float+0x2cc>)
 80051e0:	f7fb fcaa 	bl	8000b38 <__aeabi_dcmple>
 80051e4:	bb30      	cbnz	r0, 8005234 <_printf_float+0xc0>
 80051e6:	2200      	movs	r2, #0
 80051e8:	2300      	movs	r3, #0
 80051ea:	4640      	mov	r0, r8
 80051ec:	4649      	mov	r1, r9
 80051ee:	f7fb fc99 	bl	8000b24 <__aeabi_dcmplt>
 80051f2:	b110      	cbz	r0, 80051fa <_printf_float+0x86>
 80051f4:	232d      	movs	r3, #45	@ 0x2d
 80051f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051fa:	4a92      	ldr	r2, [pc, #584]	@ (8005444 <_printf_float+0x2d0>)
 80051fc:	4b92      	ldr	r3, [pc, #584]	@ (8005448 <_printf_float+0x2d4>)
 80051fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005202:	bf94      	ite	ls
 8005204:	4690      	movls	r8, r2
 8005206:	4698      	movhi	r8, r3
 8005208:	2303      	movs	r3, #3
 800520a:	f04f 0900 	mov.w	r9, #0
 800520e:	6123      	str	r3, [r4, #16]
 8005210:	f02b 0304 	bic.w	r3, fp, #4
 8005214:	6023      	str	r3, [r4, #0]
 8005216:	4633      	mov	r3, r6
 8005218:	4621      	mov	r1, r4
 800521a:	4628      	mov	r0, r5
 800521c:	9700      	str	r7, [sp, #0]
 800521e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005220:	f000 f9d4 	bl	80055cc <_printf_common>
 8005224:	3001      	adds	r0, #1
 8005226:	f040 8090 	bne.w	800534a <_printf_float+0x1d6>
 800522a:	f04f 30ff 	mov.w	r0, #4294967295
 800522e:	b011      	add	sp, #68	@ 0x44
 8005230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005234:	4642      	mov	r2, r8
 8005236:	464b      	mov	r3, r9
 8005238:	4640      	mov	r0, r8
 800523a:	4649      	mov	r1, r9
 800523c:	f7fb fc9a 	bl	8000b74 <__aeabi_dcmpun>
 8005240:	b148      	cbz	r0, 8005256 <_printf_float+0xe2>
 8005242:	464b      	mov	r3, r9
 8005244:	2b00      	cmp	r3, #0
 8005246:	bfb8      	it	lt
 8005248:	232d      	movlt	r3, #45	@ 0x2d
 800524a:	4a80      	ldr	r2, [pc, #512]	@ (800544c <_printf_float+0x2d8>)
 800524c:	bfb8      	it	lt
 800524e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005252:	4b7f      	ldr	r3, [pc, #508]	@ (8005450 <_printf_float+0x2dc>)
 8005254:	e7d3      	b.n	80051fe <_printf_float+0x8a>
 8005256:	6863      	ldr	r3, [r4, #4]
 8005258:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	d13f      	bne.n	80052e0 <_printf_float+0x16c>
 8005260:	2306      	movs	r3, #6
 8005262:	6063      	str	r3, [r4, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800526a:	6023      	str	r3, [r4, #0]
 800526c:	9206      	str	r2, [sp, #24]
 800526e:	aa0e      	add	r2, sp, #56	@ 0x38
 8005270:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005274:	aa0d      	add	r2, sp, #52	@ 0x34
 8005276:	9203      	str	r2, [sp, #12]
 8005278:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800527c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005280:	6863      	ldr	r3, [r4, #4]
 8005282:	4642      	mov	r2, r8
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	4628      	mov	r0, r5
 8005288:	464b      	mov	r3, r9
 800528a:	910a      	str	r1, [sp, #40]	@ 0x28
 800528c:	f7ff fed4 	bl	8005038 <__cvt>
 8005290:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005292:	4680      	mov	r8, r0
 8005294:	2947      	cmp	r1, #71	@ 0x47
 8005296:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005298:	d128      	bne.n	80052ec <_printf_float+0x178>
 800529a:	1cc8      	adds	r0, r1, #3
 800529c:	db02      	blt.n	80052a4 <_printf_float+0x130>
 800529e:	6863      	ldr	r3, [r4, #4]
 80052a0:	4299      	cmp	r1, r3
 80052a2:	dd40      	ble.n	8005326 <_printf_float+0x1b2>
 80052a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80052a8:	fa5f fa8a 	uxtb.w	sl, sl
 80052ac:	4652      	mov	r2, sl
 80052ae:	3901      	subs	r1, #1
 80052b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80052b4:	910d      	str	r1, [sp, #52]	@ 0x34
 80052b6:	f7ff ff23 	bl	8005100 <__exponent>
 80052ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80052bc:	4681      	mov	r9, r0
 80052be:	1813      	adds	r3, r2, r0
 80052c0:	2a01      	cmp	r2, #1
 80052c2:	6123      	str	r3, [r4, #16]
 80052c4:	dc02      	bgt.n	80052cc <_printf_float+0x158>
 80052c6:	6822      	ldr	r2, [r4, #0]
 80052c8:	07d2      	lsls	r2, r2, #31
 80052ca:	d501      	bpl.n	80052d0 <_printf_float+0x15c>
 80052cc:	3301      	adds	r3, #1
 80052ce:	6123      	str	r3, [r4, #16]
 80052d0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d09e      	beq.n	8005216 <_printf_float+0xa2>
 80052d8:	232d      	movs	r3, #45	@ 0x2d
 80052da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052de:	e79a      	b.n	8005216 <_printf_float+0xa2>
 80052e0:	2947      	cmp	r1, #71	@ 0x47
 80052e2:	d1bf      	bne.n	8005264 <_printf_float+0xf0>
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1bd      	bne.n	8005264 <_printf_float+0xf0>
 80052e8:	2301      	movs	r3, #1
 80052ea:	e7ba      	b.n	8005262 <_printf_float+0xee>
 80052ec:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80052f0:	d9dc      	bls.n	80052ac <_printf_float+0x138>
 80052f2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80052f6:	d118      	bne.n	800532a <_printf_float+0x1b6>
 80052f8:	2900      	cmp	r1, #0
 80052fa:	6863      	ldr	r3, [r4, #4]
 80052fc:	dd0b      	ble.n	8005316 <_printf_float+0x1a2>
 80052fe:	6121      	str	r1, [r4, #16]
 8005300:	b913      	cbnz	r3, 8005308 <_printf_float+0x194>
 8005302:	6822      	ldr	r2, [r4, #0]
 8005304:	07d0      	lsls	r0, r2, #31
 8005306:	d502      	bpl.n	800530e <_printf_float+0x19a>
 8005308:	3301      	adds	r3, #1
 800530a:	440b      	add	r3, r1
 800530c:	6123      	str	r3, [r4, #16]
 800530e:	f04f 0900 	mov.w	r9, #0
 8005312:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005314:	e7dc      	b.n	80052d0 <_printf_float+0x15c>
 8005316:	b913      	cbnz	r3, 800531e <_printf_float+0x1aa>
 8005318:	6822      	ldr	r2, [r4, #0]
 800531a:	07d2      	lsls	r2, r2, #31
 800531c:	d501      	bpl.n	8005322 <_printf_float+0x1ae>
 800531e:	3302      	adds	r3, #2
 8005320:	e7f4      	b.n	800530c <_printf_float+0x198>
 8005322:	2301      	movs	r3, #1
 8005324:	e7f2      	b.n	800530c <_printf_float+0x198>
 8005326:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800532a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800532c:	4299      	cmp	r1, r3
 800532e:	db05      	blt.n	800533c <_printf_float+0x1c8>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	6121      	str	r1, [r4, #16]
 8005334:	07d8      	lsls	r0, r3, #31
 8005336:	d5ea      	bpl.n	800530e <_printf_float+0x19a>
 8005338:	1c4b      	adds	r3, r1, #1
 800533a:	e7e7      	b.n	800530c <_printf_float+0x198>
 800533c:	2900      	cmp	r1, #0
 800533e:	bfcc      	ite	gt
 8005340:	2201      	movgt	r2, #1
 8005342:	f1c1 0202 	rsble	r2, r1, #2
 8005346:	4413      	add	r3, r2
 8005348:	e7e0      	b.n	800530c <_printf_float+0x198>
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	055a      	lsls	r2, r3, #21
 800534e:	d407      	bmi.n	8005360 <_printf_float+0x1ec>
 8005350:	6923      	ldr	r3, [r4, #16]
 8005352:	4642      	mov	r2, r8
 8005354:	4631      	mov	r1, r6
 8005356:	4628      	mov	r0, r5
 8005358:	47b8      	blx	r7
 800535a:	3001      	adds	r0, #1
 800535c:	d12b      	bne.n	80053b6 <_printf_float+0x242>
 800535e:	e764      	b.n	800522a <_printf_float+0xb6>
 8005360:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005364:	f240 80dc 	bls.w	8005520 <_printf_float+0x3ac>
 8005368:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800536c:	2200      	movs	r2, #0
 800536e:	2300      	movs	r3, #0
 8005370:	f7fb fbce 	bl	8000b10 <__aeabi_dcmpeq>
 8005374:	2800      	cmp	r0, #0
 8005376:	d033      	beq.n	80053e0 <_printf_float+0x26c>
 8005378:	2301      	movs	r3, #1
 800537a:	4631      	mov	r1, r6
 800537c:	4628      	mov	r0, r5
 800537e:	4a35      	ldr	r2, [pc, #212]	@ (8005454 <_printf_float+0x2e0>)
 8005380:	47b8      	blx	r7
 8005382:	3001      	adds	r0, #1
 8005384:	f43f af51 	beq.w	800522a <_printf_float+0xb6>
 8005388:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800538c:	4543      	cmp	r3, r8
 800538e:	db02      	blt.n	8005396 <_printf_float+0x222>
 8005390:	6823      	ldr	r3, [r4, #0]
 8005392:	07d8      	lsls	r0, r3, #31
 8005394:	d50f      	bpl.n	80053b6 <_printf_float+0x242>
 8005396:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800539a:	4631      	mov	r1, r6
 800539c:	4628      	mov	r0, r5
 800539e:	47b8      	blx	r7
 80053a0:	3001      	adds	r0, #1
 80053a2:	f43f af42 	beq.w	800522a <_printf_float+0xb6>
 80053a6:	f04f 0900 	mov.w	r9, #0
 80053aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80053ae:	f104 0a1a 	add.w	sl, r4, #26
 80053b2:	45c8      	cmp	r8, r9
 80053b4:	dc09      	bgt.n	80053ca <_printf_float+0x256>
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	079b      	lsls	r3, r3, #30
 80053ba:	f100 8102 	bmi.w	80055c2 <_printf_float+0x44e>
 80053be:	68e0      	ldr	r0, [r4, #12]
 80053c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053c2:	4298      	cmp	r0, r3
 80053c4:	bfb8      	it	lt
 80053c6:	4618      	movlt	r0, r3
 80053c8:	e731      	b.n	800522e <_printf_float+0xba>
 80053ca:	2301      	movs	r3, #1
 80053cc:	4652      	mov	r2, sl
 80053ce:	4631      	mov	r1, r6
 80053d0:	4628      	mov	r0, r5
 80053d2:	47b8      	blx	r7
 80053d4:	3001      	adds	r0, #1
 80053d6:	f43f af28 	beq.w	800522a <_printf_float+0xb6>
 80053da:	f109 0901 	add.w	r9, r9, #1
 80053de:	e7e8      	b.n	80053b2 <_printf_float+0x23e>
 80053e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	dc38      	bgt.n	8005458 <_printf_float+0x2e4>
 80053e6:	2301      	movs	r3, #1
 80053e8:	4631      	mov	r1, r6
 80053ea:	4628      	mov	r0, r5
 80053ec:	4a19      	ldr	r2, [pc, #100]	@ (8005454 <_printf_float+0x2e0>)
 80053ee:	47b8      	blx	r7
 80053f0:	3001      	adds	r0, #1
 80053f2:	f43f af1a 	beq.w	800522a <_printf_float+0xb6>
 80053f6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80053fa:	ea59 0303 	orrs.w	r3, r9, r3
 80053fe:	d102      	bne.n	8005406 <_printf_float+0x292>
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	07d9      	lsls	r1, r3, #31
 8005404:	d5d7      	bpl.n	80053b6 <_printf_float+0x242>
 8005406:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800540a:	4631      	mov	r1, r6
 800540c:	4628      	mov	r0, r5
 800540e:	47b8      	blx	r7
 8005410:	3001      	adds	r0, #1
 8005412:	f43f af0a 	beq.w	800522a <_printf_float+0xb6>
 8005416:	f04f 0a00 	mov.w	sl, #0
 800541a:	f104 0b1a 	add.w	fp, r4, #26
 800541e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005420:	425b      	negs	r3, r3
 8005422:	4553      	cmp	r3, sl
 8005424:	dc01      	bgt.n	800542a <_printf_float+0x2b6>
 8005426:	464b      	mov	r3, r9
 8005428:	e793      	b.n	8005352 <_printf_float+0x1de>
 800542a:	2301      	movs	r3, #1
 800542c:	465a      	mov	r2, fp
 800542e:	4631      	mov	r1, r6
 8005430:	4628      	mov	r0, r5
 8005432:	47b8      	blx	r7
 8005434:	3001      	adds	r0, #1
 8005436:	f43f aef8 	beq.w	800522a <_printf_float+0xb6>
 800543a:	f10a 0a01 	add.w	sl, sl, #1
 800543e:	e7ee      	b.n	800541e <_printf_float+0x2aa>
 8005440:	7fefffff 	.word	0x7fefffff
 8005444:	0800aec2 	.word	0x0800aec2
 8005448:	0800aec6 	.word	0x0800aec6
 800544c:	0800aeca 	.word	0x0800aeca
 8005450:	0800aece 	.word	0x0800aece
 8005454:	0800aed2 	.word	0x0800aed2
 8005458:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800545a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800545e:	4553      	cmp	r3, sl
 8005460:	bfa8      	it	ge
 8005462:	4653      	movge	r3, sl
 8005464:	2b00      	cmp	r3, #0
 8005466:	4699      	mov	r9, r3
 8005468:	dc36      	bgt.n	80054d8 <_printf_float+0x364>
 800546a:	f04f 0b00 	mov.w	fp, #0
 800546e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005472:	f104 021a 	add.w	r2, r4, #26
 8005476:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005478:	930a      	str	r3, [sp, #40]	@ 0x28
 800547a:	eba3 0309 	sub.w	r3, r3, r9
 800547e:	455b      	cmp	r3, fp
 8005480:	dc31      	bgt.n	80054e6 <_printf_float+0x372>
 8005482:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005484:	459a      	cmp	sl, r3
 8005486:	dc3a      	bgt.n	80054fe <_printf_float+0x38a>
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	07da      	lsls	r2, r3, #31
 800548c:	d437      	bmi.n	80054fe <_printf_float+0x38a>
 800548e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005490:	ebaa 0903 	sub.w	r9, sl, r3
 8005494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005496:	ebaa 0303 	sub.w	r3, sl, r3
 800549a:	4599      	cmp	r9, r3
 800549c:	bfa8      	it	ge
 800549e:	4699      	movge	r9, r3
 80054a0:	f1b9 0f00 	cmp.w	r9, #0
 80054a4:	dc33      	bgt.n	800550e <_printf_float+0x39a>
 80054a6:	f04f 0800 	mov.w	r8, #0
 80054aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054ae:	f104 0b1a 	add.w	fp, r4, #26
 80054b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054b4:	ebaa 0303 	sub.w	r3, sl, r3
 80054b8:	eba3 0309 	sub.w	r3, r3, r9
 80054bc:	4543      	cmp	r3, r8
 80054be:	f77f af7a 	ble.w	80053b6 <_printf_float+0x242>
 80054c2:	2301      	movs	r3, #1
 80054c4:	465a      	mov	r2, fp
 80054c6:	4631      	mov	r1, r6
 80054c8:	4628      	mov	r0, r5
 80054ca:	47b8      	blx	r7
 80054cc:	3001      	adds	r0, #1
 80054ce:	f43f aeac 	beq.w	800522a <_printf_float+0xb6>
 80054d2:	f108 0801 	add.w	r8, r8, #1
 80054d6:	e7ec      	b.n	80054b2 <_printf_float+0x33e>
 80054d8:	4642      	mov	r2, r8
 80054da:	4631      	mov	r1, r6
 80054dc:	4628      	mov	r0, r5
 80054de:	47b8      	blx	r7
 80054e0:	3001      	adds	r0, #1
 80054e2:	d1c2      	bne.n	800546a <_printf_float+0x2f6>
 80054e4:	e6a1      	b.n	800522a <_printf_float+0xb6>
 80054e6:	2301      	movs	r3, #1
 80054e8:	4631      	mov	r1, r6
 80054ea:	4628      	mov	r0, r5
 80054ec:	920a      	str	r2, [sp, #40]	@ 0x28
 80054ee:	47b8      	blx	r7
 80054f0:	3001      	adds	r0, #1
 80054f2:	f43f ae9a 	beq.w	800522a <_printf_float+0xb6>
 80054f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80054f8:	f10b 0b01 	add.w	fp, fp, #1
 80054fc:	e7bb      	b.n	8005476 <_printf_float+0x302>
 80054fe:	4631      	mov	r1, r6
 8005500:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005504:	4628      	mov	r0, r5
 8005506:	47b8      	blx	r7
 8005508:	3001      	adds	r0, #1
 800550a:	d1c0      	bne.n	800548e <_printf_float+0x31a>
 800550c:	e68d      	b.n	800522a <_printf_float+0xb6>
 800550e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005510:	464b      	mov	r3, r9
 8005512:	4631      	mov	r1, r6
 8005514:	4628      	mov	r0, r5
 8005516:	4442      	add	r2, r8
 8005518:	47b8      	blx	r7
 800551a:	3001      	adds	r0, #1
 800551c:	d1c3      	bne.n	80054a6 <_printf_float+0x332>
 800551e:	e684      	b.n	800522a <_printf_float+0xb6>
 8005520:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005524:	f1ba 0f01 	cmp.w	sl, #1
 8005528:	dc01      	bgt.n	800552e <_printf_float+0x3ba>
 800552a:	07db      	lsls	r3, r3, #31
 800552c:	d536      	bpl.n	800559c <_printf_float+0x428>
 800552e:	2301      	movs	r3, #1
 8005530:	4642      	mov	r2, r8
 8005532:	4631      	mov	r1, r6
 8005534:	4628      	mov	r0, r5
 8005536:	47b8      	blx	r7
 8005538:	3001      	adds	r0, #1
 800553a:	f43f ae76 	beq.w	800522a <_printf_float+0xb6>
 800553e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005542:	4631      	mov	r1, r6
 8005544:	4628      	mov	r0, r5
 8005546:	47b8      	blx	r7
 8005548:	3001      	adds	r0, #1
 800554a:	f43f ae6e 	beq.w	800522a <_printf_float+0xb6>
 800554e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005552:	2200      	movs	r2, #0
 8005554:	2300      	movs	r3, #0
 8005556:	f10a 3aff 	add.w	sl, sl, #4294967295
 800555a:	f7fb fad9 	bl	8000b10 <__aeabi_dcmpeq>
 800555e:	b9c0      	cbnz	r0, 8005592 <_printf_float+0x41e>
 8005560:	4653      	mov	r3, sl
 8005562:	f108 0201 	add.w	r2, r8, #1
 8005566:	4631      	mov	r1, r6
 8005568:	4628      	mov	r0, r5
 800556a:	47b8      	blx	r7
 800556c:	3001      	adds	r0, #1
 800556e:	d10c      	bne.n	800558a <_printf_float+0x416>
 8005570:	e65b      	b.n	800522a <_printf_float+0xb6>
 8005572:	2301      	movs	r3, #1
 8005574:	465a      	mov	r2, fp
 8005576:	4631      	mov	r1, r6
 8005578:	4628      	mov	r0, r5
 800557a:	47b8      	blx	r7
 800557c:	3001      	adds	r0, #1
 800557e:	f43f ae54 	beq.w	800522a <_printf_float+0xb6>
 8005582:	f108 0801 	add.w	r8, r8, #1
 8005586:	45d0      	cmp	r8, sl
 8005588:	dbf3      	blt.n	8005572 <_printf_float+0x3fe>
 800558a:	464b      	mov	r3, r9
 800558c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005590:	e6e0      	b.n	8005354 <_printf_float+0x1e0>
 8005592:	f04f 0800 	mov.w	r8, #0
 8005596:	f104 0b1a 	add.w	fp, r4, #26
 800559a:	e7f4      	b.n	8005586 <_printf_float+0x412>
 800559c:	2301      	movs	r3, #1
 800559e:	4642      	mov	r2, r8
 80055a0:	e7e1      	b.n	8005566 <_printf_float+0x3f2>
 80055a2:	2301      	movs	r3, #1
 80055a4:	464a      	mov	r2, r9
 80055a6:	4631      	mov	r1, r6
 80055a8:	4628      	mov	r0, r5
 80055aa:	47b8      	blx	r7
 80055ac:	3001      	adds	r0, #1
 80055ae:	f43f ae3c 	beq.w	800522a <_printf_float+0xb6>
 80055b2:	f108 0801 	add.w	r8, r8, #1
 80055b6:	68e3      	ldr	r3, [r4, #12]
 80055b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80055ba:	1a5b      	subs	r3, r3, r1
 80055bc:	4543      	cmp	r3, r8
 80055be:	dcf0      	bgt.n	80055a2 <_printf_float+0x42e>
 80055c0:	e6fd      	b.n	80053be <_printf_float+0x24a>
 80055c2:	f04f 0800 	mov.w	r8, #0
 80055c6:	f104 0919 	add.w	r9, r4, #25
 80055ca:	e7f4      	b.n	80055b6 <_printf_float+0x442>

080055cc <_printf_common>:
 80055cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d0:	4616      	mov	r6, r2
 80055d2:	4698      	mov	r8, r3
 80055d4:	688a      	ldr	r2, [r1, #8]
 80055d6:	690b      	ldr	r3, [r1, #16]
 80055d8:	4607      	mov	r7, r0
 80055da:	4293      	cmp	r3, r2
 80055dc:	bfb8      	it	lt
 80055de:	4613      	movlt	r3, r2
 80055e0:	6033      	str	r3, [r6, #0]
 80055e2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055e6:	460c      	mov	r4, r1
 80055e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055ec:	b10a      	cbz	r2, 80055f2 <_printf_common+0x26>
 80055ee:	3301      	adds	r3, #1
 80055f0:	6033      	str	r3, [r6, #0]
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	0699      	lsls	r1, r3, #26
 80055f6:	bf42      	ittt	mi
 80055f8:	6833      	ldrmi	r3, [r6, #0]
 80055fa:	3302      	addmi	r3, #2
 80055fc:	6033      	strmi	r3, [r6, #0]
 80055fe:	6825      	ldr	r5, [r4, #0]
 8005600:	f015 0506 	ands.w	r5, r5, #6
 8005604:	d106      	bne.n	8005614 <_printf_common+0x48>
 8005606:	f104 0a19 	add.w	sl, r4, #25
 800560a:	68e3      	ldr	r3, [r4, #12]
 800560c:	6832      	ldr	r2, [r6, #0]
 800560e:	1a9b      	subs	r3, r3, r2
 8005610:	42ab      	cmp	r3, r5
 8005612:	dc2b      	bgt.n	800566c <_printf_common+0xa0>
 8005614:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005618:	6822      	ldr	r2, [r4, #0]
 800561a:	3b00      	subs	r3, #0
 800561c:	bf18      	it	ne
 800561e:	2301      	movne	r3, #1
 8005620:	0692      	lsls	r2, r2, #26
 8005622:	d430      	bmi.n	8005686 <_printf_common+0xba>
 8005624:	4641      	mov	r1, r8
 8005626:	4638      	mov	r0, r7
 8005628:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800562c:	47c8      	blx	r9
 800562e:	3001      	adds	r0, #1
 8005630:	d023      	beq.n	800567a <_printf_common+0xae>
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	6922      	ldr	r2, [r4, #16]
 8005636:	f003 0306 	and.w	r3, r3, #6
 800563a:	2b04      	cmp	r3, #4
 800563c:	bf14      	ite	ne
 800563e:	2500      	movne	r5, #0
 8005640:	6833      	ldreq	r3, [r6, #0]
 8005642:	f04f 0600 	mov.w	r6, #0
 8005646:	bf08      	it	eq
 8005648:	68e5      	ldreq	r5, [r4, #12]
 800564a:	f104 041a 	add.w	r4, r4, #26
 800564e:	bf08      	it	eq
 8005650:	1aed      	subeq	r5, r5, r3
 8005652:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005656:	bf08      	it	eq
 8005658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800565c:	4293      	cmp	r3, r2
 800565e:	bfc4      	itt	gt
 8005660:	1a9b      	subgt	r3, r3, r2
 8005662:	18ed      	addgt	r5, r5, r3
 8005664:	42b5      	cmp	r5, r6
 8005666:	d11a      	bne.n	800569e <_printf_common+0xd2>
 8005668:	2000      	movs	r0, #0
 800566a:	e008      	b.n	800567e <_printf_common+0xb2>
 800566c:	2301      	movs	r3, #1
 800566e:	4652      	mov	r2, sl
 8005670:	4641      	mov	r1, r8
 8005672:	4638      	mov	r0, r7
 8005674:	47c8      	blx	r9
 8005676:	3001      	adds	r0, #1
 8005678:	d103      	bne.n	8005682 <_printf_common+0xb6>
 800567a:	f04f 30ff 	mov.w	r0, #4294967295
 800567e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005682:	3501      	adds	r5, #1
 8005684:	e7c1      	b.n	800560a <_printf_common+0x3e>
 8005686:	2030      	movs	r0, #48	@ 0x30
 8005688:	18e1      	adds	r1, r4, r3
 800568a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005694:	4422      	add	r2, r4
 8005696:	3302      	adds	r3, #2
 8005698:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800569c:	e7c2      	b.n	8005624 <_printf_common+0x58>
 800569e:	2301      	movs	r3, #1
 80056a0:	4622      	mov	r2, r4
 80056a2:	4641      	mov	r1, r8
 80056a4:	4638      	mov	r0, r7
 80056a6:	47c8      	blx	r9
 80056a8:	3001      	adds	r0, #1
 80056aa:	d0e6      	beq.n	800567a <_printf_common+0xae>
 80056ac:	3601      	adds	r6, #1
 80056ae:	e7d9      	b.n	8005664 <_printf_common+0x98>

080056b0 <_printf_i>:
 80056b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056b4:	7e0f      	ldrb	r7, [r1, #24]
 80056b6:	4691      	mov	r9, r2
 80056b8:	2f78      	cmp	r7, #120	@ 0x78
 80056ba:	4680      	mov	r8, r0
 80056bc:	460c      	mov	r4, r1
 80056be:	469a      	mov	sl, r3
 80056c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80056c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80056c6:	d807      	bhi.n	80056d8 <_printf_i+0x28>
 80056c8:	2f62      	cmp	r7, #98	@ 0x62
 80056ca:	d80a      	bhi.n	80056e2 <_printf_i+0x32>
 80056cc:	2f00      	cmp	r7, #0
 80056ce:	f000 80d3 	beq.w	8005878 <_printf_i+0x1c8>
 80056d2:	2f58      	cmp	r7, #88	@ 0x58
 80056d4:	f000 80ba 	beq.w	800584c <_printf_i+0x19c>
 80056d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056e0:	e03a      	b.n	8005758 <_printf_i+0xa8>
 80056e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056e6:	2b15      	cmp	r3, #21
 80056e8:	d8f6      	bhi.n	80056d8 <_printf_i+0x28>
 80056ea:	a101      	add	r1, pc, #4	@ (adr r1, 80056f0 <_printf_i+0x40>)
 80056ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056f0:	08005749 	.word	0x08005749
 80056f4:	0800575d 	.word	0x0800575d
 80056f8:	080056d9 	.word	0x080056d9
 80056fc:	080056d9 	.word	0x080056d9
 8005700:	080056d9 	.word	0x080056d9
 8005704:	080056d9 	.word	0x080056d9
 8005708:	0800575d 	.word	0x0800575d
 800570c:	080056d9 	.word	0x080056d9
 8005710:	080056d9 	.word	0x080056d9
 8005714:	080056d9 	.word	0x080056d9
 8005718:	080056d9 	.word	0x080056d9
 800571c:	0800585f 	.word	0x0800585f
 8005720:	08005787 	.word	0x08005787
 8005724:	08005819 	.word	0x08005819
 8005728:	080056d9 	.word	0x080056d9
 800572c:	080056d9 	.word	0x080056d9
 8005730:	08005881 	.word	0x08005881
 8005734:	080056d9 	.word	0x080056d9
 8005738:	08005787 	.word	0x08005787
 800573c:	080056d9 	.word	0x080056d9
 8005740:	080056d9 	.word	0x080056d9
 8005744:	08005821 	.word	0x08005821
 8005748:	6833      	ldr	r3, [r6, #0]
 800574a:	1d1a      	adds	r2, r3, #4
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6032      	str	r2, [r6, #0]
 8005750:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005754:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005758:	2301      	movs	r3, #1
 800575a:	e09e      	b.n	800589a <_printf_i+0x1ea>
 800575c:	6833      	ldr	r3, [r6, #0]
 800575e:	6820      	ldr	r0, [r4, #0]
 8005760:	1d19      	adds	r1, r3, #4
 8005762:	6031      	str	r1, [r6, #0]
 8005764:	0606      	lsls	r6, r0, #24
 8005766:	d501      	bpl.n	800576c <_printf_i+0xbc>
 8005768:	681d      	ldr	r5, [r3, #0]
 800576a:	e003      	b.n	8005774 <_printf_i+0xc4>
 800576c:	0645      	lsls	r5, r0, #25
 800576e:	d5fb      	bpl.n	8005768 <_printf_i+0xb8>
 8005770:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005774:	2d00      	cmp	r5, #0
 8005776:	da03      	bge.n	8005780 <_printf_i+0xd0>
 8005778:	232d      	movs	r3, #45	@ 0x2d
 800577a:	426d      	negs	r5, r5
 800577c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005780:	230a      	movs	r3, #10
 8005782:	4859      	ldr	r0, [pc, #356]	@ (80058e8 <_printf_i+0x238>)
 8005784:	e011      	b.n	80057aa <_printf_i+0xfa>
 8005786:	6821      	ldr	r1, [r4, #0]
 8005788:	6833      	ldr	r3, [r6, #0]
 800578a:	0608      	lsls	r0, r1, #24
 800578c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005790:	d402      	bmi.n	8005798 <_printf_i+0xe8>
 8005792:	0649      	lsls	r1, r1, #25
 8005794:	bf48      	it	mi
 8005796:	b2ad      	uxthmi	r5, r5
 8005798:	2f6f      	cmp	r7, #111	@ 0x6f
 800579a:	6033      	str	r3, [r6, #0]
 800579c:	bf14      	ite	ne
 800579e:	230a      	movne	r3, #10
 80057a0:	2308      	moveq	r3, #8
 80057a2:	4851      	ldr	r0, [pc, #324]	@ (80058e8 <_printf_i+0x238>)
 80057a4:	2100      	movs	r1, #0
 80057a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80057aa:	6866      	ldr	r6, [r4, #4]
 80057ac:	2e00      	cmp	r6, #0
 80057ae:	bfa8      	it	ge
 80057b0:	6821      	ldrge	r1, [r4, #0]
 80057b2:	60a6      	str	r6, [r4, #8]
 80057b4:	bfa4      	itt	ge
 80057b6:	f021 0104 	bicge.w	r1, r1, #4
 80057ba:	6021      	strge	r1, [r4, #0]
 80057bc:	b90d      	cbnz	r5, 80057c2 <_printf_i+0x112>
 80057be:	2e00      	cmp	r6, #0
 80057c0:	d04b      	beq.n	800585a <_printf_i+0x1aa>
 80057c2:	4616      	mov	r6, r2
 80057c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80057c8:	fb03 5711 	mls	r7, r3, r1, r5
 80057cc:	5dc7      	ldrb	r7, [r0, r7]
 80057ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057d2:	462f      	mov	r7, r5
 80057d4:	42bb      	cmp	r3, r7
 80057d6:	460d      	mov	r5, r1
 80057d8:	d9f4      	bls.n	80057c4 <_printf_i+0x114>
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d10b      	bne.n	80057f6 <_printf_i+0x146>
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	07df      	lsls	r7, r3, #31
 80057e2:	d508      	bpl.n	80057f6 <_printf_i+0x146>
 80057e4:	6923      	ldr	r3, [r4, #16]
 80057e6:	6861      	ldr	r1, [r4, #4]
 80057e8:	4299      	cmp	r1, r3
 80057ea:	bfde      	ittt	le
 80057ec:	2330      	movle	r3, #48	@ 0x30
 80057ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057f6:	1b92      	subs	r2, r2, r6
 80057f8:	6122      	str	r2, [r4, #16]
 80057fa:	464b      	mov	r3, r9
 80057fc:	4621      	mov	r1, r4
 80057fe:	4640      	mov	r0, r8
 8005800:	f8cd a000 	str.w	sl, [sp]
 8005804:	aa03      	add	r2, sp, #12
 8005806:	f7ff fee1 	bl	80055cc <_printf_common>
 800580a:	3001      	adds	r0, #1
 800580c:	d14a      	bne.n	80058a4 <_printf_i+0x1f4>
 800580e:	f04f 30ff 	mov.w	r0, #4294967295
 8005812:	b004      	add	sp, #16
 8005814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	f043 0320 	orr.w	r3, r3, #32
 800581e:	6023      	str	r3, [r4, #0]
 8005820:	2778      	movs	r7, #120	@ 0x78
 8005822:	4832      	ldr	r0, [pc, #200]	@ (80058ec <_printf_i+0x23c>)
 8005824:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	6831      	ldr	r1, [r6, #0]
 800582c:	061f      	lsls	r7, r3, #24
 800582e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005832:	d402      	bmi.n	800583a <_printf_i+0x18a>
 8005834:	065f      	lsls	r7, r3, #25
 8005836:	bf48      	it	mi
 8005838:	b2ad      	uxthmi	r5, r5
 800583a:	6031      	str	r1, [r6, #0]
 800583c:	07d9      	lsls	r1, r3, #31
 800583e:	bf44      	itt	mi
 8005840:	f043 0320 	orrmi.w	r3, r3, #32
 8005844:	6023      	strmi	r3, [r4, #0]
 8005846:	b11d      	cbz	r5, 8005850 <_printf_i+0x1a0>
 8005848:	2310      	movs	r3, #16
 800584a:	e7ab      	b.n	80057a4 <_printf_i+0xf4>
 800584c:	4826      	ldr	r0, [pc, #152]	@ (80058e8 <_printf_i+0x238>)
 800584e:	e7e9      	b.n	8005824 <_printf_i+0x174>
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	f023 0320 	bic.w	r3, r3, #32
 8005856:	6023      	str	r3, [r4, #0]
 8005858:	e7f6      	b.n	8005848 <_printf_i+0x198>
 800585a:	4616      	mov	r6, r2
 800585c:	e7bd      	b.n	80057da <_printf_i+0x12a>
 800585e:	6833      	ldr	r3, [r6, #0]
 8005860:	6825      	ldr	r5, [r4, #0]
 8005862:	1d18      	adds	r0, r3, #4
 8005864:	6961      	ldr	r1, [r4, #20]
 8005866:	6030      	str	r0, [r6, #0]
 8005868:	062e      	lsls	r6, r5, #24
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	d501      	bpl.n	8005872 <_printf_i+0x1c2>
 800586e:	6019      	str	r1, [r3, #0]
 8005870:	e002      	b.n	8005878 <_printf_i+0x1c8>
 8005872:	0668      	lsls	r0, r5, #25
 8005874:	d5fb      	bpl.n	800586e <_printf_i+0x1be>
 8005876:	8019      	strh	r1, [r3, #0]
 8005878:	2300      	movs	r3, #0
 800587a:	4616      	mov	r6, r2
 800587c:	6123      	str	r3, [r4, #16]
 800587e:	e7bc      	b.n	80057fa <_printf_i+0x14a>
 8005880:	6833      	ldr	r3, [r6, #0]
 8005882:	2100      	movs	r1, #0
 8005884:	1d1a      	adds	r2, r3, #4
 8005886:	6032      	str	r2, [r6, #0]
 8005888:	681e      	ldr	r6, [r3, #0]
 800588a:	6862      	ldr	r2, [r4, #4]
 800588c:	4630      	mov	r0, r6
 800588e:	f000 f9d4 	bl	8005c3a <memchr>
 8005892:	b108      	cbz	r0, 8005898 <_printf_i+0x1e8>
 8005894:	1b80      	subs	r0, r0, r6
 8005896:	6060      	str	r0, [r4, #4]
 8005898:	6863      	ldr	r3, [r4, #4]
 800589a:	6123      	str	r3, [r4, #16]
 800589c:	2300      	movs	r3, #0
 800589e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058a2:	e7aa      	b.n	80057fa <_printf_i+0x14a>
 80058a4:	4632      	mov	r2, r6
 80058a6:	4649      	mov	r1, r9
 80058a8:	4640      	mov	r0, r8
 80058aa:	6923      	ldr	r3, [r4, #16]
 80058ac:	47d0      	blx	sl
 80058ae:	3001      	adds	r0, #1
 80058b0:	d0ad      	beq.n	800580e <_printf_i+0x15e>
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	079b      	lsls	r3, r3, #30
 80058b6:	d413      	bmi.n	80058e0 <_printf_i+0x230>
 80058b8:	68e0      	ldr	r0, [r4, #12]
 80058ba:	9b03      	ldr	r3, [sp, #12]
 80058bc:	4298      	cmp	r0, r3
 80058be:	bfb8      	it	lt
 80058c0:	4618      	movlt	r0, r3
 80058c2:	e7a6      	b.n	8005812 <_printf_i+0x162>
 80058c4:	2301      	movs	r3, #1
 80058c6:	4632      	mov	r2, r6
 80058c8:	4649      	mov	r1, r9
 80058ca:	4640      	mov	r0, r8
 80058cc:	47d0      	blx	sl
 80058ce:	3001      	adds	r0, #1
 80058d0:	d09d      	beq.n	800580e <_printf_i+0x15e>
 80058d2:	3501      	adds	r5, #1
 80058d4:	68e3      	ldr	r3, [r4, #12]
 80058d6:	9903      	ldr	r1, [sp, #12]
 80058d8:	1a5b      	subs	r3, r3, r1
 80058da:	42ab      	cmp	r3, r5
 80058dc:	dcf2      	bgt.n	80058c4 <_printf_i+0x214>
 80058de:	e7eb      	b.n	80058b8 <_printf_i+0x208>
 80058e0:	2500      	movs	r5, #0
 80058e2:	f104 0619 	add.w	r6, r4, #25
 80058e6:	e7f5      	b.n	80058d4 <_printf_i+0x224>
 80058e8:	0800aed4 	.word	0x0800aed4
 80058ec:	0800aee5 	.word	0x0800aee5

080058f0 <std>:
 80058f0:	2300      	movs	r3, #0
 80058f2:	b510      	push	{r4, lr}
 80058f4:	4604      	mov	r4, r0
 80058f6:	e9c0 3300 	strd	r3, r3, [r0]
 80058fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058fe:	6083      	str	r3, [r0, #8]
 8005900:	8181      	strh	r1, [r0, #12]
 8005902:	6643      	str	r3, [r0, #100]	@ 0x64
 8005904:	81c2      	strh	r2, [r0, #14]
 8005906:	6183      	str	r3, [r0, #24]
 8005908:	4619      	mov	r1, r3
 800590a:	2208      	movs	r2, #8
 800590c:	305c      	adds	r0, #92	@ 0x5c
 800590e:	f000 f914 	bl	8005b3a <memset>
 8005912:	4b0d      	ldr	r3, [pc, #52]	@ (8005948 <std+0x58>)
 8005914:	6224      	str	r4, [r4, #32]
 8005916:	6263      	str	r3, [r4, #36]	@ 0x24
 8005918:	4b0c      	ldr	r3, [pc, #48]	@ (800594c <std+0x5c>)
 800591a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800591c:	4b0c      	ldr	r3, [pc, #48]	@ (8005950 <std+0x60>)
 800591e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005920:	4b0c      	ldr	r3, [pc, #48]	@ (8005954 <std+0x64>)
 8005922:	6323      	str	r3, [r4, #48]	@ 0x30
 8005924:	4b0c      	ldr	r3, [pc, #48]	@ (8005958 <std+0x68>)
 8005926:	429c      	cmp	r4, r3
 8005928:	d006      	beq.n	8005938 <std+0x48>
 800592a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800592e:	4294      	cmp	r4, r2
 8005930:	d002      	beq.n	8005938 <std+0x48>
 8005932:	33d0      	adds	r3, #208	@ 0xd0
 8005934:	429c      	cmp	r4, r3
 8005936:	d105      	bne.n	8005944 <std+0x54>
 8005938:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800593c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005940:	f000 b978 	b.w	8005c34 <__retarget_lock_init_recursive>
 8005944:	bd10      	pop	{r4, pc}
 8005946:	bf00      	nop
 8005948:	08005ab5 	.word	0x08005ab5
 800594c:	08005ad7 	.word	0x08005ad7
 8005950:	08005b0f 	.word	0x08005b0f
 8005954:	08005b33 	.word	0x08005b33
 8005958:	20000d08 	.word	0x20000d08

0800595c <stdio_exit_handler>:
 800595c:	4a02      	ldr	r2, [pc, #8]	@ (8005968 <stdio_exit_handler+0xc>)
 800595e:	4903      	ldr	r1, [pc, #12]	@ (800596c <stdio_exit_handler+0x10>)
 8005960:	4803      	ldr	r0, [pc, #12]	@ (8005970 <stdio_exit_handler+0x14>)
 8005962:	f000 b869 	b.w	8005a38 <_fwalk_sglue>
 8005966:	bf00      	nop
 8005968:	20000020 	.word	0x20000020
 800596c:	080075a5 	.word	0x080075a5
 8005970:	20000030 	.word	0x20000030

08005974 <cleanup_stdio>:
 8005974:	6841      	ldr	r1, [r0, #4]
 8005976:	4b0c      	ldr	r3, [pc, #48]	@ (80059a8 <cleanup_stdio+0x34>)
 8005978:	b510      	push	{r4, lr}
 800597a:	4299      	cmp	r1, r3
 800597c:	4604      	mov	r4, r0
 800597e:	d001      	beq.n	8005984 <cleanup_stdio+0x10>
 8005980:	f001 fe10 	bl	80075a4 <_fflush_r>
 8005984:	68a1      	ldr	r1, [r4, #8]
 8005986:	4b09      	ldr	r3, [pc, #36]	@ (80059ac <cleanup_stdio+0x38>)
 8005988:	4299      	cmp	r1, r3
 800598a:	d002      	beq.n	8005992 <cleanup_stdio+0x1e>
 800598c:	4620      	mov	r0, r4
 800598e:	f001 fe09 	bl	80075a4 <_fflush_r>
 8005992:	68e1      	ldr	r1, [r4, #12]
 8005994:	4b06      	ldr	r3, [pc, #24]	@ (80059b0 <cleanup_stdio+0x3c>)
 8005996:	4299      	cmp	r1, r3
 8005998:	d004      	beq.n	80059a4 <cleanup_stdio+0x30>
 800599a:	4620      	mov	r0, r4
 800599c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059a0:	f001 be00 	b.w	80075a4 <_fflush_r>
 80059a4:	bd10      	pop	{r4, pc}
 80059a6:	bf00      	nop
 80059a8:	20000d08 	.word	0x20000d08
 80059ac:	20000d70 	.word	0x20000d70
 80059b0:	20000dd8 	.word	0x20000dd8

080059b4 <global_stdio_init.part.0>:
 80059b4:	b510      	push	{r4, lr}
 80059b6:	4b0b      	ldr	r3, [pc, #44]	@ (80059e4 <global_stdio_init.part.0+0x30>)
 80059b8:	4c0b      	ldr	r4, [pc, #44]	@ (80059e8 <global_stdio_init.part.0+0x34>)
 80059ba:	4a0c      	ldr	r2, [pc, #48]	@ (80059ec <global_stdio_init.part.0+0x38>)
 80059bc:	4620      	mov	r0, r4
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	2104      	movs	r1, #4
 80059c2:	2200      	movs	r2, #0
 80059c4:	f7ff ff94 	bl	80058f0 <std>
 80059c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80059cc:	2201      	movs	r2, #1
 80059ce:	2109      	movs	r1, #9
 80059d0:	f7ff ff8e 	bl	80058f0 <std>
 80059d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80059d8:	2202      	movs	r2, #2
 80059da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059de:	2112      	movs	r1, #18
 80059e0:	f7ff bf86 	b.w	80058f0 <std>
 80059e4:	20000e40 	.word	0x20000e40
 80059e8:	20000d08 	.word	0x20000d08
 80059ec:	0800595d 	.word	0x0800595d

080059f0 <__sfp_lock_acquire>:
 80059f0:	4801      	ldr	r0, [pc, #4]	@ (80059f8 <__sfp_lock_acquire+0x8>)
 80059f2:	f000 b920 	b.w	8005c36 <__retarget_lock_acquire_recursive>
 80059f6:	bf00      	nop
 80059f8:	20000e49 	.word	0x20000e49

080059fc <__sfp_lock_release>:
 80059fc:	4801      	ldr	r0, [pc, #4]	@ (8005a04 <__sfp_lock_release+0x8>)
 80059fe:	f000 b91b 	b.w	8005c38 <__retarget_lock_release_recursive>
 8005a02:	bf00      	nop
 8005a04:	20000e49 	.word	0x20000e49

08005a08 <__sinit>:
 8005a08:	b510      	push	{r4, lr}
 8005a0a:	4604      	mov	r4, r0
 8005a0c:	f7ff fff0 	bl	80059f0 <__sfp_lock_acquire>
 8005a10:	6a23      	ldr	r3, [r4, #32]
 8005a12:	b11b      	cbz	r3, 8005a1c <__sinit+0x14>
 8005a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a18:	f7ff bff0 	b.w	80059fc <__sfp_lock_release>
 8005a1c:	4b04      	ldr	r3, [pc, #16]	@ (8005a30 <__sinit+0x28>)
 8005a1e:	6223      	str	r3, [r4, #32]
 8005a20:	4b04      	ldr	r3, [pc, #16]	@ (8005a34 <__sinit+0x2c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1f5      	bne.n	8005a14 <__sinit+0xc>
 8005a28:	f7ff ffc4 	bl	80059b4 <global_stdio_init.part.0>
 8005a2c:	e7f2      	b.n	8005a14 <__sinit+0xc>
 8005a2e:	bf00      	nop
 8005a30:	08005975 	.word	0x08005975
 8005a34:	20000e40 	.word	0x20000e40

08005a38 <_fwalk_sglue>:
 8005a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a3c:	4607      	mov	r7, r0
 8005a3e:	4688      	mov	r8, r1
 8005a40:	4614      	mov	r4, r2
 8005a42:	2600      	movs	r6, #0
 8005a44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a48:	f1b9 0901 	subs.w	r9, r9, #1
 8005a4c:	d505      	bpl.n	8005a5a <_fwalk_sglue+0x22>
 8005a4e:	6824      	ldr	r4, [r4, #0]
 8005a50:	2c00      	cmp	r4, #0
 8005a52:	d1f7      	bne.n	8005a44 <_fwalk_sglue+0xc>
 8005a54:	4630      	mov	r0, r6
 8005a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a5a:	89ab      	ldrh	r3, [r5, #12]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d907      	bls.n	8005a70 <_fwalk_sglue+0x38>
 8005a60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a64:	3301      	adds	r3, #1
 8005a66:	d003      	beq.n	8005a70 <_fwalk_sglue+0x38>
 8005a68:	4629      	mov	r1, r5
 8005a6a:	4638      	mov	r0, r7
 8005a6c:	47c0      	blx	r8
 8005a6e:	4306      	orrs	r6, r0
 8005a70:	3568      	adds	r5, #104	@ 0x68
 8005a72:	e7e9      	b.n	8005a48 <_fwalk_sglue+0x10>

08005a74 <siprintf>:
 8005a74:	b40e      	push	{r1, r2, r3}
 8005a76:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005a7a:	b500      	push	{lr}
 8005a7c:	b09c      	sub	sp, #112	@ 0x70
 8005a7e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005a80:	9002      	str	r0, [sp, #8]
 8005a82:	9006      	str	r0, [sp, #24]
 8005a84:	9107      	str	r1, [sp, #28]
 8005a86:	9104      	str	r1, [sp, #16]
 8005a88:	4808      	ldr	r0, [pc, #32]	@ (8005aac <siprintf+0x38>)
 8005a8a:	4909      	ldr	r1, [pc, #36]	@ (8005ab0 <siprintf+0x3c>)
 8005a8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a90:	9105      	str	r1, [sp, #20]
 8005a92:	6800      	ldr	r0, [r0, #0]
 8005a94:	a902      	add	r1, sp, #8
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	f001 fc08 	bl	80072ac <_svfiprintf_r>
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	9b02      	ldr	r3, [sp, #8]
 8005aa0:	701a      	strb	r2, [r3, #0]
 8005aa2:	b01c      	add	sp, #112	@ 0x70
 8005aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005aa8:	b003      	add	sp, #12
 8005aaa:	4770      	bx	lr
 8005aac:	2000002c 	.word	0x2000002c
 8005ab0:	ffff0208 	.word	0xffff0208

08005ab4 <__sread>:
 8005ab4:	b510      	push	{r4, lr}
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005abc:	f000 f86c 	bl	8005b98 <_read_r>
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	bfab      	itete	ge
 8005ac4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005ac6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ac8:	181b      	addge	r3, r3, r0
 8005aca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005ace:	bfac      	ite	ge
 8005ad0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005ad2:	81a3      	strhlt	r3, [r4, #12]
 8005ad4:	bd10      	pop	{r4, pc}

08005ad6 <__swrite>:
 8005ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ada:	461f      	mov	r7, r3
 8005adc:	898b      	ldrh	r3, [r1, #12]
 8005ade:	4605      	mov	r5, r0
 8005ae0:	05db      	lsls	r3, r3, #23
 8005ae2:	460c      	mov	r4, r1
 8005ae4:	4616      	mov	r6, r2
 8005ae6:	d505      	bpl.n	8005af4 <__swrite+0x1e>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	2200      	movs	r2, #0
 8005aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005af0:	f000 f840 	bl	8005b74 <_lseek_r>
 8005af4:	89a3      	ldrh	r3, [r4, #12]
 8005af6:	4632      	mov	r2, r6
 8005af8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005afc:	81a3      	strh	r3, [r4, #12]
 8005afe:	4628      	mov	r0, r5
 8005b00:	463b      	mov	r3, r7
 8005b02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b0a:	f000 b857 	b.w	8005bbc <_write_r>

08005b0e <__sseek>:
 8005b0e:	b510      	push	{r4, lr}
 8005b10:	460c      	mov	r4, r1
 8005b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b16:	f000 f82d 	bl	8005b74 <_lseek_r>
 8005b1a:	1c43      	adds	r3, r0, #1
 8005b1c:	89a3      	ldrh	r3, [r4, #12]
 8005b1e:	bf15      	itete	ne
 8005b20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b2a:	81a3      	strheq	r3, [r4, #12]
 8005b2c:	bf18      	it	ne
 8005b2e:	81a3      	strhne	r3, [r4, #12]
 8005b30:	bd10      	pop	{r4, pc}

08005b32 <__sclose>:
 8005b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b36:	f000 b80d 	b.w	8005b54 <_close_r>

08005b3a <memset>:
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	4402      	add	r2, r0
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d100      	bne.n	8005b44 <memset+0xa>
 8005b42:	4770      	bx	lr
 8005b44:	f803 1b01 	strb.w	r1, [r3], #1
 8005b48:	e7f9      	b.n	8005b3e <memset+0x4>
	...

08005b4c <_localeconv_r>:
 8005b4c:	4800      	ldr	r0, [pc, #0]	@ (8005b50 <_localeconv_r+0x4>)
 8005b4e:	4770      	bx	lr
 8005b50:	2000016c 	.word	0x2000016c

08005b54 <_close_r>:
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	2300      	movs	r3, #0
 8005b58:	4d05      	ldr	r5, [pc, #20]	@ (8005b70 <_close_r+0x1c>)
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	4608      	mov	r0, r1
 8005b5e:	602b      	str	r3, [r5, #0]
 8005b60:	f7fc fe40 	bl	80027e4 <_close>
 8005b64:	1c43      	adds	r3, r0, #1
 8005b66:	d102      	bne.n	8005b6e <_close_r+0x1a>
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	b103      	cbz	r3, 8005b6e <_close_r+0x1a>
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	bd38      	pop	{r3, r4, r5, pc}
 8005b70:	20000e44 	.word	0x20000e44

08005b74 <_lseek_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4604      	mov	r4, r0
 8005b78:	4608      	mov	r0, r1
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	4d05      	ldr	r5, [pc, #20]	@ (8005b94 <_lseek_r+0x20>)
 8005b80:	602a      	str	r2, [r5, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f7fc fe38 	bl	80027f8 <_lseek>
 8005b88:	1c43      	adds	r3, r0, #1
 8005b8a:	d102      	bne.n	8005b92 <_lseek_r+0x1e>
 8005b8c:	682b      	ldr	r3, [r5, #0]
 8005b8e:	b103      	cbz	r3, 8005b92 <_lseek_r+0x1e>
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	bd38      	pop	{r3, r4, r5, pc}
 8005b94:	20000e44 	.word	0x20000e44

08005b98 <_read_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	4604      	mov	r4, r0
 8005b9c:	4608      	mov	r0, r1
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	4d05      	ldr	r5, [pc, #20]	@ (8005bb8 <_read_r+0x20>)
 8005ba4:	602a      	str	r2, [r5, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f7fc fe00 	bl	80027ac <_read>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	d102      	bne.n	8005bb6 <_read_r+0x1e>
 8005bb0:	682b      	ldr	r3, [r5, #0]
 8005bb2:	b103      	cbz	r3, 8005bb6 <_read_r+0x1e>
 8005bb4:	6023      	str	r3, [r4, #0]
 8005bb6:	bd38      	pop	{r3, r4, r5, pc}
 8005bb8:	20000e44 	.word	0x20000e44

08005bbc <_write_r>:
 8005bbc:	b538      	push	{r3, r4, r5, lr}
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	4d05      	ldr	r5, [pc, #20]	@ (8005bdc <_write_r+0x20>)
 8005bc8:	602a      	str	r2, [r5, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f7fc fdfc 	bl	80027c8 <_write>
 8005bd0:	1c43      	adds	r3, r0, #1
 8005bd2:	d102      	bne.n	8005bda <_write_r+0x1e>
 8005bd4:	682b      	ldr	r3, [r5, #0]
 8005bd6:	b103      	cbz	r3, 8005bda <_write_r+0x1e>
 8005bd8:	6023      	str	r3, [r4, #0]
 8005bda:	bd38      	pop	{r3, r4, r5, pc}
 8005bdc:	20000e44 	.word	0x20000e44

08005be0 <__errno>:
 8005be0:	4b01      	ldr	r3, [pc, #4]	@ (8005be8 <__errno+0x8>)
 8005be2:	6818      	ldr	r0, [r3, #0]
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	2000002c 	.word	0x2000002c

08005bec <__libc_init_array>:
 8005bec:	b570      	push	{r4, r5, r6, lr}
 8005bee:	2600      	movs	r6, #0
 8005bf0:	4d0c      	ldr	r5, [pc, #48]	@ (8005c24 <__libc_init_array+0x38>)
 8005bf2:	4c0d      	ldr	r4, [pc, #52]	@ (8005c28 <__libc_init_array+0x3c>)
 8005bf4:	1b64      	subs	r4, r4, r5
 8005bf6:	10a4      	asrs	r4, r4, #2
 8005bf8:	42a6      	cmp	r6, r4
 8005bfa:	d109      	bne.n	8005c10 <__libc_init_array+0x24>
 8005bfc:	f003 f88c 	bl	8008d18 <_init>
 8005c00:	2600      	movs	r6, #0
 8005c02:	4d0a      	ldr	r5, [pc, #40]	@ (8005c2c <__libc_init_array+0x40>)
 8005c04:	4c0a      	ldr	r4, [pc, #40]	@ (8005c30 <__libc_init_array+0x44>)
 8005c06:	1b64      	subs	r4, r4, r5
 8005c08:	10a4      	asrs	r4, r4, #2
 8005c0a:	42a6      	cmp	r6, r4
 8005c0c:	d105      	bne.n	8005c1a <__libc_init_array+0x2e>
 8005c0e:	bd70      	pop	{r4, r5, r6, pc}
 8005c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c14:	4798      	blx	r3
 8005c16:	3601      	adds	r6, #1
 8005c18:	e7ee      	b.n	8005bf8 <__libc_init_array+0xc>
 8005c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c1e:	4798      	blx	r3
 8005c20:	3601      	adds	r6, #1
 8005c22:	e7f2      	b.n	8005c0a <__libc_init_array+0x1e>
 8005c24:	0800b410 	.word	0x0800b410
 8005c28:	0800b410 	.word	0x0800b410
 8005c2c:	0800b410 	.word	0x0800b410
 8005c30:	0800b414 	.word	0x0800b414

08005c34 <__retarget_lock_init_recursive>:
 8005c34:	4770      	bx	lr

08005c36 <__retarget_lock_acquire_recursive>:
 8005c36:	4770      	bx	lr

08005c38 <__retarget_lock_release_recursive>:
 8005c38:	4770      	bx	lr

08005c3a <memchr>:
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	b510      	push	{r4, lr}
 8005c3e:	b2c9      	uxtb	r1, r1
 8005c40:	4402      	add	r2, r0
 8005c42:	4293      	cmp	r3, r2
 8005c44:	4618      	mov	r0, r3
 8005c46:	d101      	bne.n	8005c4c <memchr+0x12>
 8005c48:	2000      	movs	r0, #0
 8005c4a:	e003      	b.n	8005c54 <memchr+0x1a>
 8005c4c:	7804      	ldrb	r4, [r0, #0]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	428c      	cmp	r4, r1
 8005c52:	d1f6      	bne.n	8005c42 <memchr+0x8>
 8005c54:	bd10      	pop	{r4, pc}

08005c56 <quorem>:
 8005c56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c5a:	6903      	ldr	r3, [r0, #16]
 8005c5c:	690c      	ldr	r4, [r1, #16]
 8005c5e:	4607      	mov	r7, r0
 8005c60:	42a3      	cmp	r3, r4
 8005c62:	db7e      	blt.n	8005d62 <quorem+0x10c>
 8005c64:	3c01      	subs	r4, #1
 8005c66:	00a3      	lsls	r3, r4, #2
 8005c68:	f100 0514 	add.w	r5, r0, #20
 8005c6c:	f101 0814 	add.w	r8, r1, #20
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c80:	3301      	adds	r3, #1
 8005c82:	429a      	cmp	r2, r3
 8005c84:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c8c:	d32e      	bcc.n	8005cec <quorem+0x96>
 8005c8e:	f04f 0a00 	mov.w	sl, #0
 8005c92:	46c4      	mov	ip, r8
 8005c94:	46ae      	mov	lr, r5
 8005c96:	46d3      	mov	fp, sl
 8005c98:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005c9c:	b298      	uxth	r0, r3
 8005c9e:	fb06 a000 	mla	r0, r6, r0, sl
 8005ca2:	0c1b      	lsrs	r3, r3, #16
 8005ca4:	0c02      	lsrs	r2, r0, #16
 8005ca6:	fb06 2303 	mla	r3, r6, r3, r2
 8005caa:	f8de 2000 	ldr.w	r2, [lr]
 8005cae:	b280      	uxth	r0, r0
 8005cb0:	b292      	uxth	r2, r2
 8005cb2:	1a12      	subs	r2, r2, r0
 8005cb4:	445a      	add	r2, fp
 8005cb6:	f8de 0000 	ldr.w	r0, [lr]
 8005cba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005cc4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005cc8:	b292      	uxth	r2, r2
 8005cca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005cce:	45e1      	cmp	r9, ip
 8005cd0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005cd4:	f84e 2b04 	str.w	r2, [lr], #4
 8005cd8:	d2de      	bcs.n	8005c98 <quorem+0x42>
 8005cda:	9b00      	ldr	r3, [sp, #0]
 8005cdc:	58eb      	ldr	r3, [r5, r3]
 8005cde:	b92b      	cbnz	r3, 8005cec <quorem+0x96>
 8005ce0:	9b01      	ldr	r3, [sp, #4]
 8005ce2:	3b04      	subs	r3, #4
 8005ce4:	429d      	cmp	r5, r3
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	d32f      	bcc.n	8005d4a <quorem+0xf4>
 8005cea:	613c      	str	r4, [r7, #16]
 8005cec:	4638      	mov	r0, r7
 8005cee:	f001 f979 	bl	8006fe4 <__mcmp>
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	db25      	blt.n	8005d42 <quorem+0xec>
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	f858 2b04 	ldr.w	r2, [r8], #4
 8005cfe:	f8d1 c000 	ldr.w	ip, [r1]
 8005d02:	fa1f fe82 	uxth.w	lr, r2
 8005d06:	fa1f f38c 	uxth.w	r3, ip
 8005d0a:	eba3 030e 	sub.w	r3, r3, lr
 8005d0e:	4403      	add	r3, r0
 8005d10:	0c12      	lsrs	r2, r2, #16
 8005d12:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005d16:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d20:	45c1      	cmp	r9, r8
 8005d22:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d26:	f841 3b04 	str.w	r3, [r1], #4
 8005d2a:	d2e6      	bcs.n	8005cfa <quorem+0xa4>
 8005d2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d34:	b922      	cbnz	r2, 8005d40 <quorem+0xea>
 8005d36:	3b04      	subs	r3, #4
 8005d38:	429d      	cmp	r5, r3
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	d30b      	bcc.n	8005d56 <quorem+0x100>
 8005d3e:	613c      	str	r4, [r7, #16]
 8005d40:	3601      	adds	r6, #1
 8005d42:	4630      	mov	r0, r6
 8005d44:	b003      	add	sp, #12
 8005d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d4a:	6812      	ldr	r2, [r2, #0]
 8005d4c:	3b04      	subs	r3, #4
 8005d4e:	2a00      	cmp	r2, #0
 8005d50:	d1cb      	bne.n	8005cea <quorem+0x94>
 8005d52:	3c01      	subs	r4, #1
 8005d54:	e7c6      	b.n	8005ce4 <quorem+0x8e>
 8005d56:	6812      	ldr	r2, [r2, #0]
 8005d58:	3b04      	subs	r3, #4
 8005d5a:	2a00      	cmp	r2, #0
 8005d5c:	d1ef      	bne.n	8005d3e <quorem+0xe8>
 8005d5e:	3c01      	subs	r4, #1
 8005d60:	e7ea      	b.n	8005d38 <quorem+0xe2>
 8005d62:	2000      	movs	r0, #0
 8005d64:	e7ee      	b.n	8005d44 <quorem+0xee>
	...

08005d68 <_dtoa_r>:
 8005d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6c:	4614      	mov	r4, r2
 8005d6e:	461d      	mov	r5, r3
 8005d70:	69c7      	ldr	r7, [r0, #28]
 8005d72:	b097      	sub	sp, #92	@ 0x5c
 8005d74:	4683      	mov	fp, r0
 8005d76:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005d7a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005d7c:	b97f      	cbnz	r7, 8005d9e <_dtoa_r+0x36>
 8005d7e:	2010      	movs	r0, #16
 8005d80:	f000 fe02 	bl	8006988 <malloc>
 8005d84:	4602      	mov	r2, r0
 8005d86:	f8cb 001c 	str.w	r0, [fp, #28]
 8005d8a:	b920      	cbnz	r0, 8005d96 <_dtoa_r+0x2e>
 8005d8c:	21ef      	movs	r1, #239	@ 0xef
 8005d8e:	4ba8      	ldr	r3, [pc, #672]	@ (8006030 <_dtoa_r+0x2c8>)
 8005d90:	48a8      	ldr	r0, [pc, #672]	@ (8006034 <_dtoa_r+0x2cc>)
 8005d92:	f001 fc67 	bl	8007664 <__assert_func>
 8005d96:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005d9a:	6007      	str	r7, [r0, #0]
 8005d9c:	60c7      	str	r7, [r0, #12]
 8005d9e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005da2:	6819      	ldr	r1, [r3, #0]
 8005da4:	b159      	cbz	r1, 8005dbe <_dtoa_r+0x56>
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	2301      	movs	r3, #1
 8005daa:	4093      	lsls	r3, r2
 8005dac:	604a      	str	r2, [r1, #4]
 8005dae:	608b      	str	r3, [r1, #8]
 8005db0:	4658      	mov	r0, fp
 8005db2:	f000 fedf 	bl	8006b74 <_Bfree>
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	1e2b      	subs	r3, r5, #0
 8005dc0:	bfaf      	iteee	ge
 8005dc2:	2300      	movge	r3, #0
 8005dc4:	2201      	movlt	r2, #1
 8005dc6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005dca:	9303      	strlt	r3, [sp, #12]
 8005dcc:	bfa8      	it	ge
 8005dce:	6033      	strge	r3, [r6, #0]
 8005dd0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005dd4:	4b98      	ldr	r3, [pc, #608]	@ (8006038 <_dtoa_r+0x2d0>)
 8005dd6:	bfb8      	it	lt
 8005dd8:	6032      	strlt	r2, [r6, #0]
 8005dda:	ea33 0308 	bics.w	r3, r3, r8
 8005dde:	d112      	bne.n	8005e06 <_dtoa_r+0x9e>
 8005de0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005de4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005dec:	4323      	orrs	r3, r4
 8005dee:	f000 8550 	beq.w	8006892 <_dtoa_r+0xb2a>
 8005df2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005df4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800603c <_dtoa_r+0x2d4>
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 8552 	beq.w	80068a2 <_dtoa_r+0xb3a>
 8005dfe:	f10a 0303 	add.w	r3, sl, #3
 8005e02:	f000 bd4c 	b.w	800689e <_dtoa_r+0xb36>
 8005e06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e0a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005e0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e12:	2200      	movs	r2, #0
 8005e14:	2300      	movs	r3, #0
 8005e16:	f7fa fe7b 	bl	8000b10 <__aeabi_dcmpeq>
 8005e1a:	4607      	mov	r7, r0
 8005e1c:	b158      	cbz	r0, 8005e36 <_dtoa_r+0xce>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e26:	b113      	cbz	r3, 8005e2e <_dtoa_r+0xc6>
 8005e28:	4b85      	ldr	r3, [pc, #532]	@ (8006040 <_dtoa_r+0x2d8>)
 8005e2a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006044 <_dtoa_r+0x2dc>
 8005e32:	f000 bd36 	b.w	80068a2 <_dtoa_r+0xb3a>
 8005e36:	ab14      	add	r3, sp, #80	@ 0x50
 8005e38:	9301      	str	r3, [sp, #4]
 8005e3a:	ab15      	add	r3, sp, #84	@ 0x54
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	4658      	mov	r0, fp
 8005e40:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005e44:	f001 f97e 	bl	8007144 <__d2b>
 8005e48:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005e4c:	4681      	mov	r9, r0
 8005e4e:	2e00      	cmp	r6, #0
 8005e50:	d077      	beq.n	8005f42 <_dtoa_r+0x1da>
 8005e52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e58:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e60:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005e64:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005e68:	9712      	str	r7, [sp, #72]	@ 0x48
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	4b76      	ldr	r3, [pc, #472]	@ (8006048 <_dtoa_r+0x2e0>)
 8005e70:	f7fa fa2e 	bl	80002d0 <__aeabi_dsub>
 8005e74:	a368      	add	r3, pc, #416	@ (adr r3, 8006018 <_dtoa_r+0x2b0>)
 8005e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7a:	f7fa fbe1 	bl	8000640 <__aeabi_dmul>
 8005e7e:	a368      	add	r3, pc, #416	@ (adr r3, 8006020 <_dtoa_r+0x2b8>)
 8005e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e84:	f7fa fa26 	bl	80002d4 <__adddf3>
 8005e88:	4604      	mov	r4, r0
 8005e8a:	4630      	mov	r0, r6
 8005e8c:	460d      	mov	r5, r1
 8005e8e:	f7fa fb6d 	bl	800056c <__aeabi_i2d>
 8005e92:	a365      	add	r3, pc, #404	@ (adr r3, 8006028 <_dtoa_r+0x2c0>)
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	f7fa fbd2 	bl	8000640 <__aeabi_dmul>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	f7fa fa16 	bl	80002d4 <__adddf3>
 8005ea8:	4604      	mov	r4, r0
 8005eaa:	460d      	mov	r5, r1
 8005eac:	f7fa fe78 	bl	8000ba0 <__aeabi_d2iz>
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	4607      	mov	r7, r0
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	4629      	mov	r1, r5
 8005eba:	f7fa fe33 	bl	8000b24 <__aeabi_dcmplt>
 8005ebe:	b140      	cbz	r0, 8005ed2 <_dtoa_r+0x16a>
 8005ec0:	4638      	mov	r0, r7
 8005ec2:	f7fa fb53 	bl	800056c <__aeabi_i2d>
 8005ec6:	4622      	mov	r2, r4
 8005ec8:	462b      	mov	r3, r5
 8005eca:	f7fa fe21 	bl	8000b10 <__aeabi_dcmpeq>
 8005ece:	b900      	cbnz	r0, 8005ed2 <_dtoa_r+0x16a>
 8005ed0:	3f01      	subs	r7, #1
 8005ed2:	2f16      	cmp	r7, #22
 8005ed4:	d853      	bhi.n	8005f7e <_dtoa_r+0x216>
 8005ed6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005eda:	4b5c      	ldr	r3, [pc, #368]	@ (800604c <_dtoa_r+0x2e4>)
 8005edc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	f7fa fe1e 	bl	8000b24 <__aeabi_dcmplt>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	d04a      	beq.n	8005f82 <_dtoa_r+0x21a>
 8005eec:	2300      	movs	r3, #0
 8005eee:	3f01      	subs	r7, #1
 8005ef0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005ef2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005ef4:	1b9b      	subs	r3, r3, r6
 8005ef6:	1e5a      	subs	r2, r3, #1
 8005ef8:	bf46      	itte	mi
 8005efa:	f1c3 0801 	rsbmi	r8, r3, #1
 8005efe:	2300      	movmi	r3, #0
 8005f00:	f04f 0800 	movpl.w	r8, #0
 8005f04:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f06:	bf48      	it	mi
 8005f08:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005f0a:	2f00      	cmp	r7, #0
 8005f0c:	db3b      	blt.n	8005f86 <_dtoa_r+0x21e>
 8005f0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f10:	970e      	str	r7, [sp, #56]	@ 0x38
 8005f12:	443b      	add	r3, r7
 8005f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f16:	2300      	movs	r3, #0
 8005f18:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f1c:	2b09      	cmp	r3, #9
 8005f1e:	d866      	bhi.n	8005fee <_dtoa_r+0x286>
 8005f20:	2b05      	cmp	r3, #5
 8005f22:	bfc4      	itt	gt
 8005f24:	3b04      	subgt	r3, #4
 8005f26:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005f28:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f2a:	bfc8      	it	gt
 8005f2c:	2400      	movgt	r4, #0
 8005f2e:	f1a3 0302 	sub.w	r3, r3, #2
 8005f32:	bfd8      	it	le
 8005f34:	2401      	movle	r4, #1
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d864      	bhi.n	8006004 <_dtoa_r+0x29c>
 8005f3a:	e8df f003 	tbb	[pc, r3]
 8005f3e:	382b      	.short	0x382b
 8005f40:	5636      	.short	0x5636
 8005f42:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005f46:	441e      	add	r6, r3
 8005f48:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005f4c:	2b20      	cmp	r3, #32
 8005f4e:	bfc1      	itttt	gt
 8005f50:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005f54:	fa08 f803 	lslgt.w	r8, r8, r3
 8005f58:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005f5c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005f60:	bfd6      	itet	le
 8005f62:	f1c3 0320 	rsble	r3, r3, #32
 8005f66:	ea48 0003 	orrgt.w	r0, r8, r3
 8005f6a:	fa04 f003 	lslle.w	r0, r4, r3
 8005f6e:	f7fa faed 	bl	800054c <__aeabi_ui2d>
 8005f72:	2201      	movs	r2, #1
 8005f74:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005f78:	3e01      	subs	r6, #1
 8005f7a:	9212      	str	r2, [sp, #72]	@ 0x48
 8005f7c:	e775      	b.n	8005e6a <_dtoa_r+0x102>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e7b6      	b.n	8005ef0 <_dtoa_r+0x188>
 8005f82:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005f84:	e7b5      	b.n	8005ef2 <_dtoa_r+0x18a>
 8005f86:	427b      	negs	r3, r7
 8005f88:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	eba8 0807 	sub.w	r8, r8, r7
 8005f90:	930e      	str	r3, [sp, #56]	@ 0x38
 8005f92:	e7c2      	b.n	8005f1a <_dtoa_r+0x1b2>
 8005f94:	2300      	movs	r3, #0
 8005f96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	dc35      	bgt.n	800600a <_dtoa_r+0x2a2>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005fa6:	9221      	str	r2, [sp, #132]	@ 0x84
 8005fa8:	e00b      	b.n	8005fc2 <_dtoa_r+0x25a>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e7f3      	b.n	8005f96 <_dtoa_r+0x22e>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fb2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005fb4:	18fb      	adds	r3, r7, r3
 8005fb6:	9308      	str	r3, [sp, #32]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	9307      	str	r3, [sp, #28]
 8005fbe:	bfb8      	it	lt
 8005fc0:	2301      	movlt	r3, #1
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	2204      	movs	r2, #4
 8005fc6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005fca:	f102 0514 	add.w	r5, r2, #20
 8005fce:	429d      	cmp	r5, r3
 8005fd0:	d91f      	bls.n	8006012 <_dtoa_r+0x2aa>
 8005fd2:	6041      	str	r1, [r0, #4]
 8005fd4:	4658      	mov	r0, fp
 8005fd6:	f000 fd8d 	bl	8006af4 <_Balloc>
 8005fda:	4682      	mov	sl, r0
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d139      	bne.n	8006054 <_dtoa_r+0x2ec>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	f240 11af 	movw	r1, #431	@ 0x1af
 8005fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8006050 <_dtoa_r+0x2e8>)
 8005fe8:	e6d2      	b.n	8005d90 <_dtoa_r+0x28>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e7e0      	b.n	8005fb0 <_dtoa_r+0x248>
 8005fee:	2401      	movs	r4, #1
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005ff4:	9320      	str	r3, [sp, #128]	@ 0x80
 8005ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006000:	2312      	movs	r3, #18
 8006002:	e7d0      	b.n	8005fa6 <_dtoa_r+0x23e>
 8006004:	2301      	movs	r3, #1
 8006006:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006008:	e7f5      	b.n	8005ff6 <_dtoa_r+0x28e>
 800600a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800600c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006010:	e7d7      	b.n	8005fc2 <_dtoa_r+0x25a>
 8006012:	3101      	adds	r1, #1
 8006014:	0052      	lsls	r2, r2, #1
 8006016:	e7d8      	b.n	8005fca <_dtoa_r+0x262>
 8006018:	636f4361 	.word	0x636f4361
 800601c:	3fd287a7 	.word	0x3fd287a7
 8006020:	8b60c8b3 	.word	0x8b60c8b3
 8006024:	3fc68a28 	.word	0x3fc68a28
 8006028:	509f79fb 	.word	0x509f79fb
 800602c:	3fd34413 	.word	0x3fd34413
 8006030:	0800af03 	.word	0x0800af03
 8006034:	0800af1a 	.word	0x0800af1a
 8006038:	7ff00000 	.word	0x7ff00000
 800603c:	0800aeff 	.word	0x0800aeff
 8006040:	0800aed3 	.word	0x0800aed3
 8006044:	0800aed2 	.word	0x0800aed2
 8006048:	3ff80000 	.word	0x3ff80000
 800604c:	0800b010 	.word	0x0800b010
 8006050:	0800af72 	.word	0x0800af72
 8006054:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006058:	6018      	str	r0, [r3, #0]
 800605a:	9b07      	ldr	r3, [sp, #28]
 800605c:	2b0e      	cmp	r3, #14
 800605e:	f200 80a4 	bhi.w	80061aa <_dtoa_r+0x442>
 8006062:	2c00      	cmp	r4, #0
 8006064:	f000 80a1 	beq.w	80061aa <_dtoa_r+0x442>
 8006068:	2f00      	cmp	r7, #0
 800606a:	dd33      	ble.n	80060d4 <_dtoa_r+0x36c>
 800606c:	4b86      	ldr	r3, [pc, #536]	@ (8006288 <_dtoa_r+0x520>)
 800606e:	f007 020f 	and.w	r2, r7, #15
 8006072:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006076:	05f8      	lsls	r0, r7, #23
 8006078:	e9d3 3400 	ldrd	r3, r4, [r3]
 800607c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006080:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006084:	d516      	bpl.n	80060b4 <_dtoa_r+0x34c>
 8006086:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800608a:	4b80      	ldr	r3, [pc, #512]	@ (800628c <_dtoa_r+0x524>)
 800608c:	2603      	movs	r6, #3
 800608e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006092:	f7fa fbff 	bl	8000894 <__aeabi_ddiv>
 8006096:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800609a:	f004 040f 	and.w	r4, r4, #15
 800609e:	4d7b      	ldr	r5, [pc, #492]	@ (800628c <_dtoa_r+0x524>)
 80060a0:	b954      	cbnz	r4, 80060b8 <_dtoa_r+0x350>
 80060a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060aa:	f7fa fbf3 	bl	8000894 <__aeabi_ddiv>
 80060ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060b2:	e028      	b.n	8006106 <_dtoa_r+0x39e>
 80060b4:	2602      	movs	r6, #2
 80060b6:	e7f2      	b.n	800609e <_dtoa_r+0x336>
 80060b8:	07e1      	lsls	r1, r4, #31
 80060ba:	d508      	bpl.n	80060ce <_dtoa_r+0x366>
 80060bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060c4:	f7fa fabc 	bl	8000640 <__aeabi_dmul>
 80060c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060cc:	3601      	adds	r6, #1
 80060ce:	1064      	asrs	r4, r4, #1
 80060d0:	3508      	adds	r5, #8
 80060d2:	e7e5      	b.n	80060a0 <_dtoa_r+0x338>
 80060d4:	f000 80d2 	beq.w	800627c <_dtoa_r+0x514>
 80060d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060dc:	427c      	negs	r4, r7
 80060de:	4b6a      	ldr	r3, [pc, #424]	@ (8006288 <_dtoa_r+0x520>)
 80060e0:	f004 020f 	and.w	r2, r4, #15
 80060e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	f7fa faa8 	bl	8000640 <__aeabi_dmul>
 80060f0:	2602      	movs	r6, #2
 80060f2:	2300      	movs	r3, #0
 80060f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060f8:	4d64      	ldr	r5, [pc, #400]	@ (800628c <_dtoa_r+0x524>)
 80060fa:	1124      	asrs	r4, r4, #4
 80060fc:	2c00      	cmp	r4, #0
 80060fe:	f040 80b2 	bne.w	8006266 <_dtoa_r+0x4fe>
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1d3      	bne.n	80060ae <_dtoa_r+0x346>
 8006106:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800610a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 80b7 	beq.w	8006280 <_dtoa_r+0x518>
 8006112:	2200      	movs	r2, #0
 8006114:	4620      	mov	r0, r4
 8006116:	4629      	mov	r1, r5
 8006118:	4b5d      	ldr	r3, [pc, #372]	@ (8006290 <_dtoa_r+0x528>)
 800611a:	f7fa fd03 	bl	8000b24 <__aeabi_dcmplt>
 800611e:	2800      	cmp	r0, #0
 8006120:	f000 80ae 	beq.w	8006280 <_dtoa_r+0x518>
 8006124:	9b07      	ldr	r3, [sp, #28]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 80aa 	beq.w	8006280 <_dtoa_r+0x518>
 800612c:	9b08      	ldr	r3, [sp, #32]
 800612e:	2b00      	cmp	r3, #0
 8006130:	dd37      	ble.n	80061a2 <_dtoa_r+0x43a>
 8006132:	1e7b      	subs	r3, r7, #1
 8006134:	4620      	mov	r0, r4
 8006136:	9304      	str	r3, [sp, #16]
 8006138:	2200      	movs	r2, #0
 800613a:	4629      	mov	r1, r5
 800613c:	4b55      	ldr	r3, [pc, #340]	@ (8006294 <_dtoa_r+0x52c>)
 800613e:	f7fa fa7f 	bl	8000640 <__aeabi_dmul>
 8006142:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006146:	9c08      	ldr	r4, [sp, #32]
 8006148:	3601      	adds	r6, #1
 800614a:	4630      	mov	r0, r6
 800614c:	f7fa fa0e 	bl	800056c <__aeabi_i2d>
 8006150:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006154:	f7fa fa74 	bl	8000640 <__aeabi_dmul>
 8006158:	2200      	movs	r2, #0
 800615a:	4b4f      	ldr	r3, [pc, #316]	@ (8006298 <_dtoa_r+0x530>)
 800615c:	f7fa f8ba 	bl	80002d4 <__adddf3>
 8006160:	4605      	mov	r5, r0
 8006162:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006166:	2c00      	cmp	r4, #0
 8006168:	f040 809a 	bne.w	80062a0 <_dtoa_r+0x538>
 800616c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006170:	2200      	movs	r2, #0
 8006172:	4b4a      	ldr	r3, [pc, #296]	@ (800629c <_dtoa_r+0x534>)
 8006174:	f7fa f8ac 	bl	80002d0 <__aeabi_dsub>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006180:	462a      	mov	r2, r5
 8006182:	4633      	mov	r3, r6
 8006184:	f7fa fcec 	bl	8000b60 <__aeabi_dcmpgt>
 8006188:	2800      	cmp	r0, #0
 800618a:	f040 828e 	bne.w	80066aa <_dtoa_r+0x942>
 800618e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006192:	462a      	mov	r2, r5
 8006194:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006198:	f7fa fcc4 	bl	8000b24 <__aeabi_dcmplt>
 800619c:	2800      	cmp	r0, #0
 800619e:	f040 8127 	bne.w	80063f0 <_dtoa_r+0x688>
 80061a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80061a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80061aa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f2c0 8163 	blt.w	8006478 <_dtoa_r+0x710>
 80061b2:	2f0e      	cmp	r7, #14
 80061b4:	f300 8160 	bgt.w	8006478 <_dtoa_r+0x710>
 80061b8:	4b33      	ldr	r3, [pc, #204]	@ (8006288 <_dtoa_r+0x520>)
 80061ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80061be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80061c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80061c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	da03      	bge.n	80061d4 <_dtoa_r+0x46c>
 80061cc:	9b07      	ldr	r3, [sp, #28]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f340 8100 	ble.w	80063d4 <_dtoa_r+0x66c>
 80061d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80061d8:	4656      	mov	r6, sl
 80061da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061de:	4620      	mov	r0, r4
 80061e0:	4629      	mov	r1, r5
 80061e2:	f7fa fb57 	bl	8000894 <__aeabi_ddiv>
 80061e6:	f7fa fcdb 	bl	8000ba0 <__aeabi_d2iz>
 80061ea:	4680      	mov	r8, r0
 80061ec:	f7fa f9be 	bl	800056c <__aeabi_i2d>
 80061f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061f4:	f7fa fa24 	bl	8000640 <__aeabi_dmul>
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	4620      	mov	r0, r4
 80061fe:	4629      	mov	r1, r5
 8006200:	f7fa f866 	bl	80002d0 <__aeabi_dsub>
 8006204:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006208:	9d07      	ldr	r5, [sp, #28]
 800620a:	f806 4b01 	strb.w	r4, [r6], #1
 800620e:	eba6 040a 	sub.w	r4, r6, sl
 8006212:	42a5      	cmp	r5, r4
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	f040 8116 	bne.w	8006448 <_dtoa_r+0x6e0>
 800621c:	f7fa f85a 	bl	80002d4 <__adddf3>
 8006220:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006224:	4604      	mov	r4, r0
 8006226:	460d      	mov	r5, r1
 8006228:	f7fa fc9a 	bl	8000b60 <__aeabi_dcmpgt>
 800622c:	2800      	cmp	r0, #0
 800622e:	f040 80f8 	bne.w	8006422 <_dtoa_r+0x6ba>
 8006232:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006236:	4620      	mov	r0, r4
 8006238:	4629      	mov	r1, r5
 800623a:	f7fa fc69 	bl	8000b10 <__aeabi_dcmpeq>
 800623e:	b118      	cbz	r0, 8006248 <_dtoa_r+0x4e0>
 8006240:	f018 0f01 	tst.w	r8, #1
 8006244:	f040 80ed 	bne.w	8006422 <_dtoa_r+0x6ba>
 8006248:	4649      	mov	r1, r9
 800624a:	4658      	mov	r0, fp
 800624c:	f000 fc92 	bl	8006b74 <_Bfree>
 8006250:	2300      	movs	r3, #0
 8006252:	7033      	strb	r3, [r6, #0]
 8006254:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006256:	3701      	adds	r7, #1
 8006258:	601f      	str	r7, [r3, #0]
 800625a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 8320 	beq.w	80068a2 <_dtoa_r+0xb3a>
 8006262:	601e      	str	r6, [r3, #0]
 8006264:	e31d      	b.n	80068a2 <_dtoa_r+0xb3a>
 8006266:	07e2      	lsls	r2, r4, #31
 8006268:	d505      	bpl.n	8006276 <_dtoa_r+0x50e>
 800626a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800626e:	f7fa f9e7 	bl	8000640 <__aeabi_dmul>
 8006272:	2301      	movs	r3, #1
 8006274:	3601      	adds	r6, #1
 8006276:	1064      	asrs	r4, r4, #1
 8006278:	3508      	adds	r5, #8
 800627a:	e73f      	b.n	80060fc <_dtoa_r+0x394>
 800627c:	2602      	movs	r6, #2
 800627e:	e742      	b.n	8006106 <_dtoa_r+0x39e>
 8006280:	9c07      	ldr	r4, [sp, #28]
 8006282:	9704      	str	r7, [sp, #16]
 8006284:	e761      	b.n	800614a <_dtoa_r+0x3e2>
 8006286:	bf00      	nop
 8006288:	0800b010 	.word	0x0800b010
 800628c:	0800afe8 	.word	0x0800afe8
 8006290:	3ff00000 	.word	0x3ff00000
 8006294:	40240000 	.word	0x40240000
 8006298:	401c0000 	.word	0x401c0000
 800629c:	40140000 	.word	0x40140000
 80062a0:	4b70      	ldr	r3, [pc, #448]	@ (8006464 <_dtoa_r+0x6fc>)
 80062a2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80062a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062ac:	4454      	add	r4, sl
 80062ae:	2900      	cmp	r1, #0
 80062b0:	d045      	beq.n	800633e <_dtoa_r+0x5d6>
 80062b2:	2000      	movs	r0, #0
 80062b4:	496c      	ldr	r1, [pc, #432]	@ (8006468 <_dtoa_r+0x700>)
 80062b6:	f7fa faed 	bl	8000894 <__aeabi_ddiv>
 80062ba:	4633      	mov	r3, r6
 80062bc:	462a      	mov	r2, r5
 80062be:	f7fa f807 	bl	80002d0 <__aeabi_dsub>
 80062c2:	4656      	mov	r6, sl
 80062c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80062c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062cc:	f7fa fc68 	bl	8000ba0 <__aeabi_d2iz>
 80062d0:	4605      	mov	r5, r0
 80062d2:	f7fa f94b 	bl	800056c <__aeabi_i2d>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062de:	f7f9 fff7 	bl	80002d0 <__aeabi_dsub>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	3530      	adds	r5, #48	@ 0x30
 80062e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80062f0:	f806 5b01 	strb.w	r5, [r6], #1
 80062f4:	f7fa fc16 	bl	8000b24 <__aeabi_dcmplt>
 80062f8:	2800      	cmp	r0, #0
 80062fa:	d163      	bne.n	80063c4 <_dtoa_r+0x65c>
 80062fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006300:	2000      	movs	r0, #0
 8006302:	495a      	ldr	r1, [pc, #360]	@ (800646c <_dtoa_r+0x704>)
 8006304:	f7f9 ffe4 	bl	80002d0 <__aeabi_dsub>
 8006308:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800630c:	f7fa fc0a 	bl	8000b24 <__aeabi_dcmplt>
 8006310:	2800      	cmp	r0, #0
 8006312:	f040 8087 	bne.w	8006424 <_dtoa_r+0x6bc>
 8006316:	42a6      	cmp	r6, r4
 8006318:	f43f af43 	beq.w	80061a2 <_dtoa_r+0x43a>
 800631c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006320:	2200      	movs	r2, #0
 8006322:	4b53      	ldr	r3, [pc, #332]	@ (8006470 <_dtoa_r+0x708>)
 8006324:	f7fa f98c 	bl	8000640 <__aeabi_dmul>
 8006328:	2200      	movs	r2, #0
 800632a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800632e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006332:	4b4f      	ldr	r3, [pc, #316]	@ (8006470 <_dtoa_r+0x708>)
 8006334:	f7fa f984 	bl	8000640 <__aeabi_dmul>
 8006338:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800633c:	e7c4      	b.n	80062c8 <_dtoa_r+0x560>
 800633e:	4631      	mov	r1, r6
 8006340:	4628      	mov	r0, r5
 8006342:	f7fa f97d 	bl	8000640 <__aeabi_dmul>
 8006346:	4656      	mov	r6, sl
 8006348:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800634c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800634e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006352:	f7fa fc25 	bl	8000ba0 <__aeabi_d2iz>
 8006356:	4605      	mov	r5, r0
 8006358:	f7fa f908 	bl	800056c <__aeabi_i2d>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006364:	f7f9 ffb4 	bl	80002d0 <__aeabi_dsub>
 8006368:	4602      	mov	r2, r0
 800636a:	460b      	mov	r3, r1
 800636c:	3530      	adds	r5, #48	@ 0x30
 800636e:	f806 5b01 	strb.w	r5, [r6], #1
 8006372:	42a6      	cmp	r6, r4
 8006374:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006378:	f04f 0200 	mov.w	r2, #0
 800637c:	d124      	bne.n	80063c8 <_dtoa_r+0x660>
 800637e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006382:	4b39      	ldr	r3, [pc, #228]	@ (8006468 <_dtoa_r+0x700>)
 8006384:	f7f9 ffa6 	bl	80002d4 <__adddf3>
 8006388:	4602      	mov	r2, r0
 800638a:	460b      	mov	r3, r1
 800638c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006390:	f7fa fbe6 	bl	8000b60 <__aeabi_dcmpgt>
 8006394:	2800      	cmp	r0, #0
 8006396:	d145      	bne.n	8006424 <_dtoa_r+0x6bc>
 8006398:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800639c:	2000      	movs	r0, #0
 800639e:	4932      	ldr	r1, [pc, #200]	@ (8006468 <_dtoa_r+0x700>)
 80063a0:	f7f9 ff96 	bl	80002d0 <__aeabi_dsub>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063ac:	f7fa fbba 	bl	8000b24 <__aeabi_dcmplt>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	f43f aef6 	beq.w	80061a2 <_dtoa_r+0x43a>
 80063b6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80063b8:	1e73      	subs	r3, r6, #1
 80063ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 80063bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80063c0:	2b30      	cmp	r3, #48	@ 0x30
 80063c2:	d0f8      	beq.n	80063b6 <_dtoa_r+0x64e>
 80063c4:	9f04      	ldr	r7, [sp, #16]
 80063c6:	e73f      	b.n	8006248 <_dtoa_r+0x4e0>
 80063c8:	4b29      	ldr	r3, [pc, #164]	@ (8006470 <_dtoa_r+0x708>)
 80063ca:	f7fa f939 	bl	8000640 <__aeabi_dmul>
 80063ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063d2:	e7bc      	b.n	800634e <_dtoa_r+0x5e6>
 80063d4:	d10c      	bne.n	80063f0 <_dtoa_r+0x688>
 80063d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063da:	2200      	movs	r2, #0
 80063dc:	4b25      	ldr	r3, [pc, #148]	@ (8006474 <_dtoa_r+0x70c>)
 80063de:	f7fa f92f 	bl	8000640 <__aeabi_dmul>
 80063e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063e6:	f7fa fbb1 	bl	8000b4c <__aeabi_dcmpge>
 80063ea:	2800      	cmp	r0, #0
 80063ec:	f000 815b 	beq.w	80066a6 <_dtoa_r+0x93e>
 80063f0:	2400      	movs	r4, #0
 80063f2:	4625      	mov	r5, r4
 80063f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063f6:	4656      	mov	r6, sl
 80063f8:	43db      	mvns	r3, r3
 80063fa:	9304      	str	r3, [sp, #16]
 80063fc:	2700      	movs	r7, #0
 80063fe:	4621      	mov	r1, r4
 8006400:	4658      	mov	r0, fp
 8006402:	f000 fbb7 	bl	8006b74 <_Bfree>
 8006406:	2d00      	cmp	r5, #0
 8006408:	d0dc      	beq.n	80063c4 <_dtoa_r+0x65c>
 800640a:	b12f      	cbz	r7, 8006418 <_dtoa_r+0x6b0>
 800640c:	42af      	cmp	r7, r5
 800640e:	d003      	beq.n	8006418 <_dtoa_r+0x6b0>
 8006410:	4639      	mov	r1, r7
 8006412:	4658      	mov	r0, fp
 8006414:	f000 fbae 	bl	8006b74 <_Bfree>
 8006418:	4629      	mov	r1, r5
 800641a:	4658      	mov	r0, fp
 800641c:	f000 fbaa 	bl	8006b74 <_Bfree>
 8006420:	e7d0      	b.n	80063c4 <_dtoa_r+0x65c>
 8006422:	9704      	str	r7, [sp, #16]
 8006424:	4633      	mov	r3, r6
 8006426:	461e      	mov	r6, r3
 8006428:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800642c:	2a39      	cmp	r2, #57	@ 0x39
 800642e:	d107      	bne.n	8006440 <_dtoa_r+0x6d8>
 8006430:	459a      	cmp	sl, r3
 8006432:	d1f8      	bne.n	8006426 <_dtoa_r+0x6be>
 8006434:	9a04      	ldr	r2, [sp, #16]
 8006436:	3201      	adds	r2, #1
 8006438:	9204      	str	r2, [sp, #16]
 800643a:	2230      	movs	r2, #48	@ 0x30
 800643c:	f88a 2000 	strb.w	r2, [sl]
 8006440:	781a      	ldrb	r2, [r3, #0]
 8006442:	3201      	adds	r2, #1
 8006444:	701a      	strb	r2, [r3, #0]
 8006446:	e7bd      	b.n	80063c4 <_dtoa_r+0x65c>
 8006448:	2200      	movs	r2, #0
 800644a:	4b09      	ldr	r3, [pc, #36]	@ (8006470 <_dtoa_r+0x708>)
 800644c:	f7fa f8f8 	bl	8000640 <__aeabi_dmul>
 8006450:	2200      	movs	r2, #0
 8006452:	2300      	movs	r3, #0
 8006454:	4604      	mov	r4, r0
 8006456:	460d      	mov	r5, r1
 8006458:	f7fa fb5a 	bl	8000b10 <__aeabi_dcmpeq>
 800645c:	2800      	cmp	r0, #0
 800645e:	f43f aebc 	beq.w	80061da <_dtoa_r+0x472>
 8006462:	e6f1      	b.n	8006248 <_dtoa_r+0x4e0>
 8006464:	0800b010 	.word	0x0800b010
 8006468:	3fe00000 	.word	0x3fe00000
 800646c:	3ff00000 	.word	0x3ff00000
 8006470:	40240000 	.word	0x40240000
 8006474:	40140000 	.word	0x40140000
 8006478:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800647a:	2a00      	cmp	r2, #0
 800647c:	f000 80db 	beq.w	8006636 <_dtoa_r+0x8ce>
 8006480:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006482:	2a01      	cmp	r2, #1
 8006484:	f300 80bf 	bgt.w	8006606 <_dtoa_r+0x89e>
 8006488:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800648a:	2a00      	cmp	r2, #0
 800648c:	f000 80b7 	beq.w	80065fe <_dtoa_r+0x896>
 8006490:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006494:	4646      	mov	r6, r8
 8006496:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006498:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800649a:	2101      	movs	r1, #1
 800649c:	441a      	add	r2, r3
 800649e:	4658      	mov	r0, fp
 80064a0:	4498      	add	r8, r3
 80064a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80064a4:	f000 fc1a 	bl	8006cdc <__i2b>
 80064a8:	4605      	mov	r5, r0
 80064aa:	b15e      	cbz	r6, 80064c4 <_dtoa_r+0x75c>
 80064ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	dd08      	ble.n	80064c4 <_dtoa_r+0x75c>
 80064b2:	42b3      	cmp	r3, r6
 80064b4:	bfa8      	it	ge
 80064b6:	4633      	movge	r3, r6
 80064b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064ba:	eba8 0803 	sub.w	r8, r8, r3
 80064be:	1af6      	subs	r6, r6, r3
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80064c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064c6:	b1f3      	cbz	r3, 8006506 <_dtoa_r+0x79e>
 80064c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 80b7 	beq.w	800663e <_dtoa_r+0x8d6>
 80064d0:	b18c      	cbz	r4, 80064f6 <_dtoa_r+0x78e>
 80064d2:	4629      	mov	r1, r5
 80064d4:	4622      	mov	r2, r4
 80064d6:	4658      	mov	r0, fp
 80064d8:	f000 fcbe 	bl	8006e58 <__pow5mult>
 80064dc:	464a      	mov	r2, r9
 80064de:	4601      	mov	r1, r0
 80064e0:	4605      	mov	r5, r0
 80064e2:	4658      	mov	r0, fp
 80064e4:	f000 fc10 	bl	8006d08 <__multiply>
 80064e8:	4649      	mov	r1, r9
 80064ea:	9004      	str	r0, [sp, #16]
 80064ec:	4658      	mov	r0, fp
 80064ee:	f000 fb41 	bl	8006b74 <_Bfree>
 80064f2:	9b04      	ldr	r3, [sp, #16]
 80064f4:	4699      	mov	r9, r3
 80064f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064f8:	1b1a      	subs	r2, r3, r4
 80064fa:	d004      	beq.n	8006506 <_dtoa_r+0x79e>
 80064fc:	4649      	mov	r1, r9
 80064fe:	4658      	mov	r0, fp
 8006500:	f000 fcaa 	bl	8006e58 <__pow5mult>
 8006504:	4681      	mov	r9, r0
 8006506:	2101      	movs	r1, #1
 8006508:	4658      	mov	r0, fp
 800650a:	f000 fbe7 	bl	8006cdc <__i2b>
 800650e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006510:	4604      	mov	r4, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 81c9 	beq.w	80068aa <_dtoa_r+0xb42>
 8006518:	461a      	mov	r2, r3
 800651a:	4601      	mov	r1, r0
 800651c:	4658      	mov	r0, fp
 800651e:	f000 fc9b 	bl	8006e58 <__pow5mult>
 8006522:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006524:	4604      	mov	r4, r0
 8006526:	2b01      	cmp	r3, #1
 8006528:	f300 808f 	bgt.w	800664a <_dtoa_r+0x8e2>
 800652c:	9b02      	ldr	r3, [sp, #8]
 800652e:	2b00      	cmp	r3, #0
 8006530:	f040 8087 	bne.w	8006642 <_dtoa_r+0x8da>
 8006534:	9b03      	ldr	r3, [sp, #12]
 8006536:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800653a:	2b00      	cmp	r3, #0
 800653c:	f040 8083 	bne.w	8006646 <_dtoa_r+0x8de>
 8006540:	9b03      	ldr	r3, [sp, #12]
 8006542:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006546:	0d1b      	lsrs	r3, r3, #20
 8006548:	051b      	lsls	r3, r3, #20
 800654a:	b12b      	cbz	r3, 8006558 <_dtoa_r+0x7f0>
 800654c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800654e:	f108 0801 	add.w	r8, r8, #1
 8006552:	3301      	adds	r3, #1
 8006554:	9309      	str	r3, [sp, #36]	@ 0x24
 8006556:	2301      	movs	r3, #1
 8006558:	930a      	str	r3, [sp, #40]	@ 0x28
 800655a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 81aa 	beq.w	80068b6 <_dtoa_r+0xb4e>
 8006562:	6923      	ldr	r3, [r4, #16]
 8006564:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006568:	6918      	ldr	r0, [r3, #16]
 800656a:	f000 fb6b 	bl	8006c44 <__hi0bits>
 800656e:	f1c0 0020 	rsb	r0, r0, #32
 8006572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006574:	4418      	add	r0, r3
 8006576:	f010 001f 	ands.w	r0, r0, #31
 800657a:	d071      	beq.n	8006660 <_dtoa_r+0x8f8>
 800657c:	f1c0 0320 	rsb	r3, r0, #32
 8006580:	2b04      	cmp	r3, #4
 8006582:	dd65      	ble.n	8006650 <_dtoa_r+0x8e8>
 8006584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006586:	f1c0 001c 	rsb	r0, r0, #28
 800658a:	4403      	add	r3, r0
 800658c:	4480      	add	r8, r0
 800658e:	4406      	add	r6, r0
 8006590:	9309      	str	r3, [sp, #36]	@ 0x24
 8006592:	f1b8 0f00 	cmp.w	r8, #0
 8006596:	dd05      	ble.n	80065a4 <_dtoa_r+0x83c>
 8006598:	4649      	mov	r1, r9
 800659a:	4642      	mov	r2, r8
 800659c:	4658      	mov	r0, fp
 800659e:	f000 fcb5 	bl	8006f0c <__lshift>
 80065a2:	4681      	mov	r9, r0
 80065a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	dd05      	ble.n	80065b6 <_dtoa_r+0x84e>
 80065aa:	4621      	mov	r1, r4
 80065ac:	461a      	mov	r2, r3
 80065ae:	4658      	mov	r0, fp
 80065b0:	f000 fcac 	bl	8006f0c <__lshift>
 80065b4:	4604      	mov	r4, r0
 80065b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d053      	beq.n	8006664 <_dtoa_r+0x8fc>
 80065bc:	4621      	mov	r1, r4
 80065be:	4648      	mov	r0, r9
 80065c0:	f000 fd10 	bl	8006fe4 <__mcmp>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	da4d      	bge.n	8006664 <_dtoa_r+0x8fc>
 80065c8:	1e7b      	subs	r3, r7, #1
 80065ca:	4649      	mov	r1, r9
 80065cc:	9304      	str	r3, [sp, #16]
 80065ce:	220a      	movs	r2, #10
 80065d0:	2300      	movs	r3, #0
 80065d2:	4658      	mov	r0, fp
 80065d4:	f000 faf0 	bl	8006bb8 <__multadd>
 80065d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065da:	4681      	mov	r9, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 816c 	beq.w	80068ba <_dtoa_r+0xb52>
 80065e2:	2300      	movs	r3, #0
 80065e4:	4629      	mov	r1, r5
 80065e6:	220a      	movs	r2, #10
 80065e8:	4658      	mov	r0, fp
 80065ea:	f000 fae5 	bl	8006bb8 <__multadd>
 80065ee:	9b08      	ldr	r3, [sp, #32]
 80065f0:	4605      	mov	r5, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	dc61      	bgt.n	80066ba <_dtoa_r+0x952>
 80065f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	dc3b      	bgt.n	8006674 <_dtoa_r+0x90c>
 80065fc:	e05d      	b.n	80066ba <_dtoa_r+0x952>
 80065fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006600:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006604:	e746      	b.n	8006494 <_dtoa_r+0x72c>
 8006606:	9b07      	ldr	r3, [sp, #28]
 8006608:	1e5c      	subs	r4, r3, #1
 800660a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800660c:	42a3      	cmp	r3, r4
 800660e:	bfbf      	itttt	lt
 8006610:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006612:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006614:	1ae3      	sublt	r3, r4, r3
 8006616:	18d2      	addlt	r2, r2, r3
 8006618:	bfa8      	it	ge
 800661a:	1b1c      	subge	r4, r3, r4
 800661c:	9b07      	ldr	r3, [sp, #28]
 800661e:	bfbe      	ittt	lt
 8006620:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006622:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006624:	2400      	movlt	r4, #0
 8006626:	2b00      	cmp	r3, #0
 8006628:	bfb5      	itete	lt
 800662a:	eba8 0603 	sublt.w	r6, r8, r3
 800662e:	4646      	movge	r6, r8
 8006630:	2300      	movlt	r3, #0
 8006632:	9b07      	ldrge	r3, [sp, #28]
 8006634:	e730      	b.n	8006498 <_dtoa_r+0x730>
 8006636:	4646      	mov	r6, r8
 8006638:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800663a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800663c:	e735      	b.n	80064aa <_dtoa_r+0x742>
 800663e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006640:	e75c      	b.n	80064fc <_dtoa_r+0x794>
 8006642:	2300      	movs	r3, #0
 8006644:	e788      	b.n	8006558 <_dtoa_r+0x7f0>
 8006646:	9b02      	ldr	r3, [sp, #8]
 8006648:	e786      	b.n	8006558 <_dtoa_r+0x7f0>
 800664a:	2300      	movs	r3, #0
 800664c:	930a      	str	r3, [sp, #40]	@ 0x28
 800664e:	e788      	b.n	8006562 <_dtoa_r+0x7fa>
 8006650:	d09f      	beq.n	8006592 <_dtoa_r+0x82a>
 8006652:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006654:	331c      	adds	r3, #28
 8006656:	441a      	add	r2, r3
 8006658:	4498      	add	r8, r3
 800665a:	441e      	add	r6, r3
 800665c:	9209      	str	r2, [sp, #36]	@ 0x24
 800665e:	e798      	b.n	8006592 <_dtoa_r+0x82a>
 8006660:	4603      	mov	r3, r0
 8006662:	e7f6      	b.n	8006652 <_dtoa_r+0x8ea>
 8006664:	9b07      	ldr	r3, [sp, #28]
 8006666:	9704      	str	r7, [sp, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	dc20      	bgt.n	80066ae <_dtoa_r+0x946>
 800666c:	9308      	str	r3, [sp, #32]
 800666e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006670:	2b02      	cmp	r3, #2
 8006672:	dd1e      	ble.n	80066b2 <_dtoa_r+0x94a>
 8006674:	9b08      	ldr	r3, [sp, #32]
 8006676:	2b00      	cmp	r3, #0
 8006678:	f47f aebc 	bne.w	80063f4 <_dtoa_r+0x68c>
 800667c:	4621      	mov	r1, r4
 800667e:	2205      	movs	r2, #5
 8006680:	4658      	mov	r0, fp
 8006682:	f000 fa99 	bl	8006bb8 <__multadd>
 8006686:	4601      	mov	r1, r0
 8006688:	4604      	mov	r4, r0
 800668a:	4648      	mov	r0, r9
 800668c:	f000 fcaa 	bl	8006fe4 <__mcmp>
 8006690:	2800      	cmp	r0, #0
 8006692:	f77f aeaf 	ble.w	80063f4 <_dtoa_r+0x68c>
 8006696:	2331      	movs	r3, #49	@ 0x31
 8006698:	4656      	mov	r6, sl
 800669a:	f806 3b01 	strb.w	r3, [r6], #1
 800669e:	9b04      	ldr	r3, [sp, #16]
 80066a0:	3301      	adds	r3, #1
 80066a2:	9304      	str	r3, [sp, #16]
 80066a4:	e6aa      	b.n	80063fc <_dtoa_r+0x694>
 80066a6:	9c07      	ldr	r4, [sp, #28]
 80066a8:	9704      	str	r7, [sp, #16]
 80066aa:	4625      	mov	r5, r4
 80066ac:	e7f3      	b.n	8006696 <_dtoa_r+0x92e>
 80066ae:	9b07      	ldr	r3, [sp, #28]
 80066b0:	9308      	str	r3, [sp, #32]
 80066b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 8104 	beq.w	80068c2 <_dtoa_r+0xb5a>
 80066ba:	2e00      	cmp	r6, #0
 80066bc:	dd05      	ble.n	80066ca <_dtoa_r+0x962>
 80066be:	4629      	mov	r1, r5
 80066c0:	4632      	mov	r2, r6
 80066c2:	4658      	mov	r0, fp
 80066c4:	f000 fc22 	bl	8006f0c <__lshift>
 80066c8:	4605      	mov	r5, r0
 80066ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d05a      	beq.n	8006786 <_dtoa_r+0xa1e>
 80066d0:	4658      	mov	r0, fp
 80066d2:	6869      	ldr	r1, [r5, #4]
 80066d4:	f000 fa0e 	bl	8006af4 <_Balloc>
 80066d8:	4606      	mov	r6, r0
 80066da:	b928      	cbnz	r0, 80066e8 <_dtoa_r+0x980>
 80066dc:	4602      	mov	r2, r0
 80066de:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80066e2:	4b83      	ldr	r3, [pc, #524]	@ (80068f0 <_dtoa_r+0xb88>)
 80066e4:	f7ff bb54 	b.w	8005d90 <_dtoa_r+0x28>
 80066e8:	692a      	ldr	r2, [r5, #16]
 80066ea:	f105 010c 	add.w	r1, r5, #12
 80066ee:	3202      	adds	r2, #2
 80066f0:	0092      	lsls	r2, r2, #2
 80066f2:	300c      	adds	r0, #12
 80066f4:	f000 ffa8 	bl	8007648 <memcpy>
 80066f8:	2201      	movs	r2, #1
 80066fa:	4631      	mov	r1, r6
 80066fc:	4658      	mov	r0, fp
 80066fe:	f000 fc05 	bl	8006f0c <__lshift>
 8006702:	462f      	mov	r7, r5
 8006704:	4605      	mov	r5, r0
 8006706:	f10a 0301 	add.w	r3, sl, #1
 800670a:	9307      	str	r3, [sp, #28]
 800670c:	9b08      	ldr	r3, [sp, #32]
 800670e:	4453      	add	r3, sl
 8006710:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006712:	9b02      	ldr	r3, [sp, #8]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	930a      	str	r3, [sp, #40]	@ 0x28
 800671a:	9b07      	ldr	r3, [sp, #28]
 800671c:	4621      	mov	r1, r4
 800671e:	3b01      	subs	r3, #1
 8006720:	4648      	mov	r0, r9
 8006722:	9302      	str	r3, [sp, #8]
 8006724:	f7ff fa97 	bl	8005c56 <quorem>
 8006728:	4639      	mov	r1, r7
 800672a:	9008      	str	r0, [sp, #32]
 800672c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006730:	4648      	mov	r0, r9
 8006732:	f000 fc57 	bl	8006fe4 <__mcmp>
 8006736:	462a      	mov	r2, r5
 8006738:	9009      	str	r0, [sp, #36]	@ 0x24
 800673a:	4621      	mov	r1, r4
 800673c:	4658      	mov	r0, fp
 800673e:	f000 fc6d 	bl	800701c <__mdiff>
 8006742:	68c2      	ldr	r2, [r0, #12]
 8006744:	4606      	mov	r6, r0
 8006746:	bb02      	cbnz	r2, 800678a <_dtoa_r+0xa22>
 8006748:	4601      	mov	r1, r0
 800674a:	4648      	mov	r0, r9
 800674c:	f000 fc4a 	bl	8006fe4 <__mcmp>
 8006750:	4602      	mov	r2, r0
 8006752:	4631      	mov	r1, r6
 8006754:	4658      	mov	r0, fp
 8006756:	920c      	str	r2, [sp, #48]	@ 0x30
 8006758:	f000 fa0c 	bl	8006b74 <_Bfree>
 800675c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800675e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006760:	9e07      	ldr	r6, [sp, #28]
 8006762:	ea43 0102 	orr.w	r1, r3, r2
 8006766:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006768:	4319      	orrs	r1, r3
 800676a:	d110      	bne.n	800678e <_dtoa_r+0xa26>
 800676c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006770:	d029      	beq.n	80067c6 <_dtoa_r+0xa5e>
 8006772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006774:	2b00      	cmp	r3, #0
 8006776:	dd02      	ble.n	800677e <_dtoa_r+0xa16>
 8006778:	9b08      	ldr	r3, [sp, #32]
 800677a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800677e:	9b02      	ldr	r3, [sp, #8]
 8006780:	f883 8000 	strb.w	r8, [r3]
 8006784:	e63b      	b.n	80063fe <_dtoa_r+0x696>
 8006786:	4628      	mov	r0, r5
 8006788:	e7bb      	b.n	8006702 <_dtoa_r+0x99a>
 800678a:	2201      	movs	r2, #1
 800678c:	e7e1      	b.n	8006752 <_dtoa_r+0x9ea>
 800678e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006790:	2b00      	cmp	r3, #0
 8006792:	db04      	blt.n	800679e <_dtoa_r+0xa36>
 8006794:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006796:	430b      	orrs	r3, r1
 8006798:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800679a:	430b      	orrs	r3, r1
 800679c:	d120      	bne.n	80067e0 <_dtoa_r+0xa78>
 800679e:	2a00      	cmp	r2, #0
 80067a0:	dded      	ble.n	800677e <_dtoa_r+0xa16>
 80067a2:	4649      	mov	r1, r9
 80067a4:	2201      	movs	r2, #1
 80067a6:	4658      	mov	r0, fp
 80067a8:	f000 fbb0 	bl	8006f0c <__lshift>
 80067ac:	4621      	mov	r1, r4
 80067ae:	4681      	mov	r9, r0
 80067b0:	f000 fc18 	bl	8006fe4 <__mcmp>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	dc03      	bgt.n	80067c0 <_dtoa_r+0xa58>
 80067b8:	d1e1      	bne.n	800677e <_dtoa_r+0xa16>
 80067ba:	f018 0f01 	tst.w	r8, #1
 80067be:	d0de      	beq.n	800677e <_dtoa_r+0xa16>
 80067c0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80067c4:	d1d8      	bne.n	8006778 <_dtoa_r+0xa10>
 80067c6:	2339      	movs	r3, #57	@ 0x39
 80067c8:	9a02      	ldr	r2, [sp, #8]
 80067ca:	7013      	strb	r3, [r2, #0]
 80067cc:	4633      	mov	r3, r6
 80067ce:	461e      	mov	r6, r3
 80067d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80067d4:	3b01      	subs	r3, #1
 80067d6:	2a39      	cmp	r2, #57	@ 0x39
 80067d8:	d052      	beq.n	8006880 <_dtoa_r+0xb18>
 80067da:	3201      	adds	r2, #1
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	e60e      	b.n	80063fe <_dtoa_r+0x696>
 80067e0:	2a00      	cmp	r2, #0
 80067e2:	dd07      	ble.n	80067f4 <_dtoa_r+0xa8c>
 80067e4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80067e8:	d0ed      	beq.n	80067c6 <_dtoa_r+0xa5e>
 80067ea:	9a02      	ldr	r2, [sp, #8]
 80067ec:	f108 0301 	add.w	r3, r8, #1
 80067f0:	7013      	strb	r3, [r2, #0]
 80067f2:	e604      	b.n	80063fe <_dtoa_r+0x696>
 80067f4:	9b07      	ldr	r3, [sp, #28]
 80067f6:	9a07      	ldr	r2, [sp, #28]
 80067f8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80067fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067fe:	4293      	cmp	r3, r2
 8006800:	d028      	beq.n	8006854 <_dtoa_r+0xaec>
 8006802:	4649      	mov	r1, r9
 8006804:	2300      	movs	r3, #0
 8006806:	220a      	movs	r2, #10
 8006808:	4658      	mov	r0, fp
 800680a:	f000 f9d5 	bl	8006bb8 <__multadd>
 800680e:	42af      	cmp	r7, r5
 8006810:	4681      	mov	r9, r0
 8006812:	f04f 0300 	mov.w	r3, #0
 8006816:	f04f 020a 	mov.w	r2, #10
 800681a:	4639      	mov	r1, r7
 800681c:	4658      	mov	r0, fp
 800681e:	d107      	bne.n	8006830 <_dtoa_r+0xac8>
 8006820:	f000 f9ca 	bl	8006bb8 <__multadd>
 8006824:	4607      	mov	r7, r0
 8006826:	4605      	mov	r5, r0
 8006828:	9b07      	ldr	r3, [sp, #28]
 800682a:	3301      	adds	r3, #1
 800682c:	9307      	str	r3, [sp, #28]
 800682e:	e774      	b.n	800671a <_dtoa_r+0x9b2>
 8006830:	f000 f9c2 	bl	8006bb8 <__multadd>
 8006834:	4629      	mov	r1, r5
 8006836:	4607      	mov	r7, r0
 8006838:	2300      	movs	r3, #0
 800683a:	220a      	movs	r2, #10
 800683c:	4658      	mov	r0, fp
 800683e:	f000 f9bb 	bl	8006bb8 <__multadd>
 8006842:	4605      	mov	r5, r0
 8006844:	e7f0      	b.n	8006828 <_dtoa_r+0xac0>
 8006846:	9b08      	ldr	r3, [sp, #32]
 8006848:	2700      	movs	r7, #0
 800684a:	2b00      	cmp	r3, #0
 800684c:	bfcc      	ite	gt
 800684e:	461e      	movgt	r6, r3
 8006850:	2601      	movle	r6, #1
 8006852:	4456      	add	r6, sl
 8006854:	4649      	mov	r1, r9
 8006856:	2201      	movs	r2, #1
 8006858:	4658      	mov	r0, fp
 800685a:	f000 fb57 	bl	8006f0c <__lshift>
 800685e:	4621      	mov	r1, r4
 8006860:	4681      	mov	r9, r0
 8006862:	f000 fbbf 	bl	8006fe4 <__mcmp>
 8006866:	2800      	cmp	r0, #0
 8006868:	dcb0      	bgt.n	80067cc <_dtoa_r+0xa64>
 800686a:	d102      	bne.n	8006872 <_dtoa_r+0xb0a>
 800686c:	f018 0f01 	tst.w	r8, #1
 8006870:	d1ac      	bne.n	80067cc <_dtoa_r+0xa64>
 8006872:	4633      	mov	r3, r6
 8006874:	461e      	mov	r6, r3
 8006876:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800687a:	2a30      	cmp	r2, #48	@ 0x30
 800687c:	d0fa      	beq.n	8006874 <_dtoa_r+0xb0c>
 800687e:	e5be      	b.n	80063fe <_dtoa_r+0x696>
 8006880:	459a      	cmp	sl, r3
 8006882:	d1a4      	bne.n	80067ce <_dtoa_r+0xa66>
 8006884:	9b04      	ldr	r3, [sp, #16]
 8006886:	3301      	adds	r3, #1
 8006888:	9304      	str	r3, [sp, #16]
 800688a:	2331      	movs	r3, #49	@ 0x31
 800688c:	f88a 3000 	strb.w	r3, [sl]
 8006890:	e5b5      	b.n	80063fe <_dtoa_r+0x696>
 8006892:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006894:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80068f4 <_dtoa_r+0xb8c>
 8006898:	b11b      	cbz	r3, 80068a2 <_dtoa_r+0xb3a>
 800689a:	f10a 0308 	add.w	r3, sl, #8
 800689e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80068a0:	6013      	str	r3, [r2, #0]
 80068a2:	4650      	mov	r0, sl
 80068a4:	b017      	add	sp, #92	@ 0x5c
 80068a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	f77f ae3d 	ble.w	800652c <_dtoa_r+0x7c4>
 80068b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80068b6:	2001      	movs	r0, #1
 80068b8:	e65b      	b.n	8006572 <_dtoa_r+0x80a>
 80068ba:	9b08      	ldr	r3, [sp, #32]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f77f aed6 	ble.w	800666e <_dtoa_r+0x906>
 80068c2:	4656      	mov	r6, sl
 80068c4:	4621      	mov	r1, r4
 80068c6:	4648      	mov	r0, r9
 80068c8:	f7ff f9c5 	bl	8005c56 <quorem>
 80068cc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80068d0:	9b08      	ldr	r3, [sp, #32]
 80068d2:	f806 8b01 	strb.w	r8, [r6], #1
 80068d6:	eba6 020a 	sub.w	r2, r6, sl
 80068da:	4293      	cmp	r3, r2
 80068dc:	ddb3      	ble.n	8006846 <_dtoa_r+0xade>
 80068de:	4649      	mov	r1, r9
 80068e0:	2300      	movs	r3, #0
 80068e2:	220a      	movs	r2, #10
 80068e4:	4658      	mov	r0, fp
 80068e6:	f000 f967 	bl	8006bb8 <__multadd>
 80068ea:	4681      	mov	r9, r0
 80068ec:	e7ea      	b.n	80068c4 <_dtoa_r+0xb5c>
 80068ee:	bf00      	nop
 80068f0:	0800af72 	.word	0x0800af72
 80068f4:	0800aef6 	.word	0x0800aef6

080068f8 <_free_r>:
 80068f8:	b538      	push	{r3, r4, r5, lr}
 80068fa:	4605      	mov	r5, r0
 80068fc:	2900      	cmp	r1, #0
 80068fe:	d040      	beq.n	8006982 <_free_r+0x8a>
 8006900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006904:	1f0c      	subs	r4, r1, #4
 8006906:	2b00      	cmp	r3, #0
 8006908:	bfb8      	it	lt
 800690a:	18e4      	addlt	r4, r4, r3
 800690c:	f000 f8e6 	bl	8006adc <__malloc_lock>
 8006910:	4a1c      	ldr	r2, [pc, #112]	@ (8006984 <_free_r+0x8c>)
 8006912:	6813      	ldr	r3, [r2, #0]
 8006914:	b933      	cbnz	r3, 8006924 <_free_r+0x2c>
 8006916:	6063      	str	r3, [r4, #4]
 8006918:	6014      	str	r4, [r2, #0]
 800691a:	4628      	mov	r0, r5
 800691c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006920:	f000 b8e2 	b.w	8006ae8 <__malloc_unlock>
 8006924:	42a3      	cmp	r3, r4
 8006926:	d908      	bls.n	800693a <_free_r+0x42>
 8006928:	6820      	ldr	r0, [r4, #0]
 800692a:	1821      	adds	r1, r4, r0
 800692c:	428b      	cmp	r3, r1
 800692e:	bf01      	itttt	eq
 8006930:	6819      	ldreq	r1, [r3, #0]
 8006932:	685b      	ldreq	r3, [r3, #4]
 8006934:	1809      	addeq	r1, r1, r0
 8006936:	6021      	streq	r1, [r4, #0]
 8006938:	e7ed      	b.n	8006916 <_free_r+0x1e>
 800693a:	461a      	mov	r2, r3
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	b10b      	cbz	r3, 8006944 <_free_r+0x4c>
 8006940:	42a3      	cmp	r3, r4
 8006942:	d9fa      	bls.n	800693a <_free_r+0x42>
 8006944:	6811      	ldr	r1, [r2, #0]
 8006946:	1850      	adds	r0, r2, r1
 8006948:	42a0      	cmp	r0, r4
 800694a:	d10b      	bne.n	8006964 <_free_r+0x6c>
 800694c:	6820      	ldr	r0, [r4, #0]
 800694e:	4401      	add	r1, r0
 8006950:	1850      	adds	r0, r2, r1
 8006952:	4283      	cmp	r3, r0
 8006954:	6011      	str	r1, [r2, #0]
 8006956:	d1e0      	bne.n	800691a <_free_r+0x22>
 8006958:	6818      	ldr	r0, [r3, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	4408      	add	r0, r1
 800695e:	6010      	str	r0, [r2, #0]
 8006960:	6053      	str	r3, [r2, #4]
 8006962:	e7da      	b.n	800691a <_free_r+0x22>
 8006964:	d902      	bls.n	800696c <_free_r+0x74>
 8006966:	230c      	movs	r3, #12
 8006968:	602b      	str	r3, [r5, #0]
 800696a:	e7d6      	b.n	800691a <_free_r+0x22>
 800696c:	6820      	ldr	r0, [r4, #0]
 800696e:	1821      	adds	r1, r4, r0
 8006970:	428b      	cmp	r3, r1
 8006972:	bf01      	itttt	eq
 8006974:	6819      	ldreq	r1, [r3, #0]
 8006976:	685b      	ldreq	r3, [r3, #4]
 8006978:	1809      	addeq	r1, r1, r0
 800697a:	6021      	streq	r1, [r4, #0]
 800697c:	6063      	str	r3, [r4, #4]
 800697e:	6054      	str	r4, [r2, #4]
 8006980:	e7cb      	b.n	800691a <_free_r+0x22>
 8006982:	bd38      	pop	{r3, r4, r5, pc}
 8006984:	20000e50 	.word	0x20000e50

08006988 <malloc>:
 8006988:	4b02      	ldr	r3, [pc, #8]	@ (8006994 <malloc+0xc>)
 800698a:	4601      	mov	r1, r0
 800698c:	6818      	ldr	r0, [r3, #0]
 800698e:	f000 b825 	b.w	80069dc <_malloc_r>
 8006992:	bf00      	nop
 8006994:	2000002c 	.word	0x2000002c

08006998 <sbrk_aligned>:
 8006998:	b570      	push	{r4, r5, r6, lr}
 800699a:	4e0f      	ldr	r6, [pc, #60]	@ (80069d8 <sbrk_aligned+0x40>)
 800699c:	460c      	mov	r4, r1
 800699e:	6831      	ldr	r1, [r6, #0]
 80069a0:	4605      	mov	r5, r0
 80069a2:	b911      	cbnz	r1, 80069aa <sbrk_aligned+0x12>
 80069a4:	f000 fe40 	bl	8007628 <_sbrk_r>
 80069a8:	6030      	str	r0, [r6, #0]
 80069aa:	4621      	mov	r1, r4
 80069ac:	4628      	mov	r0, r5
 80069ae:	f000 fe3b 	bl	8007628 <_sbrk_r>
 80069b2:	1c43      	adds	r3, r0, #1
 80069b4:	d103      	bne.n	80069be <sbrk_aligned+0x26>
 80069b6:	f04f 34ff 	mov.w	r4, #4294967295
 80069ba:	4620      	mov	r0, r4
 80069bc:	bd70      	pop	{r4, r5, r6, pc}
 80069be:	1cc4      	adds	r4, r0, #3
 80069c0:	f024 0403 	bic.w	r4, r4, #3
 80069c4:	42a0      	cmp	r0, r4
 80069c6:	d0f8      	beq.n	80069ba <sbrk_aligned+0x22>
 80069c8:	1a21      	subs	r1, r4, r0
 80069ca:	4628      	mov	r0, r5
 80069cc:	f000 fe2c 	bl	8007628 <_sbrk_r>
 80069d0:	3001      	adds	r0, #1
 80069d2:	d1f2      	bne.n	80069ba <sbrk_aligned+0x22>
 80069d4:	e7ef      	b.n	80069b6 <sbrk_aligned+0x1e>
 80069d6:	bf00      	nop
 80069d8:	20000e4c 	.word	0x20000e4c

080069dc <_malloc_r>:
 80069dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069e0:	1ccd      	adds	r5, r1, #3
 80069e2:	f025 0503 	bic.w	r5, r5, #3
 80069e6:	3508      	adds	r5, #8
 80069e8:	2d0c      	cmp	r5, #12
 80069ea:	bf38      	it	cc
 80069ec:	250c      	movcc	r5, #12
 80069ee:	2d00      	cmp	r5, #0
 80069f0:	4606      	mov	r6, r0
 80069f2:	db01      	blt.n	80069f8 <_malloc_r+0x1c>
 80069f4:	42a9      	cmp	r1, r5
 80069f6:	d904      	bls.n	8006a02 <_malloc_r+0x26>
 80069f8:	230c      	movs	r3, #12
 80069fa:	6033      	str	r3, [r6, #0]
 80069fc:	2000      	movs	r0, #0
 80069fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ad8 <_malloc_r+0xfc>
 8006a06:	f000 f869 	bl	8006adc <__malloc_lock>
 8006a0a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a0e:	461c      	mov	r4, r3
 8006a10:	bb44      	cbnz	r4, 8006a64 <_malloc_r+0x88>
 8006a12:	4629      	mov	r1, r5
 8006a14:	4630      	mov	r0, r6
 8006a16:	f7ff ffbf 	bl	8006998 <sbrk_aligned>
 8006a1a:	1c43      	adds	r3, r0, #1
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	d158      	bne.n	8006ad2 <_malloc_r+0xf6>
 8006a20:	f8d8 4000 	ldr.w	r4, [r8]
 8006a24:	4627      	mov	r7, r4
 8006a26:	2f00      	cmp	r7, #0
 8006a28:	d143      	bne.n	8006ab2 <_malloc_r+0xd6>
 8006a2a:	2c00      	cmp	r4, #0
 8006a2c:	d04b      	beq.n	8006ac6 <_malloc_r+0xea>
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	4639      	mov	r1, r7
 8006a32:	4630      	mov	r0, r6
 8006a34:	eb04 0903 	add.w	r9, r4, r3
 8006a38:	f000 fdf6 	bl	8007628 <_sbrk_r>
 8006a3c:	4581      	cmp	r9, r0
 8006a3e:	d142      	bne.n	8006ac6 <_malloc_r+0xea>
 8006a40:	6821      	ldr	r1, [r4, #0]
 8006a42:	4630      	mov	r0, r6
 8006a44:	1a6d      	subs	r5, r5, r1
 8006a46:	4629      	mov	r1, r5
 8006a48:	f7ff ffa6 	bl	8006998 <sbrk_aligned>
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d03a      	beq.n	8006ac6 <_malloc_r+0xea>
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	442b      	add	r3, r5
 8006a54:	6023      	str	r3, [r4, #0]
 8006a56:	f8d8 3000 	ldr.w	r3, [r8]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	bb62      	cbnz	r2, 8006ab8 <_malloc_r+0xdc>
 8006a5e:	f8c8 7000 	str.w	r7, [r8]
 8006a62:	e00f      	b.n	8006a84 <_malloc_r+0xa8>
 8006a64:	6822      	ldr	r2, [r4, #0]
 8006a66:	1b52      	subs	r2, r2, r5
 8006a68:	d420      	bmi.n	8006aac <_malloc_r+0xd0>
 8006a6a:	2a0b      	cmp	r2, #11
 8006a6c:	d917      	bls.n	8006a9e <_malloc_r+0xc2>
 8006a6e:	1961      	adds	r1, r4, r5
 8006a70:	42a3      	cmp	r3, r4
 8006a72:	6025      	str	r5, [r4, #0]
 8006a74:	bf18      	it	ne
 8006a76:	6059      	strne	r1, [r3, #4]
 8006a78:	6863      	ldr	r3, [r4, #4]
 8006a7a:	bf08      	it	eq
 8006a7c:	f8c8 1000 	streq.w	r1, [r8]
 8006a80:	5162      	str	r2, [r4, r5]
 8006a82:	604b      	str	r3, [r1, #4]
 8006a84:	4630      	mov	r0, r6
 8006a86:	f000 f82f 	bl	8006ae8 <__malloc_unlock>
 8006a8a:	f104 000b 	add.w	r0, r4, #11
 8006a8e:	1d23      	adds	r3, r4, #4
 8006a90:	f020 0007 	bic.w	r0, r0, #7
 8006a94:	1ac2      	subs	r2, r0, r3
 8006a96:	bf1c      	itt	ne
 8006a98:	1a1b      	subne	r3, r3, r0
 8006a9a:	50a3      	strne	r3, [r4, r2]
 8006a9c:	e7af      	b.n	80069fe <_malloc_r+0x22>
 8006a9e:	6862      	ldr	r2, [r4, #4]
 8006aa0:	42a3      	cmp	r3, r4
 8006aa2:	bf0c      	ite	eq
 8006aa4:	f8c8 2000 	streq.w	r2, [r8]
 8006aa8:	605a      	strne	r2, [r3, #4]
 8006aaa:	e7eb      	b.n	8006a84 <_malloc_r+0xa8>
 8006aac:	4623      	mov	r3, r4
 8006aae:	6864      	ldr	r4, [r4, #4]
 8006ab0:	e7ae      	b.n	8006a10 <_malloc_r+0x34>
 8006ab2:	463c      	mov	r4, r7
 8006ab4:	687f      	ldr	r7, [r7, #4]
 8006ab6:	e7b6      	b.n	8006a26 <_malloc_r+0x4a>
 8006ab8:	461a      	mov	r2, r3
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	42a3      	cmp	r3, r4
 8006abe:	d1fb      	bne.n	8006ab8 <_malloc_r+0xdc>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	6053      	str	r3, [r2, #4]
 8006ac4:	e7de      	b.n	8006a84 <_malloc_r+0xa8>
 8006ac6:	230c      	movs	r3, #12
 8006ac8:	4630      	mov	r0, r6
 8006aca:	6033      	str	r3, [r6, #0]
 8006acc:	f000 f80c 	bl	8006ae8 <__malloc_unlock>
 8006ad0:	e794      	b.n	80069fc <_malloc_r+0x20>
 8006ad2:	6005      	str	r5, [r0, #0]
 8006ad4:	e7d6      	b.n	8006a84 <_malloc_r+0xa8>
 8006ad6:	bf00      	nop
 8006ad8:	20000e50 	.word	0x20000e50

08006adc <__malloc_lock>:
 8006adc:	4801      	ldr	r0, [pc, #4]	@ (8006ae4 <__malloc_lock+0x8>)
 8006ade:	f7ff b8aa 	b.w	8005c36 <__retarget_lock_acquire_recursive>
 8006ae2:	bf00      	nop
 8006ae4:	20000e48 	.word	0x20000e48

08006ae8 <__malloc_unlock>:
 8006ae8:	4801      	ldr	r0, [pc, #4]	@ (8006af0 <__malloc_unlock+0x8>)
 8006aea:	f7ff b8a5 	b.w	8005c38 <__retarget_lock_release_recursive>
 8006aee:	bf00      	nop
 8006af0:	20000e48 	.word	0x20000e48

08006af4 <_Balloc>:
 8006af4:	b570      	push	{r4, r5, r6, lr}
 8006af6:	69c6      	ldr	r6, [r0, #28]
 8006af8:	4604      	mov	r4, r0
 8006afa:	460d      	mov	r5, r1
 8006afc:	b976      	cbnz	r6, 8006b1c <_Balloc+0x28>
 8006afe:	2010      	movs	r0, #16
 8006b00:	f7ff ff42 	bl	8006988 <malloc>
 8006b04:	4602      	mov	r2, r0
 8006b06:	61e0      	str	r0, [r4, #28]
 8006b08:	b920      	cbnz	r0, 8006b14 <_Balloc+0x20>
 8006b0a:	216b      	movs	r1, #107	@ 0x6b
 8006b0c:	4b17      	ldr	r3, [pc, #92]	@ (8006b6c <_Balloc+0x78>)
 8006b0e:	4818      	ldr	r0, [pc, #96]	@ (8006b70 <_Balloc+0x7c>)
 8006b10:	f000 fda8 	bl	8007664 <__assert_func>
 8006b14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b18:	6006      	str	r6, [r0, #0]
 8006b1a:	60c6      	str	r6, [r0, #12]
 8006b1c:	69e6      	ldr	r6, [r4, #28]
 8006b1e:	68f3      	ldr	r3, [r6, #12]
 8006b20:	b183      	cbz	r3, 8006b44 <_Balloc+0x50>
 8006b22:	69e3      	ldr	r3, [r4, #28]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b2a:	b9b8      	cbnz	r0, 8006b5c <_Balloc+0x68>
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	fa01 f605 	lsl.w	r6, r1, r5
 8006b32:	1d72      	adds	r2, r6, #5
 8006b34:	4620      	mov	r0, r4
 8006b36:	0092      	lsls	r2, r2, #2
 8006b38:	f000 fdb2 	bl	80076a0 <_calloc_r>
 8006b3c:	b160      	cbz	r0, 8006b58 <_Balloc+0x64>
 8006b3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b42:	e00e      	b.n	8006b62 <_Balloc+0x6e>
 8006b44:	2221      	movs	r2, #33	@ 0x21
 8006b46:	2104      	movs	r1, #4
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f000 fda9 	bl	80076a0 <_calloc_r>
 8006b4e:	69e3      	ldr	r3, [r4, #28]
 8006b50:	60f0      	str	r0, [r6, #12]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1e4      	bne.n	8006b22 <_Balloc+0x2e>
 8006b58:	2000      	movs	r0, #0
 8006b5a:	bd70      	pop	{r4, r5, r6, pc}
 8006b5c:	6802      	ldr	r2, [r0, #0]
 8006b5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b62:	2300      	movs	r3, #0
 8006b64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b68:	e7f7      	b.n	8006b5a <_Balloc+0x66>
 8006b6a:	bf00      	nop
 8006b6c:	0800af03 	.word	0x0800af03
 8006b70:	0800af83 	.word	0x0800af83

08006b74 <_Bfree>:
 8006b74:	b570      	push	{r4, r5, r6, lr}
 8006b76:	69c6      	ldr	r6, [r0, #28]
 8006b78:	4605      	mov	r5, r0
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	b976      	cbnz	r6, 8006b9c <_Bfree+0x28>
 8006b7e:	2010      	movs	r0, #16
 8006b80:	f7ff ff02 	bl	8006988 <malloc>
 8006b84:	4602      	mov	r2, r0
 8006b86:	61e8      	str	r0, [r5, #28]
 8006b88:	b920      	cbnz	r0, 8006b94 <_Bfree+0x20>
 8006b8a:	218f      	movs	r1, #143	@ 0x8f
 8006b8c:	4b08      	ldr	r3, [pc, #32]	@ (8006bb0 <_Bfree+0x3c>)
 8006b8e:	4809      	ldr	r0, [pc, #36]	@ (8006bb4 <_Bfree+0x40>)
 8006b90:	f000 fd68 	bl	8007664 <__assert_func>
 8006b94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b98:	6006      	str	r6, [r0, #0]
 8006b9a:	60c6      	str	r6, [r0, #12]
 8006b9c:	b13c      	cbz	r4, 8006bae <_Bfree+0x3a>
 8006b9e:	69eb      	ldr	r3, [r5, #28]
 8006ba0:	6862      	ldr	r2, [r4, #4]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ba8:	6021      	str	r1, [r4, #0]
 8006baa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006bae:	bd70      	pop	{r4, r5, r6, pc}
 8006bb0:	0800af03 	.word	0x0800af03
 8006bb4:	0800af83 	.word	0x0800af83

08006bb8 <__multadd>:
 8006bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bbc:	4607      	mov	r7, r0
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	461e      	mov	r6, r3
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	690d      	ldr	r5, [r1, #16]
 8006bc6:	f101 0c14 	add.w	ip, r1, #20
 8006bca:	f8dc 3000 	ldr.w	r3, [ip]
 8006bce:	3001      	adds	r0, #1
 8006bd0:	b299      	uxth	r1, r3
 8006bd2:	fb02 6101 	mla	r1, r2, r1, r6
 8006bd6:	0c1e      	lsrs	r6, r3, #16
 8006bd8:	0c0b      	lsrs	r3, r1, #16
 8006bda:	fb02 3306 	mla	r3, r2, r6, r3
 8006bde:	b289      	uxth	r1, r1
 8006be0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006be4:	4285      	cmp	r5, r0
 8006be6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006bea:	f84c 1b04 	str.w	r1, [ip], #4
 8006bee:	dcec      	bgt.n	8006bca <__multadd+0x12>
 8006bf0:	b30e      	cbz	r6, 8006c36 <__multadd+0x7e>
 8006bf2:	68a3      	ldr	r3, [r4, #8]
 8006bf4:	42ab      	cmp	r3, r5
 8006bf6:	dc19      	bgt.n	8006c2c <__multadd+0x74>
 8006bf8:	6861      	ldr	r1, [r4, #4]
 8006bfa:	4638      	mov	r0, r7
 8006bfc:	3101      	adds	r1, #1
 8006bfe:	f7ff ff79 	bl	8006af4 <_Balloc>
 8006c02:	4680      	mov	r8, r0
 8006c04:	b928      	cbnz	r0, 8006c12 <__multadd+0x5a>
 8006c06:	4602      	mov	r2, r0
 8006c08:	21ba      	movs	r1, #186	@ 0xba
 8006c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8006c3c <__multadd+0x84>)
 8006c0c:	480c      	ldr	r0, [pc, #48]	@ (8006c40 <__multadd+0x88>)
 8006c0e:	f000 fd29 	bl	8007664 <__assert_func>
 8006c12:	6922      	ldr	r2, [r4, #16]
 8006c14:	f104 010c 	add.w	r1, r4, #12
 8006c18:	3202      	adds	r2, #2
 8006c1a:	0092      	lsls	r2, r2, #2
 8006c1c:	300c      	adds	r0, #12
 8006c1e:	f000 fd13 	bl	8007648 <memcpy>
 8006c22:	4621      	mov	r1, r4
 8006c24:	4638      	mov	r0, r7
 8006c26:	f7ff ffa5 	bl	8006b74 <_Bfree>
 8006c2a:	4644      	mov	r4, r8
 8006c2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c30:	3501      	adds	r5, #1
 8006c32:	615e      	str	r6, [r3, #20]
 8006c34:	6125      	str	r5, [r4, #16]
 8006c36:	4620      	mov	r0, r4
 8006c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c3c:	0800af72 	.word	0x0800af72
 8006c40:	0800af83 	.word	0x0800af83

08006c44 <__hi0bits>:
 8006c44:	4603      	mov	r3, r0
 8006c46:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006c4a:	bf3a      	itte	cc
 8006c4c:	0403      	lslcc	r3, r0, #16
 8006c4e:	2010      	movcc	r0, #16
 8006c50:	2000      	movcs	r0, #0
 8006c52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c56:	bf3c      	itt	cc
 8006c58:	021b      	lslcc	r3, r3, #8
 8006c5a:	3008      	addcc	r0, #8
 8006c5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c60:	bf3c      	itt	cc
 8006c62:	011b      	lslcc	r3, r3, #4
 8006c64:	3004      	addcc	r0, #4
 8006c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c6a:	bf3c      	itt	cc
 8006c6c:	009b      	lslcc	r3, r3, #2
 8006c6e:	3002      	addcc	r0, #2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	db05      	blt.n	8006c80 <__hi0bits+0x3c>
 8006c74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006c78:	f100 0001 	add.w	r0, r0, #1
 8006c7c:	bf08      	it	eq
 8006c7e:	2020      	moveq	r0, #32
 8006c80:	4770      	bx	lr

08006c82 <__lo0bits>:
 8006c82:	6803      	ldr	r3, [r0, #0]
 8006c84:	4602      	mov	r2, r0
 8006c86:	f013 0007 	ands.w	r0, r3, #7
 8006c8a:	d00b      	beq.n	8006ca4 <__lo0bits+0x22>
 8006c8c:	07d9      	lsls	r1, r3, #31
 8006c8e:	d421      	bmi.n	8006cd4 <__lo0bits+0x52>
 8006c90:	0798      	lsls	r0, r3, #30
 8006c92:	bf49      	itett	mi
 8006c94:	085b      	lsrmi	r3, r3, #1
 8006c96:	089b      	lsrpl	r3, r3, #2
 8006c98:	2001      	movmi	r0, #1
 8006c9a:	6013      	strmi	r3, [r2, #0]
 8006c9c:	bf5c      	itt	pl
 8006c9e:	2002      	movpl	r0, #2
 8006ca0:	6013      	strpl	r3, [r2, #0]
 8006ca2:	4770      	bx	lr
 8006ca4:	b299      	uxth	r1, r3
 8006ca6:	b909      	cbnz	r1, 8006cac <__lo0bits+0x2a>
 8006ca8:	2010      	movs	r0, #16
 8006caa:	0c1b      	lsrs	r3, r3, #16
 8006cac:	b2d9      	uxtb	r1, r3
 8006cae:	b909      	cbnz	r1, 8006cb4 <__lo0bits+0x32>
 8006cb0:	3008      	adds	r0, #8
 8006cb2:	0a1b      	lsrs	r3, r3, #8
 8006cb4:	0719      	lsls	r1, r3, #28
 8006cb6:	bf04      	itt	eq
 8006cb8:	091b      	lsreq	r3, r3, #4
 8006cba:	3004      	addeq	r0, #4
 8006cbc:	0799      	lsls	r1, r3, #30
 8006cbe:	bf04      	itt	eq
 8006cc0:	089b      	lsreq	r3, r3, #2
 8006cc2:	3002      	addeq	r0, #2
 8006cc4:	07d9      	lsls	r1, r3, #31
 8006cc6:	d403      	bmi.n	8006cd0 <__lo0bits+0x4e>
 8006cc8:	085b      	lsrs	r3, r3, #1
 8006cca:	f100 0001 	add.w	r0, r0, #1
 8006cce:	d003      	beq.n	8006cd8 <__lo0bits+0x56>
 8006cd0:	6013      	str	r3, [r2, #0]
 8006cd2:	4770      	bx	lr
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	4770      	bx	lr
 8006cd8:	2020      	movs	r0, #32
 8006cda:	4770      	bx	lr

08006cdc <__i2b>:
 8006cdc:	b510      	push	{r4, lr}
 8006cde:	460c      	mov	r4, r1
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	f7ff ff07 	bl	8006af4 <_Balloc>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	b928      	cbnz	r0, 8006cf6 <__i2b+0x1a>
 8006cea:	f240 1145 	movw	r1, #325	@ 0x145
 8006cee:	4b04      	ldr	r3, [pc, #16]	@ (8006d00 <__i2b+0x24>)
 8006cf0:	4804      	ldr	r0, [pc, #16]	@ (8006d04 <__i2b+0x28>)
 8006cf2:	f000 fcb7 	bl	8007664 <__assert_func>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	6144      	str	r4, [r0, #20]
 8006cfa:	6103      	str	r3, [r0, #16]
 8006cfc:	bd10      	pop	{r4, pc}
 8006cfe:	bf00      	nop
 8006d00:	0800af72 	.word	0x0800af72
 8006d04:	0800af83 	.word	0x0800af83

08006d08 <__multiply>:
 8006d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d0c:	4614      	mov	r4, r2
 8006d0e:	690a      	ldr	r2, [r1, #16]
 8006d10:	6923      	ldr	r3, [r4, #16]
 8006d12:	460f      	mov	r7, r1
 8006d14:	429a      	cmp	r2, r3
 8006d16:	bfa2      	ittt	ge
 8006d18:	4623      	movge	r3, r4
 8006d1a:	460c      	movge	r4, r1
 8006d1c:	461f      	movge	r7, r3
 8006d1e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006d22:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006d26:	68a3      	ldr	r3, [r4, #8]
 8006d28:	6861      	ldr	r1, [r4, #4]
 8006d2a:	eb0a 0609 	add.w	r6, sl, r9
 8006d2e:	42b3      	cmp	r3, r6
 8006d30:	b085      	sub	sp, #20
 8006d32:	bfb8      	it	lt
 8006d34:	3101      	addlt	r1, #1
 8006d36:	f7ff fedd 	bl	8006af4 <_Balloc>
 8006d3a:	b930      	cbnz	r0, 8006d4a <__multiply+0x42>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006d42:	4b43      	ldr	r3, [pc, #268]	@ (8006e50 <__multiply+0x148>)
 8006d44:	4843      	ldr	r0, [pc, #268]	@ (8006e54 <__multiply+0x14c>)
 8006d46:	f000 fc8d 	bl	8007664 <__assert_func>
 8006d4a:	f100 0514 	add.w	r5, r0, #20
 8006d4e:	462b      	mov	r3, r5
 8006d50:	2200      	movs	r2, #0
 8006d52:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006d56:	4543      	cmp	r3, r8
 8006d58:	d321      	bcc.n	8006d9e <__multiply+0x96>
 8006d5a:	f107 0114 	add.w	r1, r7, #20
 8006d5e:	f104 0214 	add.w	r2, r4, #20
 8006d62:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006d66:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006d6a:	9302      	str	r3, [sp, #8]
 8006d6c:	1b13      	subs	r3, r2, r4
 8006d6e:	3b15      	subs	r3, #21
 8006d70:	f023 0303 	bic.w	r3, r3, #3
 8006d74:	3304      	adds	r3, #4
 8006d76:	f104 0715 	add.w	r7, r4, #21
 8006d7a:	42ba      	cmp	r2, r7
 8006d7c:	bf38      	it	cc
 8006d7e:	2304      	movcc	r3, #4
 8006d80:	9301      	str	r3, [sp, #4]
 8006d82:	9b02      	ldr	r3, [sp, #8]
 8006d84:	9103      	str	r1, [sp, #12]
 8006d86:	428b      	cmp	r3, r1
 8006d88:	d80c      	bhi.n	8006da4 <__multiply+0x9c>
 8006d8a:	2e00      	cmp	r6, #0
 8006d8c:	dd03      	ble.n	8006d96 <__multiply+0x8e>
 8006d8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d05a      	beq.n	8006e4c <__multiply+0x144>
 8006d96:	6106      	str	r6, [r0, #16]
 8006d98:	b005      	add	sp, #20
 8006d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d9e:	f843 2b04 	str.w	r2, [r3], #4
 8006da2:	e7d8      	b.n	8006d56 <__multiply+0x4e>
 8006da4:	f8b1 a000 	ldrh.w	sl, [r1]
 8006da8:	f1ba 0f00 	cmp.w	sl, #0
 8006dac:	d023      	beq.n	8006df6 <__multiply+0xee>
 8006dae:	46a9      	mov	r9, r5
 8006db0:	f04f 0c00 	mov.w	ip, #0
 8006db4:	f104 0e14 	add.w	lr, r4, #20
 8006db8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006dbc:	f8d9 3000 	ldr.w	r3, [r9]
 8006dc0:	fa1f fb87 	uxth.w	fp, r7
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	fb0a 330b 	mla	r3, sl, fp, r3
 8006dca:	4463      	add	r3, ip
 8006dcc:	f8d9 c000 	ldr.w	ip, [r9]
 8006dd0:	0c3f      	lsrs	r7, r7, #16
 8006dd2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006dd6:	fb0a c707 	mla	r7, sl, r7, ip
 8006dda:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006de4:	4572      	cmp	r2, lr
 8006de6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006dea:	f849 3b04 	str.w	r3, [r9], #4
 8006dee:	d8e3      	bhi.n	8006db8 <__multiply+0xb0>
 8006df0:	9b01      	ldr	r3, [sp, #4]
 8006df2:	f845 c003 	str.w	ip, [r5, r3]
 8006df6:	9b03      	ldr	r3, [sp, #12]
 8006df8:	3104      	adds	r1, #4
 8006dfa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006dfe:	f1b9 0f00 	cmp.w	r9, #0
 8006e02:	d021      	beq.n	8006e48 <__multiply+0x140>
 8006e04:	46ae      	mov	lr, r5
 8006e06:	f04f 0a00 	mov.w	sl, #0
 8006e0a:	682b      	ldr	r3, [r5, #0]
 8006e0c:	f104 0c14 	add.w	ip, r4, #20
 8006e10:	f8bc b000 	ldrh.w	fp, [ip]
 8006e14:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	fb09 770b 	mla	r7, r9, fp, r7
 8006e1e:	4457      	add	r7, sl
 8006e20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006e24:	f84e 3b04 	str.w	r3, [lr], #4
 8006e28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006e2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e30:	f8be 3000 	ldrh.w	r3, [lr]
 8006e34:	4562      	cmp	r2, ip
 8006e36:	fb09 330a 	mla	r3, r9, sl, r3
 8006e3a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006e3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e42:	d8e5      	bhi.n	8006e10 <__multiply+0x108>
 8006e44:	9f01      	ldr	r7, [sp, #4]
 8006e46:	51eb      	str	r3, [r5, r7]
 8006e48:	3504      	adds	r5, #4
 8006e4a:	e79a      	b.n	8006d82 <__multiply+0x7a>
 8006e4c:	3e01      	subs	r6, #1
 8006e4e:	e79c      	b.n	8006d8a <__multiply+0x82>
 8006e50:	0800af72 	.word	0x0800af72
 8006e54:	0800af83 	.word	0x0800af83

08006e58 <__pow5mult>:
 8006e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e5c:	4615      	mov	r5, r2
 8006e5e:	f012 0203 	ands.w	r2, r2, #3
 8006e62:	4607      	mov	r7, r0
 8006e64:	460e      	mov	r6, r1
 8006e66:	d007      	beq.n	8006e78 <__pow5mult+0x20>
 8006e68:	4c25      	ldr	r4, [pc, #148]	@ (8006f00 <__pow5mult+0xa8>)
 8006e6a:	3a01      	subs	r2, #1
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e72:	f7ff fea1 	bl	8006bb8 <__multadd>
 8006e76:	4606      	mov	r6, r0
 8006e78:	10ad      	asrs	r5, r5, #2
 8006e7a:	d03d      	beq.n	8006ef8 <__pow5mult+0xa0>
 8006e7c:	69fc      	ldr	r4, [r7, #28]
 8006e7e:	b97c      	cbnz	r4, 8006ea0 <__pow5mult+0x48>
 8006e80:	2010      	movs	r0, #16
 8006e82:	f7ff fd81 	bl	8006988 <malloc>
 8006e86:	4602      	mov	r2, r0
 8006e88:	61f8      	str	r0, [r7, #28]
 8006e8a:	b928      	cbnz	r0, 8006e98 <__pow5mult+0x40>
 8006e8c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006e90:	4b1c      	ldr	r3, [pc, #112]	@ (8006f04 <__pow5mult+0xac>)
 8006e92:	481d      	ldr	r0, [pc, #116]	@ (8006f08 <__pow5mult+0xb0>)
 8006e94:	f000 fbe6 	bl	8007664 <__assert_func>
 8006e98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e9c:	6004      	str	r4, [r0, #0]
 8006e9e:	60c4      	str	r4, [r0, #12]
 8006ea0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006ea4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ea8:	b94c      	cbnz	r4, 8006ebe <__pow5mult+0x66>
 8006eaa:	f240 2171 	movw	r1, #625	@ 0x271
 8006eae:	4638      	mov	r0, r7
 8006eb0:	f7ff ff14 	bl	8006cdc <__i2b>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ebc:	6003      	str	r3, [r0, #0]
 8006ebe:	f04f 0900 	mov.w	r9, #0
 8006ec2:	07eb      	lsls	r3, r5, #31
 8006ec4:	d50a      	bpl.n	8006edc <__pow5mult+0x84>
 8006ec6:	4631      	mov	r1, r6
 8006ec8:	4622      	mov	r2, r4
 8006eca:	4638      	mov	r0, r7
 8006ecc:	f7ff ff1c 	bl	8006d08 <__multiply>
 8006ed0:	4680      	mov	r8, r0
 8006ed2:	4631      	mov	r1, r6
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	f7ff fe4d 	bl	8006b74 <_Bfree>
 8006eda:	4646      	mov	r6, r8
 8006edc:	106d      	asrs	r5, r5, #1
 8006ede:	d00b      	beq.n	8006ef8 <__pow5mult+0xa0>
 8006ee0:	6820      	ldr	r0, [r4, #0]
 8006ee2:	b938      	cbnz	r0, 8006ef4 <__pow5mult+0x9c>
 8006ee4:	4622      	mov	r2, r4
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	4638      	mov	r0, r7
 8006eea:	f7ff ff0d 	bl	8006d08 <__multiply>
 8006eee:	6020      	str	r0, [r4, #0]
 8006ef0:	f8c0 9000 	str.w	r9, [r0]
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	e7e4      	b.n	8006ec2 <__pow5mult+0x6a>
 8006ef8:	4630      	mov	r0, r6
 8006efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006efe:	bf00      	nop
 8006f00:	0800afdc 	.word	0x0800afdc
 8006f04:	0800af03 	.word	0x0800af03
 8006f08:	0800af83 	.word	0x0800af83

08006f0c <__lshift>:
 8006f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f10:	460c      	mov	r4, r1
 8006f12:	4607      	mov	r7, r0
 8006f14:	4691      	mov	r9, r2
 8006f16:	6923      	ldr	r3, [r4, #16]
 8006f18:	6849      	ldr	r1, [r1, #4]
 8006f1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f1e:	68a3      	ldr	r3, [r4, #8]
 8006f20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f24:	f108 0601 	add.w	r6, r8, #1
 8006f28:	42b3      	cmp	r3, r6
 8006f2a:	db0b      	blt.n	8006f44 <__lshift+0x38>
 8006f2c:	4638      	mov	r0, r7
 8006f2e:	f7ff fde1 	bl	8006af4 <_Balloc>
 8006f32:	4605      	mov	r5, r0
 8006f34:	b948      	cbnz	r0, 8006f4a <__lshift+0x3e>
 8006f36:	4602      	mov	r2, r0
 8006f38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006f3c:	4b27      	ldr	r3, [pc, #156]	@ (8006fdc <__lshift+0xd0>)
 8006f3e:	4828      	ldr	r0, [pc, #160]	@ (8006fe0 <__lshift+0xd4>)
 8006f40:	f000 fb90 	bl	8007664 <__assert_func>
 8006f44:	3101      	adds	r1, #1
 8006f46:	005b      	lsls	r3, r3, #1
 8006f48:	e7ee      	b.n	8006f28 <__lshift+0x1c>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	f100 0114 	add.w	r1, r0, #20
 8006f50:	f100 0210 	add.w	r2, r0, #16
 8006f54:	4618      	mov	r0, r3
 8006f56:	4553      	cmp	r3, sl
 8006f58:	db33      	blt.n	8006fc2 <__lshift+0xb6>
 8006f5a:	6920      	ldr	r0, [r4, #16]
 8006f5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f60:	f104 0314 	add.w	r3, r4, #20
 8006f64:	f019 091f 	ands.w	r9, r9, #31
 8006f68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f70:	d02b      	beq.n	8006fca <__lshift+0xbe>
 8006f72:	468a      	mov	sl, r1
 8006f74:	2200      	movs	r2, #0
 8006f76:	f1c9 0e20 	rsb	lr, r9, #32
 8006f7a:	6818      	ldr	r0, [r3, #0]
 8006f7c:	fa00 f009 	lsl.w	r0, r0, r9
 8006f80:	4310      	orrs	r0, r2
 8006f82:	f84a 0b04 	str.w	r0, [sl], #4
 8006f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f8a:	459c      	cmp	ip, r3
 8006f8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006f90:	d8f3      	bhi.n	8006f7a <__lshift+0x6e>
 8006f92:	ebac 0304 	sub.w	r3, ip, r4
 8006f96:	3b15      	subs	r3, #21
 8006f98:	f023 0303 	bic.w	r3, r3, #3
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	f104 0015 	add.w	r0, r4, #21
 8006fa2:	4584      	cmp	ip, r0
 8006fa4:	bf38      	it	cc
 8006fa6:	2304      	movcc	r3, #4
 8006fa8:	50ca      	str	r2, [r1, r3]
 8006faa:	b10a      	cbz	r2, 8006fb0 <__lshift+0xa4>
 8006fac:	f108 0602 	add.w	r6, r8, #2
 8006fb0:	3e01      	subs	r6, #1
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	4621      	mov	r1, r4
 8006fb6:	612e      	str	r6, [r5, #16]
 8006fb8:	f7ff fddc 	bl	8006b74 <_Bfree>
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	e7c5      	b.n	8006f56 <__lshift+0x4a>
 8006fca:	3904      	subs	r1, #4
 8006fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fd0:	459c      	cmp	ip, r3
 8006fd2:	f841 2f04 	str.w	r2, [r1, #4]!
 8006fd6:	d8f9      	bhi.n	8006fcc <__lshift+0xc0>
 8006fd8:	e7ea      	b.n	8006fb0 <__lshift+0xa4>
 8006fda:	bf00      	nop
 8006fdc:	0800af72 	.word	0x0800af72
 8006fe0:	0800af83 	.word	0x0800af83

08006fe4 <__mcmp>:
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	690a      	ldr	r2, [r1, #16]
 8006fe8:	6900      	ldr	r0, [r0, #16]
 8006fea:	b530      	push	{r4, r5, lr}
 8006fec:	1a80      	subs	r0, r0, r2
 8006fee:	d10e      	bne.n	800700e <__mcmp+0x2a>
 8006ff0:	3314      	adds	r3, #20
 8006ff2:	3114      	adds	r1, #20
 8006ff4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ff8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006ffc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007000:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007004:	4295      	cmp	r5, r2
 8007006:	d003      	beq.n	8007010 <__mcmp+0x2c>
 8007008:	d205      	bcs.n	8007016 <__mcmp+0x32>
 800700a:	f04f 30ff 	mov.w	r0, #4294967295
 800700e:	bd30      	pop	{r4, r5, pc}
 8007010:	42a3      	cmp	r3, r4
 8007012:	d3f3      	bcc.n	8006ffc <__mcmp+0x18>
 8007014:	e7fb      	b.n	800700e <__mcmp+0x2a>
 8007016:	2001      	movs	r0, #1
 8007018:	e7f9      	b.n	800700e <__mcmp+0x2a>
	...

0800701c <__mdiff>:
 800701c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007020:	4689      	mov	r9, r1
 8007022:	4606      	mov	r6, r0
 8007024:	4611      	mov	r1, r2
 8007026:	4648      	mov	r0, r9
 8007028:	4614      	mov	r4, r2
 800702a:	f7ff ffdb 	bl	8006fe4 <__mcmp>
 800702e:	1e05      	subs	r5, r0, #0
 8007030:	d112      	bne.n	8007058 <__mdiff+0x3c>
 8007032:	4629      	mov	r1, r5
 8007034:	4630      	mov	r0, r6
 8007036:	f7ff fd5d 	bl	8006af4 <_Balloc>
 800703a:	4602      	mov	r2, r0
 800703c:	b928      	cbnz	r0, 800704a <__mdiff+0x2e>
 800703e:	f240 2137 	movw	r1, #567	@ 0x237
 8007042:	4b3e      	ldr	r3, [pc, #248]	@ (800713c <__mdiff+0x120>)
 8007044:	483e      	ldr	r0, [pc, #248]	@ (8007140 <__mdiff+0x124>)
 8007046:	f000 fb0d 	bl	8007664 <__assert_func>
 800704a:	2301      	movs	r3, #1
 800704c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007050:	4610      	mov	r0, r2
 8007052:	b003      	add	sp, #12
 8007054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007058:	bfbc      	itt	lt
 800705a:	464b      	movlt	r3, r9
 800705c:	46a1      	movlt	r9, r4
 800705e:	4630      	mov	r0, r6
 8007060:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007064:	bfba      	itte	lt
 8007066:	461c      	movlt	r4, r3
 8007068:	2501      	movlt	r5, #1
 800706a:	2500      	movge	r5, #0
 800706c:	f7ff fd42 	bl	8006af4 <_Balloc>
 8007070:	4602      	mov	r2, r0
 8007072:	b918      	cbnz	r0, 800707c <__mdiff+0x60>
 8007074:	f240 2145 	movw	r1, #581	@ 0x245
 8007078:	4b30      	ldr	r3, [pc, #192]	@ (800713c <__mdiff+0x120>)
 800707a:	e7e3      	b.n	8007044 <__mdiff+0x28>
 800707c:	f100 0b14 	add.w	fp, r0, #20
 8007080:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007084:	f109 0310 	add.w	r3, r9, #16
 8007088:	60c5      	str	r5, [r0, #12]
 800708a:	f04f 0c00 	mov.w	ip, #0
 800708e:	f109 0514 	add.w	r5, r9, #20
 8007092:	46d9      	mov	r9, fp
 8007094:	6926      	ldr	r6, [r4, #16]
 8007096:	f104 0e14 	add.w	lr, r4, #20
 800709a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800709e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80070a2:	9301      	str	r3, [sp, #4]
 80070a4:	9b01      	ldr	r3, [sp, #4]
 80070a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80070aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80070ae:	b281      	uxth	r1, r0
 80070b0:	9301      	str	r3, [sp, #4]
 80070b2:	fa1f f38a 	uxth.w	r3, sl
 80070b6:	1a5b      	subs	r3, r3, r1
 80070b8:	0c00      	lsrs	r0, r0, #16
 80070ba:	4463      	add	r3, ip
 80070bc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80070c0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80070ca:	4576      	cmp	r6, lr
 80070cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80070d0:	f849 3b04 	str.w	r3, [r9], #4
 80070d4:	d8e6      	bhi.n	80070a4 <__mdiff+0x88>
 80070d6:	1b33      	subs	r3, r6, r4
 80070d8:	3b15      	subs	r3, #21
 80070da:	f023 0303 	bic.w	r3, r3, #3
 80070de:	3415      	adds	r4, #21
 80070e0:	3304      	adds	r3, #4
 80070e2:	42a6      	cmp	r6, r4
 80070e4:	bf38      	it	cc
 80070e6:	2304      	movcc	r3, #4
 80070e8:	441d      	add	r5, r3
 80070ea:	445b      	add	r3, fp
 80070ec:	461e      	mov	r6, r3
 80070ee:	462c      	mov	r4, r5
 80070f0:	4544      	cmp	r4, r8
 80070f2:	d30e      	bcc.n	8007112 <__mdiff+0xf6>
 80070f4:	f108 0103 	add.w	r1, r8, #3
 80070f8:	1b49      	subs	r1, r1, r5
 80070fa:	f021 0103 	bic.w	r1, r1, #3
 80070fe:	3d03      	subs	r5, #3
 8007100:	45a8      	cmp	r8, r5
 8007102:	bf38      	it	cc
 8007104:	2100      	movcc	r1, #0
 8007106:	440b      	add	r3, r1
 8007108:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800710c:	b199      	cbz	r1, 8007136 <__mdiff+0x11a>
 800710e:	6117      	str	r7, [r2, #16]
 8007110:	e79e      	b.n	8007050 <__mdiff+0x34>
 8007112:	46e6      	mov	lr, ip
 8007114:	f854 1b04 	ldr.w	r1, [r4], #4
 8007118:	fa1f fc81 	uxth.w	ip, r1
 800711c:	44f4      	add	ip, lr
 800711e:	0c08      	lsrs	r0, r1, #16
 8007120:	4471      	add	r1, lr
 8007122:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007126:	b289      	uxth	r1, r1
 8007128:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800712c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007130:	f846 1b04 	str.w	r1, [r6], #4
 8007134:	e7dc      	b.n	80070f0 <__mdiff+0xd4>
 8007136:	3f01      	subs	r7, #1
 8007138:	e7e6      	b.n	8007108 <__mdiff+0xec>
 800713a:	bf00      	nop
 800713c:	0800af72 	.word	0x0800af72
 8007140:	0800af83 	.word	0x0800af83

08007144 <__d2b>:
 8007144:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007148:	2101      	movs	r1, #1
 800714a:	4690      	mov	r8, r2
 800714c:	4699      	mov	r9, r3
 800714e:	9e08      	ldr	r6, [sp, #32]
 8007150:	f7ff fcd0 	bl	8006af4 <_Balloc>
 8007154:	4604      	mov	r4, r0
 8007156:	b930      	cbnz	r0, 8007166 <__d2b+0x22>
 8007158:	4602      	mov	r2, r0
 800715a:	f240 310f 	movw	r1, #783	@ 0x30f
 800715e:	4b23      	ldr	r3, [pc, #140]	@ (80071ec <__d2b+0xa8>)
 8007160:	4823      	ldr	r0, [pc, #140]	@ (80071f0 <__d2b+0xac>)
 8007162:	f000 fa7f 	bl	8007664 <__assert_func>
 8007166:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800716a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800716e:	b10d      	cbz	r5, 8007174 <__d2b+0x30>
 8007170:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007174:	9301      	str	r3, [sp, #4]
 8007176:	f1b8 0300 	subs.w	r3, r8, #0
 800717a:	d024      	beq.n	80071c6 <__d2b+0x82>
 800717c:	4668      	mov	r0, sp
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	f7ff fd7f 	bl	8006c82 <__lo0bits>
 8007184:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007188:	b1d8      	cbz	r0, 80071c2 <__d2b+0x7e>
 800718a:	f1c0 0320 	rsb	r3, r0, #32
 800718e:	fa02 f303 	lsl.w	r3, r2, r3
 8007192:	430b      	orrs	r3, r1
 8007194:	40c2      	lsrs	r2, r0
 8007196:	6163      	str	r3, [r4, #20]
 8007198:	9201      	str	r2, [sp, #4]
 800719a:	9b01      	ldr	r3, [sp, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	bf0c      	ite	eq
 80071a0:	2201      	moveq	r2, #1
 80071a2:	2202      	movne	r2, #2
 80071a4:	61a3      	str	r3, [r4, #24]
 80071a6:	6122      	str	r2, [r4, #16]
 80071a8:	b1ad      	cbz	r5, 80071d6 <__d2b+0x92>
 80071aa:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80071ae:	4405      	add	r5, r0
 80071b0:	6035      	str	r5, [r6, #0]
 80071b2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80071b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071b8:	6018      	str	r0, [r3, #0]
 80071ba:	4620      	mov	r0, r4
 80071bc:	b002      	add	sp, #8
 80071be:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80071c2:	6161      	str	r1, [r4, #20]
 80071c4:	e7e9      	b.n	800719a <__d2b+0x56>
 80071c6:	a801      	add	r0, sp, #4
 80071c8:	f7ff fd5b 	bl	8006c82 <__lo0bits>
 80071cc:	9b01      	ldr	r3, [sp, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	6163      	str	r3, [r4, #20]
 80071d2:	3020      	adds	r0, #32
 80071d4:	e7e7      	b.n	80071a6 <__d2b+0x62>
 80071d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80071da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80071de:	6030      	str	r0, [r6, #0]
 80071e0:	6918      	ldr	r0, [r3, #16]
 80071e2:	f7ff fd2f 	bl	8006c44 <__hi0bits>
 80071e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80071ea:	e7e4      	b.n	80071b6 <__d2b+0x72>
 80071ec:	0800af72 	.word	0x0800af72
 80071f0:	0800af83 	.word	0x0800af83

080071f4 <__ssputs_r>:
 80071f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071f8:	461f      	mov	r7, r3
 80071fa:	688e      	ldr	r6, [r1, #8]
 80071fc:	4682      	mov	sl, r0
 80071fe:	42be      	cmp	r6, r7
 8007200:	460c      	mov	r4, r1
 8007202:	4690      	mov	r8, r2
 8007204:	680b      	ldr	r3, [r1, #0]
 8007206:	d82d      	bhi.n	8007264 <__ssputs_r+0x70>
 8007208:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800720c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007210:	d026      	beq.n	8007260 <__ssputs_r+0x6c>
 8007212:	6965      	ldr	r5, [r4, #20]
 8007214:	6909      	ldr	r1, [r1, #16]
 8007216:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800721a:	eba3 0901 	sub.w	r9, r3, r1
 800721e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007222:	1c7b      	adds	r3, r7, #1
 8007224:	444b      	add	r3, r9
 8007226:	106d      	asrs	r5, r5, #1
 8007228:	429d      	cmp	r5, r3
 800722a:	bf38      	it	cc
 800722c:	461d      	movcc	r5, r3
 800722e:	0553      	lsls	r3, r2, #21
 8007230:	d527      	bpl.n	8007282 <__ssputs_r+0x8e>
 8007232:	4629      	mov	r1, r5
 8007234:	f7ff fbd2 	bl	80069dc <_malloc_r>
 8007238:	4606      	mov	r6, r0
 800723a:	b360      	cbz	r0, 8007296 <__ssputs_r+0xa2>
 800723c:	464a      	mov	r2, r9
 800723e:	6921      	ldr	r1, [r4, #16]
 8007240:	f000 fa02 	bl	8007648 <memcpy>
 8007244:	89a3      	ldrh	r3, [r4, #12]
 8007246:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800724a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800724e:	81a3      	strh	r3, [r4, #12]
 8007250:	6126      	str	r6, [r4, #16]
 8007252:	444e      	add	r6, r9
 8007254:	6026      	str	r6, [r4, #0]
 8007256:	463e      	mov	r6, r7
 8007258:	6165      	str	r5, [r4, #20]
 800725a:	eba5 0509 	sub.w	r5, r5, r9
 800725e:	60a5      	str	r5, [r4, #8]
 8007260:	42be      	cmp	r6, r7
 8007262:	d900      	bls.n	8007266 <__ssputs_r+0x72>
 8007264:	463e      	mov	r6, r7
 8007266:	4632      	mov	r2, r6
 8007268:	4641      	mov	r1, r8
 800726a:	6820      	ldr	r0, [r4, #0]
 800726c:	f000 f9c2 	bl	80075f4 <memmove>
 8007270:	2000      	movs	r0, #0
 8007272:	68a3      	ldr	r3, [r4, #8]
 8007274:	1b9b      	subs	r3, r3, r6
 8007276:	60a3      	str	r3, [r4, #8]
 8007278:	6823      	ldr	r3, [r4, #0]
 800727a:	4433      	add	r3, r6
 800727c:	6023      	str	r3, [r4, #0]
 800727e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007282:	462a      	mov	r2, r5
 8007284:	f000 fa32 	bl	80076ec <_realloc_r>
 8007288:	4606      	mov	r6, r0
 800728a:	2800      	cmp	r0, #0
 800728c:	d1e0      	bne.n	8007250 <__ssputs_r+0x5c>
 800728e:	4650      	mov	r0, sl
 8007290:	6921      	ldr	r1, [r4, #16]
 8007292:	f7ff fb31 	bl	80068f8 <_free_r>
 8007296:	230c      	movs	r3, #12
 8007298:	f8ca 3000 	str.w	r3, [sl]
 800729c:	89a3      	ldrh	r3, [r4, #12]
 800729e:	f04f 30ff 	mov.w	r0, #4294967295
 80072a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072a6:	81a3      	strh	r3, [r4, #12]
 80072a8:	e7e9      	b.n	800727e <__ssputs_r+0x8a>
	...

080072ac <_svfiprintf_r>:
 80072ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b0:	4698      	mov	r8, r3
 80072b2:	898b      	ldrh	r3, [r1, #12]
 80072b4:	4607      	mov	r7, r0
 80072b6:	061b      	lsls	r3, r3, #24
 80072b8:	460d      	mov	r5, r1
 80072ba:	4614      	mov	r4, r2
 80072bc:	b09d      	sub	sp, #116	@ 0x74
 80072be:	d510      	bpl.n	80072e2 <_svfiprintf_r+0x36>
 80072c0:	690b      	ldr	r3, [r1, #16]
 80072c2:	b973      	cbnz	r3, 80072e2 <_svfiprintf_r+0x36>
 80072c4:	2140      	movs	r1, #64	@ 0x40
 80072c6:	f7ff fb89 	bl	80069dc <_malloc_r>
 80072ca:	6028      	str	r0, [r5, #0]
 80072cc:	6128      	str	r0, [r5, #16]
 80072ce:	b930      	cbnz	r0, 80072de <_svfiprintf_r+0x32>
 80072d0:	230c      	movs	r3, #12
 80072d2:	603b      	str	r3, [r7, #0]
 80072d4:	f04f 30ff 	mov.w	r0, #4294967295
 80072d8:	b01d      	add	sp, #116	@ 0x74
 80072da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072de:	2340      	movs	r3, #64	@ 0x40
 80072e0:	616b      	str	r3, [r5, #20]
 80072e2:	2300      	movs	r3, #0
 80072e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80072e6:	2320      	movs	r3, #32
 80072e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072ec:	2330      	movs	r3, #48	@ 0x30
 80072ee:	f04f 0901 	mov.w	r9, #1
 80072f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80072f6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007490 <_svfiprintf_r+0x1e4>
 80072fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072fe:	4623      	mov	r3, r4
 8007300:	469a      	mov	sl, r3
 8007302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007306:	b10a      	cbz	r2, 800730c <_svfiprintf_r+0x60>
 8007308:	2a25      	cmp	r2, #37	@ 0x25
 800730a:	d1f9      	bne.n	8007300 <_svfiprintf_r+0x54>
 800730c:	ebba 0b04 	subs.w	fp, sl, r4
 8007310:	d00b      	beq.n	800732a <_svfiprintf_r+0x7e>
 8007312:	465b      	mov	r3, fp
 8007314:	4622      	mov	r2, r4
 8007316:	4629      	mov	r1, r5
 8007318:	4638      	mov	r0, r7
 800731a:	f7ff ff6b 	bl	80071f4 <__ssputs_r>
 800731e:	3001      	adds	r0, #1
 8007320:	f000 80a7 	beq.w	8007472 <_svfiprintf_r+0x1c6>
 8007324:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007326:	445a      	add	r2, fp
 8007328:	9209      	str	r2, [sp, #36]	@ 0x24
 800732a:	f89a 3000 	ldrb.w	r3, [sl]
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 809f 	beq.w	8007472 <_svfiprintf_r+0x1c6>
 8007334:	2300      	movs	r3, #0
 8007336:	f04f 32ff 	mov.w	r2, #4294967295
 800733a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800733e:	f10a 0a01 	add.w	sl, sl, #1
 8007342:	9304      	str	r3, [sp, #16]
 8007344:	9307      	str	r3, [sp, #28]
 8007346:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800734a:	931a      	str	r3, [sp, #104]	@ 0x68
 800734c:	4654      	mov	r4, sl
 800734e:	2205      	movs	r2, #5
 8007350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007354:	484e      	ldr	r0, [pc, #312]	@ (8007490 <_svfiprintf_r+0x1e4>)
 8007356:	f7fe fc70 	bl	8005c3a <memchr>
 800735a:	9a04      	ldr	r2, [sp, #16]
 800735c:	b9d8      	cbnz	r0, 8007396 <_svfiprintf_r+0xea>
 800735e:	06d0      	lsls	r0, r2, #27
 8007360:	bf44      	itt	mi
 8007362:	2320      	movmi	r3, #32
 8007364:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007368:	0711      	lsls	r1, r2, #28
 800736a:	bf44      	itt	mi
 800736c:	232b      	movmi	r3, #43	@ 0x2b
 800736e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007372:	f89a 3000 	ldrb.w	r3, [sl]
 8007376:	2b2a      	cmp	r3, #42	@ 0x2a
 8007378:	d015      	beq.n	80073a6 <_svfiprintf_r+0xfa>
 800737a:	4654      	mov	r4, sl
 800737c:	2000      	movs	r0, #0
 800737e:	f04f 0c0a 	mov.w	ip, #10
 8007382:	9a07      	ldr	r2, [sp, #28]
 8007384:	4621      	mov	r1, r4
 8007386:	f811 3b01 	ldrb.w	r3, [r1], #1
 800738a:	3b30      	subs	r3, #48	@ 0x30
 800738c:	2b09      	cmp	r3, #9
 800738e:	d94b      	bls.n	8007428 <_svfiprintf_r+0x17c>
 8007390:	b1b0      	cbz	r0, 80073c0 <_svfiprintf_r+0x114>
 8007392:	9207      	str	r2, [sp, #28]
 8007394:	e014      	b.n	80073c0 <_svfiprintf_r+0x114>
 8007396:	eba0 0308 	sub.w	r3, r0, r8
 800739a:	fa09 f303 	lsl.w	r3, r9, r3
 800739e:	4313      	orrs	r3, r2
 80073a0:	46a2      	mov	sl, r4
 80073a2:	9304      	str	r3, [sp, #16]
 80073a4:	e7d2      	b.n	800734c <_svfiprintf_r+0xa0>
 80073a6:	9b03      	ldr	r3, [sp, #12]
 80073a8:	1d19      	adds	r1, r3, #4
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	9103      	str	r1, [sp, #12]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	bfbb      	ittet	lt
 80073b2:	425b      	neglt	r3, r3
 80073b4:	f042 0202 	orrlt.w	r2, r2, #2
 80073b8:	9307      	strge	r3, [sp, #28]
 80073ba:	9307      	strlt	r3, [sp, #28]
 80073bc:	bfb8      	it	lt
 80073be:	9204      	strlt	r2, [sp, #16]
 80073c0:	7823      	ldrb	r3, [r4, #0]
 80073c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80073c4:	d10a      	bne.n	80073dc <_svfiprintf_r+0x130>
 80073c6:	7863      	ldrb	r3, [r4, #1]
 80073c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80073ca:	d132      	bne.n	8007432 <_svfiprintf_r+0x186>
 80073cc:	9b03      	ldr	r3, [sp, #12]
 80073ce:	3402      	adds	r4, #2
 80073d0:	1d1a      	adds	r2, r3, #4
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	9203      	str	r2, [sp, #12]
 80073d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073da:	9305      	str	r3, [sp, #20]
 80073dc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007494 <_svfiprintf_r+0x1e8>
 80073e0:	2203      	movs	r2, #3
 80073e2:	4650      	mov	r0, sl
 80073e4:	7821      	ldrb	r1, [r4, #0]
 80073e6:	f7fe fc28 	bl	8005c3a <memchr>
 80073ea:	b138      	cbz	r0, 80073fc <_svfiprintf_r+0x150>
 80073ec:	2240      	movs	r2, #64	@ 0x40
 80073ee:	9b04      	ldr	r3, [sp, #16]
 80073f0:	eba0 000a 	sub.w	r0, r0, sl
 80073f4:	4082      	lsls	r2, r0
 80073f6:	4313      	orrs	r3, r2
 80073f8:	3401      	adds	r4, #1
 80073fa:	9304      	str	r3, [sp, #16]
 80073fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007400:	2206      	movs	r2, #6
 8007402:	4825      	ldr	r0, [pc, #148]	@ (8007498 <_svfiprintf_r+0x1ec>)
 8007404:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007408:	f7fe fc17 	bl	8005c3a <memchr>
 800740c:	2800      	cmp	r0, #0
 800740e:	d036      	beq.n	800747e <_svfiprintf_r+0x1d2>
 8007410:	4b22      	ldr	r3, [pc, #136]	@ (800749c <_svfiprintf_r+0x1f0>)
 8007412:	bb1b      	cbnz	r3, 800745c <_svfiprintf_r+0x1b0>
 8007414:	9b03      	ldr	r3, [sp, #12]
 8007416:	3307      	adds	r3, #7
 8007418:	f023 0307 	bic.w	r3, r3, #7
 800741c:	3308      	adds	r3, #8
 800741e:	9303      	str	r3, [sp, #12]
 8007420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007422:	4433      	add	r3, r6
 8007424:	9309      	str	r3, [sp, #36]	@ 0x24
 8007426:	e76a      	b.n	80072fe <_svfiprintf_r+0x52>
 8007428:	460c      	mov	r4, r1
 800742a:	2001      	movs	r0, #1
 800742c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007430:	e7a8      	b.n	8007384 <_svfiprintf_r+0xd8>
 8007432:	2300      	movs	r3, #0
 8007434:	f04f 0c0a 	mov.w	ip, #10
 8007438:	4619      	mov	r1, r3
 800743a:	3401      	adds	r4, #1
 800743c:	9305      	str	r3, [sp, #20]
 800743e:	4620      	mov	r0, r4
 8007440:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007444:	3a30      	subs	r2, #48	@ 0x30
 8007446:	2a09      	cmp	r2, #9
 8007448:	d903      	bls.n	8007452 <_svfiprintf_r+0x1a6>
 800744a:	2b00      	cmp	r3, #0
 800744c:	d0c6      	beq.n	80073dc <_svfiprintf_r+0x130>
 800744e:	9105      	str	r1, [sp, #20]
 8007450:	e7c4      	b.n	80073dc <_svfiprintf_r+0x130>
 8007452:	4604      	mov	r4, r0
 8007454:	2301      	movs	r3, #1
 8007456:	fb0c 2101 	mla	r1, ip, r1, r2
 800745a:	e7f0      	b.n	800743e <_svfiprintf_r+0x192>
 800745c:	ab03      	add	r3, sp, #12
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	462a      	mov	r2, r5
 8007462:	4638      	mov	r0, r7
 8007464:	4b0e      	ldr	r3, [pc, #56]	@ (80074a0 <_svfiprintf_r+0x1f4>)
 8007466:	a904      	add	r1, sp, #16
 8007468:	f7fd fe84 	bl	8005174 <_printf_float>
 800746c:	1c42      	adds	r2, r0, #1
 800746e:	4606      	mov	r6, r0
 8007470:	d1d6      	bne.n	8007420 <_svfiprintf_r+0x174>
 8007472:	89ab      	ldrh	r3, [r5, #12]
 8007474:	065b      	lsls	r3, r3, #25
 8007476:	f53f af2d 	bmi.w	80072d4 <_svfiprintf_r+0x28>
 800747a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800747c:	e72c      	b.n	80072d8 <_svfiprintf_r+0x2c>
 800747e:	ab03      	add	r3, sp, #12
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	462a      	mov	r2, r5
 8007484:	4638      	mov	r0, r7
 8007486:	4b06      	ldr	r3, [pc, #24]	@ (80074a0 <_svfiprintf_r+0x1f4>)
 8007488:	a904      	add	r1, sp, #16
 800748a:	f7fe f911 	bl	80056b0 <_printf_i>
 800748e:	e7ed      	b.n	800746c <_svfiprintf_r+0x1c0>
 8007490:	0800b0d8 	.word	0x0800b0d8
 8007494:	0800b0de 	.word	0x0800b0de
 8007498:	0800b0e2 	.word	0x0800b0e2
 800749c:	08005175 	.word	0x08005175
 80074a0:	080071f5 	.word	0x080071f5

080074a4 <__sflush_r>:
 80074a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074aa:	0716      	lsls	r6, r2, #28
 80074ac:	4605      	mov	r5, r0
 80074ae:	460c      	mov	r4, r1
 80074b0:	d454      	bmi.n	800755c <__sflush_r+0xb8>
 80074b2:	684b      	ldr	r3, [r1, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	dc02      	bgt.n	80074be <__sflush_r+0x1a>
 80074b8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	dd48      	ble.n	8007550 <__sflush_r+0xac>
 80074be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074c0:	2e00      	cmp	r6, #0
 80074c2:	d045      	beq.n	8007550 <__sflush_r+0xac>
 80074c4:	2300      	movs	r3, #0
 80074c6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80074ca:	682f      	ldr	r7, [r5, #0]
 80074cc:	6a21      	ldr	r1, [r4, #32]
 80074ce:	602b      	str	r3, [r5, #0]
 80074d0:	d030      	beq.n	8007534 <__sflush_r+0x90>
 80074d2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80074d4:	89a3      	ldrh	r3, [r4, #12]
 80074d6:	0759      	lsls	r1, r3, #29
 80074d8:	d505      	bpl.n	80074e6 <__sflush_r+0x42>
 80074da:	6863      	ldr	r3, [r4, #4]
 80074dc:	1ad2      	subs	r2, r2, r3
 80074de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80074e0:	b10b      	cbz	r3, 80074e6 <__sflush_r+0x42>
 80074e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80074e4:	1ad2      	subs	r2, r2, r3
 80074e6:	2300      	movs	r3, #0
 80074e8:	4628      	mov	r0, r5
 80074ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074ec:	6a21      	ldr	r1, [r4, #32]
 80074ee:	47b0      	blx	r6
 80074f0:	1c43      	adds	r3, r0, #1
 80074f2:	89a3      	ldrh	r3, [r4, #12]
 80074f4:	d106      	bne.n	8007504 <__sflush_r+0x60>
 80074f6:	6829      	ldr	r1, [r5, #0]
 80074f8:	291d      	cmp	r1, #29
 80074fa:	d82b      	bhi.n	8007554 <__sflush_r+0xb0>
 80074fc:	4a28      	ldr	r2, [pc, #160]	@ (80075a0 <__sflush_r+0xfc>)
 80074fe:	410a      	asrs	r2, r1
 8007500:	07d6      	lsls	r6, r2, #31
 8007502:	d427      	bmi.n	8007554 <__sflush_r+0xb0>
 8007504:	2200      	movs	r2, #0
 8007506:	6062      	str	r2, [r4, #4]
 8007508:	6922      	ldr	r2, [r4, #16]
 800750a:	04d9      	lsls	r1, r3, #19
 800750c:	6022      	str	r2, [r4, #0]
 800750e:	d504      	bpl.n	800751a <__sflush_r+0x76>
 8007510:	1c42      	adds	r2, r0, #1
 8007512:	d101      	bne.n	8007518 <__sflush_r+0x74>
 8007514:	682b      	ldr	r3, [r5, #0]
 8007516:	b903      	cbnz	r3, 800751a <__sflush_r+0x76>
 8007518:	6560      	str	r0, [r4, #84]	@ 0x54
 800751a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800751c:	602f      	str	r7, [r5, #0]
 800751e:	b1b9      	cbz	r1, 8007550 <__sflush_r+0xac>
 8007520:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007524:	4299      	cmp	r1, r3
 8007526:	d002      	beq.n	800752e <__sflush_r+0x8a>
 8007528:	4628      	mov	r0, r5
 800752a:	f7ff f9e5 	bl	80068f8 <_free_r>
 800752e:	2300      	movs	r3, #0
 8007530:	6363      	str	r3, [r4, #52]	@ 0x34
 8007532:	e00d      	b.n	8007550 <__sflush_r+0xac>
 8007534:	2301      	movs	r3, #1
 8007536:	4628      	mov	r0, r5
 8007538:	47b0      	blx	r6
 800753a:	4602      	mov	r2, r0
 800753c:	1c50      	adds	r0, r2, #1
 800753e:	d1c9      	bne.n	80074d4 <__sflush_r+0x30>
 8007540:	682b      	ldr	r3, [r5, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0c6      	beq.n	80074d4 <__sflush_r+0x30>
 8007546:	2b1d      	cmp	r3, #29
 8007548:	d001      	beq.n	800754e <__sflush_r+0xaa>
 800754a:	2b16      	cmp	r3, #22
 800754c:	d11d      	bne.n	800758a <__sflush_r+0xe6>
 800754e:	602f      	str	r7, [r5, #0]
 8007550:	2000      	movs	r0, #0
 8007552:	e021      	b.n	8007598 <__sflush_r+0xf4>
 8007554:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007558:	b21b      	sxth	r3, r3
 800755a:	e01a      	b.n	8007592 <__sflush_r+0xee>
 800755c:	690f      	ldr	r7, [r1, #16]
 800755e:	2f00      	cmp	r7, #0
 8007560:	d0f6      	beq.n	8007550 <__sflush_r+0xac>
 8007562:	0793      	lsls	r3, r2, #30
 8007564:	bf18      	it	ne
 8007566:	2300      	movne	r3, #0
 8007568:	680e      	ldr	r6, [r1, #0]
 800756a:	bf08      	it	eq
 800756c:	694b      	ldreq	r3, [r1, #20]
 800756e:	1bf6      	subs	r6, r6, r7
 8007570:	600f      	str	r7, [r1, #0]
 8007572:	608b      	str	r3, [r1, #8]
 8007574:	2e00      	cmp	r6, #0
 8007576:	ddeb      	ble.n	8007550 <__sflush_r+0xac>
 8007578:	4633      	mov	r3, r6
 800757a:	463a      	mov	r2, r7
 800757c:	4628      	mov	r0, r5
 800757e:	6a21      	ldr	r1, [r4, #32]
 8007580:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007584:	47e0      	blx	ip
 8007586:	2800      	cmp	r0, #0
 8007588:	dc07      	bgt.n	800759a <__sflush_r+0xf6>
 800758a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800758e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007592:	f04f 30ff 	mov.w	r0, #4294967295
 8007596:	81a3      	strh	r3, [r4, #12]
 8007598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800759a:	4407      	add	r7, r0
 800759c:	1a36      	subs	r6, r6, r0
 800759e:	e7e9      	b.n	8007574 <__sflush_r+0xd0>
 80075a0:	dfbffffe 	.word	0xdfbffffe

080075a4 <_fflush_r>:
 80075a4:	b538      	push	{r3, r4, r5, lr}
 80075a6:	690b      	ldr	r3, [r1, #16]
 80075a8:	4605      	mov	r5, r0
 80075aa:	460c      	mov	r4, r1
 80075ac:	b913      	cbnz	r3, 80075b4 <_fflush_r+0x10>
 80075ae:	2500      	movs	r5, #0
 80075b0:	4628      	mov	r0, r5
 80075b2:	bd38      	pop	{r3, r4, r5, pc}
 80075b4:	b118      	cbz	r0, 80075be <_fflush_r+0x1a>
 80075b6:	6a03      	ldr	r3, [r0, #32]
 80075b8:	b90b      	cbnz	r3, 80075be <_fflush_r+0x1a>
 80075ba:	f7fe fa25 	bl	8005a08 <__sinit>
 80075be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d0f3      	beq.n	80075ae <_fflush_r+0xa>
 80075c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80075c8:	07d0      	lsls	r0, r2, #31
 80075ca:	d404      	bmi.n	80075d6 <_fflush_r+0x32>
 80075cc:	0599      	lsls	r1, r3, #22
 80075ce:	d402      	bmi.n	80075d6 <_fflush_r+0x32>
 80075d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075d2:	f7fe fb30 	bl	8005c36 <__retarget_lock_acquire_recursive>
 80075d6:	4628      	mov	r0, r5
 80075d8:	4621      	mov	r1, r4
 80075da:	f7ff ff63 	bl	80074a4 <__sflush_r>
 80075de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075e0:	4605      	mov	r5, r0
 80075e2:	07da      	lsls	r2, r3, #31
 80075e4:	d4e4      	bmi.n	80075b0 <_fflush_r+0xc>
 80075e6:	89a3      	ldrh	r3, [r4, #12]
 80075e8:	059b      	lsls	r3, r3, #22
 80075ea:	d4e1      	bmi.n	80075b0 <_fflush_r+0xc>
 80075ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075ee:	f7fe fb23 	bl	8005c38 <__retarget_lock_release_recursive>
 80075f2:	e7dd      	b.n	80075b0 <_fflush_r+0xc>

080075f4 <memmove>:
 80075f4:	4288      	cmp	r0, r1
 80075f6:	b510      	push	{r4, lr}
 80075f8:	eb01 0402 	add.w	r4, r1, r2
 80075fc:	d902      	bls.n	8007604 <memmove+0x10>
 80075fe:	4284      	cmp	r4, r0
 8007600:	4623      	mov	r3, r4
 8007602:	d807      	bhi.n	8007614 <memmove+0x20>
 8007604:	1e43      	subs	r3, r0, #1
 8007606:	42a1      	cmp	r1, r4
 8007608:	d008      	beq.n	800761c <memmove+0x28>
 800760a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800760e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007612:	e7f8      	b.n	8007606 <memmove+0x12>
 8007614:	4601      	mov	r1, r0
 8007616:	4402      	add	r2, r0
 8007618:	428a      	cmp	r2, r1
 800761a:	d100      	bne.n	800761e <memmove+0x2a>
 800761c:	bd10      	pop	{r4, pc}
 800761e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007622:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007626:	e7f7      	b.n	8007618 <memmove+0x24>

08007628 <_sbrk_r>:
 8007628:	b538      	push	{r3, r4, r5, lr}
 800762a:	2300      	movs	r3, #0
 800762c:	4d05      	ldr	r5, [pc, #20]	@ (8007644 <_sbrk_r+0x1c>)
 800762e:	4604      	mov	r4, r0
 8007630:	4608      	mov	r0, r1
 8007632:	602b      	str	r3, [r5, #0]
 8007634:	f7fb f8e2 	bl	80027fc <_sbrk>
 8007638:	1c43      	adds	r3, r0, #1
 800763a:	d102      	bne.n	8007642 <_sbrk_r+0x1a>
 800763c:	682b      	ldr	r3, [r5, #0]
 800763e:	b103      	cbz	r3, 8007642 <_sbrk_r+0x1a>
 8007640:	6023      	str	r3, [r4, #0]
 8007642:	bd38      	pop	{r3, r4, r5, pc}
 8007644:	20000e44 	.word	0x20000e44

08007648 <memcpy>:
 8007648:	440a      	add	r2, r1
 800764a:	4291      	cmp	r1, r2
 800764c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007650:	d100      	bne.n	8007654 <memcpy+0xc>
 8007652:	4770      	bx	lr
 8007654:	b510      	push	{r4, lr}
 8007656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800765a:	4291      	cmp	r1, r2
 800765c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007660:	d1f9      	bne.n	8007656 <memcpy+0xe>
 8007662:	bd10      	pop	{r4, pc}

08007664 <__assert_func>:
 8007664:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007666:	4614      	mov	r4, r2
 8007668:	461a      	mov	r2, r3
 800766a:	4b09      	ldr	r3, [pc, #36]	@ (8007690 <__assert_func+0x2c>)
 800766c:	4605      	mov	r5, r0
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68d8      	ldr	r0, [r3, #12]
 8007672:	b954      	cbnz	r4, 800768a <__assert_func+0x26>
 8007674:	4b07      	ldr	r3, [pc, #28]	@ (8007694 <__assert_func+0x30>)
 8007676:	461c      	mov	r4, r3
 8007678:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800767c:	9100      	str	r1, [sp, #0]
 800767e:	462b      	mov	r3, r5
 8007680:	4905      	ldr	r1, [pc, #20]	@ (8007698 <__assert_func+0x34>)
 8007682:	f000 f86f 	bl	8007764 <fiprintf>
 8007686:	f000 f87f 	bl	8007788 <abort>
 800768a:	4b04      	ldr	r3, [pc, #16]	@ (800769c <__assert_func+0x38>)
 800768c:	e7f4      	b.n	8007678 <__assert_func+0x14>
 800768e:	bf00      	nop
 8007690:	2000002c 	.word	0x2000002c
 8007694:	0800b12c 	.word	0x0800b12c
 8007698:	0800b0fe 	.word	0x0800b0fe
 800769c:	0800b0f1 	.word	0x0800b0f1

080076a0 <_calloc_r>:
 80076a0:	b570      	push	{r4, r5, r6, lr}
 80076a2:	fba1 5402 	umull	r5, r4, r1, r2
 80076a6:	b93c      	cbnz	r4, 80076b8 <_calloc_r+0x18>
 80076a8:	4629      	mov	r1, r5
 80076aa:	f7ff f997 	bl	80069dc <_malloc_r>
 80076ae:	4606      	mov	r6, r0
 80076b0:	b928      	cbnz	r0, 80076be <_calloc_r+0x1e>
 80076b2:	2600      	movs	r6, #0
 80076b4:	4630      	mov	r0, r6
 80076b6:	bd70      	pop	{r4, r5, r6, pc}
 80076b8:	220c      	movs	r2, #12
 80076ba:	6002      	str	r2, [r0, #0]
 80076bc:	e7f9      	b.n	80076b2 <_calloc_r+0x12>
 80076be:	462a      	mov	r2, r5
 80076c0:	4621      	mov	r1, r4
 80076c2:	f7fe fa3a 	bl	8005b3a <memset>
 80076c6:	e7f5      	b.n	80076b4 <_calloc_r+0x14>

080076c8 <__ascii_mbtowc>:
 80076c8:	b082      	sub	sp, #8
 80076ca:	b901      	cbnz	r1, 80076ce <__ascii_mbtowc+0x6>
 80076cc:	a901      	add	r1, sp, #4
 80076ce:	b142      	cbz	r2, 80076e2 <__ascii_mbtowc+0x1a>
 80076d0:	b14b      	cbz	r3, 80076e6 <__ascii_mbtowc+0x1e>
 80076d2:	7813      	ldrb	r3, [r2, #0]
 80076d4:	600b      	str	r3, [r1, #0]
 80076d6:	7812      	ldrb	r2, [r2, #0]
 80076d8:	1e10      	subs	r0, r2, #0
 80076da:	bf18      	it	ne
 80076dc:	2001      	movne	r0, #1
 80076de:	b002      	add	sp, #8
 80076e0:	4770      	bx	lr
 80076e2:	4610      	mov	r0, r2
 80076e4:	e7fb      	b.n	80076de <__ascii_mbtowc+0x16>
 80076e6:	f06f 0001 	mvn.w	r0, #1
 80076ea:	e7f8      	b.n	80076de <__ascii_mbtowc+0x16>

080076ec <_realloc_r>:
 80076ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076f0:	4680      	mov	r8, r0
 80076f2:	4615      	mov	r5, r2
 80076f4:	460c      	mov	r4, r1
 80076f6:	b921      	cbnz	r1, 8007702 <_realloc_r+0x16>
 80076f8:	4611      	mov	r1, r2
 80076fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076fe:	f7ff b96d 	b.w	80069dc <_malloc_r>
 8007702:	b92a      	cbnz	r2, 8007710 <_realloc_r+0x24>
 8007704:	f7ff f8f8 	bl	80068f8 <_free_r>
 8007708:	2400      	movs	r4, #0
 800770a:	4620      	mov	r0, r4
 800770c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007710:	f000 f841 	bl	8007796 <_malloc_usable_size_r>
 8007714:	4285      	cmp	r5, r0
 8007716:	4606      	mov	r6, r0
 8007718:	d802      	bhi.n	8007720 <_realloc_r+0x34>
 800771a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800771e:	d8f4      	bhi.n	800770a <_realloc_r+0x1e>
 8007720:	4629      	mov	r1, r5
 8007722:	4640      	mov	r0, r8
 8007724:	f7ff f95a 	bl	80069dc <_malloc_r>
 8007728:	4607      	mov	r7, r0
 800772a:	2800      	cmp	r0, #0
 800772c:	d0ec      	beq.n	8007708 <_realloc_r+0x1c>
 800772e:	42b5      	cmp	r5, r6
 8007730:	462a      	mov	r2, r5
 8007732:	4621      	mov	r1, r4
 8007734:	bf28      	it	cs
 8007736:	4632      	movcs	r2, r6
 8007738:	f7ff ff86 	bl	8007648 <memcpy>
 800773c:	4621      	mov	r1, r4
 800773e:	4640      	mov	r0, r8
 8007740:	f7ff f8da 	bl	80068f8 <_free_r>
 8007744:	463c      	mov	r4, r7
 8007746:	e7e0      	b.n	800770a <_realloc_r+0x1e>

08007748 <__ascii_wctomb>:
 8007748:	4603      	mov	r3, r0
 800774a:	4608      	mov	r0, r1
 800774c:	b141      	cbz	r1, 8007760 <__ascii_wctomb+0x18>
 800774e:	2aff      	cmp	r2, #255	@ 0xff
 8007750:	d904      	bls.n	800775c <__ascii_wctomb+0x14>
 8007752:	228a      	movs	r2, #138	@ 0x8a
 8007754:	f04f 30ff 	mov.w	r0, #4294967295
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	4770      	bx	lr
 800775c:	2001      	movs	r0, #1
 800775e:	700a      	strb	r2, [r1, #0]
 8007760:	4770      	bx	lr
	...

08007764 <fiprintf>:
 8007764:	b40e      	push	{r1, r2, r3}
 8007766:	b503      	push	{r0, r1, lr}
 8007768:	4601      	mov	r1, r0
 800776a:	ab03      	add	r3, sp, #12
 800776c:	4805      	ldr	r0, [pc, #20]	@ (8007784 <fiprintf+0x20>)
 800776e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007772:	6800      	ldr	r0, [r0, #0]
 8007774:	9301      	str	r3, [sp, #4]
 8007776:	f000 f83d 	bl	80077f4 <_vfiprintf_r>
 800777a:	b002      	add	sp, #8
 800777c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007780:	b003      	add	sp, #12
 8007782:	4770      	bx	lr
 8007784:	2000002c 	.word	0x2000002c

08007788 <abort>:
 8007788:	2006      	movs	r0, #6
 800778a:	b508      	push	{r3, lr}
 800778c:	f000 fa06 	bl	8007b9c <raise>
 8007790:	2001      	movs	r0, #1
 8007792:	f7fb f805 	bl	80027a0 <_exit>

08007796 <_malloc_usable_size_r>:
 8007796:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800779a:	1f18      	subs	r0, r3, #4
 800779c:	2b00      	cmp	r3, #0
 800779e:	bfbc      	itt	lt
 80077a0:	580b      	ldrlt	r3, [r1, r0]
 80077a2:	18c0      	addlt	r0, r0, r3
 80077a4:	4770      	bx	lr

080077a6 <__sfputc_r>:
 80077a6:	6893      	ldr	r3, [r2, #8]
 80077a8:	b410      	push	{r4}
 80077aa:	3b01      	subs	r3, #1
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	6093      	str	r3, [r2, #8]
 80077b0:	da07      	bge.n	80077c2 <__sfputc_r+0x1c>
 80077b2:	6994      	ldr	r4, [r2, #24]
 80077b4:	42a3      	cmp	r3, r4
 80077b6:	db01      	blt.n	80077bc <__sfputc_r+0x16>
 80077b8:	290a      	cmp	r1, #10
 80077ba:	d102      	bne.n	80077c2 <__sfputc_r+0x1c>
 80077bc:	bc10      	pop	{r4}
 80077be:	f000 b931 	b.w	8007a24 <__swbuf_r>
 80077c2:	6813      	ldr	r3, [r2, #0]
 80077c4:	1c58      	adds	r0, r3, #1
 80077c6:	6010      	str	r0, [r2, #0]
 80077c8:	7019      	strb	r1, [r3, #0]
 80077ca:	4608      	mov	r0, r1
 80077cc:	bc10      	pop	{r4}
 80077ce:	4770      	bx	lr

080077d0 <__sfputs_r>:
 80077d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d2:	4606      	mov	r6, r0
 80077d4:	460f      	mov	r7, r1
 80077d6:	4614      	mov	r4, r2
 80077d8:	18d5      	adds	r5, r2, r3
 80077da:	42ac      	cmp	r4, r5
 80077dc:	d101      	bne.n	80077e2 <__sfputs_r+0x12>
 80077de:	2000      	movs	r0, #0
 80077e0:	e007      	b.n	80077f2 <__sfputs_r+0x22>
 80077e2:	463a      	mov	r2, r7
 80077e4:	4630      	mov	r0, r6
 80077e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ea:	f7ff ffdc 	bl	80077a6 <__sfputc_r>
 80077ee:	1c43      	adds	r3, r0, #1
 80077f0:	d1f3      	bne.n	80077da <__sfputs_r+0xa>
 80077f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080077f4 <_vfiprintf_r>:
 80077f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f8:	460d      	mov	r5, r1
 80077fa:	4614      	mov	r4, r2
 80077fc:	4698      	mov	r8, r3
 80077fe:	4606      	mov	r6, r0
 8007800:	b09d      	sub	sp, #116	@ 0x74
 8007802:	b118      	cbz	r0, 800780c <_vfiprintf_r+0x18>
 8007804:	6a03      	ldr	r3, [r0, #32]
 8007806:	b90b      	cbnz	r3, 800780c <_vfiprintf_r+0x18>
 8007808:	f7fe f8fe 	bl	8005a08 <__sinit>
 800780c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800780e:	07d9      	lsls	r1, r3, #31
 8007810:	d405      	bmi.n	800781e <_vfiprintf_r+0x2a>
 8007812:	89ab      	ldrh	r3, [r5, #12]
 8007814:	059a      	lsls	r2, r3, #22
 8007816:	d402      	bmi.n	800781e <_vfiprintf_r+0x2a>
 8007818:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800781a:	f7fe fa0c 	bl	8005c36 <__retarget_lock_acquire_recursive>
 800781e:	89ab      	ldrh	r3, [r5, #12]
 8007820:	071b      	lsls	r3, r3, #28
 8007822:	d501      	bpl.n	8007828 <_vfiprintf_r+0x34>
 8007824:	692b      	ldr	r3, [r5, #16]
 8007826:	b99b      	cbnz	r3, 8007850 <_vfiprintf_r+0x5c>
 8007828:	4629      	mov	r1, r5
 800782a:	4630      	mov	r0, r6
 800782c:	f000 f938 	bl	8007aa0 <__swsetup_r>
 8007830:	b170      	cbz	r0, 8007850 <_vfiprintf_r+0x5c>
 8007832:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007834:	07dc      	lsls	r4, r3, #31
 8007836:	d504      	bpl.n	8007842 <_vfiprintf_r+0x4e>
 8007838:	f04f 30ff 	mov.w	r0, #4294967295
 800783c:	b01d      	add	sp, #116	@ 0x74
 800783e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007842:	89ab      	ldrh	r3, [r5, #12]
 8007844:	0598      	lsls	r0, r3, #22
 8007846:	d4f7      	bmi.n	8007838 <_vfiprintf_r+0x44>
 8007848:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800784a:	f7fe f9f5 	bl	8005c38 <__retarget_lock_release_recursive>
 800784e:	e7f3      	b.n	8007838 <_vfiprintf_r+0x44>
 8007850:	2300      	movs	r3, #0
 8007852:	9309      	str	r3, [sp, #36]	@ 0x24
 8007854:	2320      	movs	r3, #32
 8007856:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800785a:	2330      	movs	r3, #48	@ 0x30
 800785c:	f04f 0901 	mov.w	r9, #1
 8007860:	f8cd 800c 	str.w	r8, [sp, #12]
 8007864:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007a10 <_vfiprintf_r+0x21c>
 8007868:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800786c:	4623      	mov	r3, r4
 800786e:	469a      	mov	sl, r3
 8007870:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007874:	b10a      	cbz	r2, 800787a <_vfiprintf_r+0x86>
 8007876:	2a25      	cmp	r2, #37	@ 0x25
 8007878:	d1f9      	bne.n	800786e <_vfiprintf_r+0x7a>
 800787a:	ebba 0b04 	subs.w	fp, sl, r4
 800787e:	d00b      	beq.n	8007898 <_vfiprintf_r+0xa4>
 8007880:	465b      	mov	r3, fp
 8007882:	4622      	mov	r2, r4
 8007884:	4629      	mov	r1, r5
 8007886:	4630      	mov	r0, r6
 8007888:	f7ff ffa2 	bl	80077d0 <__sfputs_r>
 800788c:	3001      	adds	r0, #1
 800788e:	f000 80a7 	beq.w	80079e0 <_vfiprintf_r+0x1ec>
 8007892:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007894:	445a      	add	r2, fp
 8007896:	9209      	str	r2, [sp, #36]	@ 0x24
 8007898:	f89a 3000 	ldrb.w	r3, [sl]
 800789c:	2b00      	cmp	r3, #0
 800789e:	f000 809f 	beq.w	80079e0 <_vfiprintf_r+0x1ec>
 80078a2:	2300      	movs	r3, #0
 80078a4:	f04f 32ff 	mov.w	r2, #4294967295
 80078a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078ac:	f10a 0a01 	add.w	sl, sl, #1
 80078b0:	9304      	str	r3, [sp, #16]
 80078b2:	9307      	str	r3, [sp, #28]
 80078b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80078b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80078ba:	4654      	mov	r4, sl
 80078bc:	2205      	movs	r2, #5
 80078be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078c2:	4853      	ldr	r0, [pc, #332]	@ (8007a10 <_vfiprintf_r+0x21c>)
 80078c4:	f7fe f9b9 	bl	8005c3a <memchr>
 80078c8:	9a04      	ldr	r2, [sp, #16]
 80078ca:	b9d8      	cbnz	r0, 8007904 <_vfiprintf_r+0x110>
 80078cc:	06d1      	lsls	r1, r2, #27
 80078ce:	bf44      	itt	mi
 80078d0:	2320      	movmi	r3, #32
 80078d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078d6:	0713      	lsls	r3, r2, #28
 80078d8:	bf44      	itt	mi
 80078da:	232b      	movmi	r3, #43	@ 0x2b
 80078dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078e0:	f89a 3000 	ldrb.w	r3, [sl]
 80078e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80078e6:	d015      	beq.n	8007914 <_vfiprintf_r+0x120>
 80078e8:	4654      	mov	r4, sl
 80078ea:	2000      	movs	r0, #0
 80078ec:	f04f 0c0a 	mov.w	ip, #10
 80078f0:	9a07      	ldr	r2, [sp, #28]
 80078f2:	4621      	mov	r1, r4
 80078f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078f8:	3b30      	subs	r3, #48	@ 0x30
 80078fa:	2b09      	cmp	r3, #9
 80078fc:	d94b      	bls.n	8007996 <_vfiprintf_r+0x1a2>
 80078fe:	b1b0      	cbz	r0, 800792e <_vfiprintf_r+0x13a>
 8007900:	9207      	str	r2, [sp, #28]
 8007902:	e014      	b.n	800792e <_vfiprintf_r+0x13a>
 8007904:	eba0 0308 	sub.w	r3, r0, r8
 8007908:	fa09 f303 	lsl.w	r3, r9, r3
 800790c:	4313      	orrs	r3, r2
 800790e:	46a2      	mov	sl, r4
 8007910:	9304      	str	r3, [sp, #16]
 8007912:	e7d2      	b.n	80078ba <_vfiprintf_r+0xc6>
 8007914:	9b03      	ldr	r3, [sp, #12]
 8007916:	1d19      	adds	r1, r3, #4
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	9103      	str	r1, [sp, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	bfbb      	ittet	lt
 8007920:	425b      	neglt	r3, r3
 8007922:	f042 0202 	orrlt.w	r2, r2, #2
 8007926:	9307      	strge	r3, [sp, #28]
 8007928:	9307      	strlt	r3, [sp, #28]
 800792a:	bfb8      	it	lt
 800792c:	9204      	strlt	r2, [sp, #16]
 800792e:	7823      	ldrb	r3, [r4, #0]
 8007930:	2b2e      	cmp	r3, #46	@ 0x2e
 8007932:	d10a      	bne.n	800794a <_vfiprintf_r+0x156>
 8007934:	7863      	ldrb	r3, [r4, #1]
 8007936:	2b2a      	cmp	r3, #42	@ 0x2a
 8007938:	d132      	bne.n	80079a0 <_vfiprintf_r+0x1ac>
 800793a:	9b03      	ldr	r3, [sp, #12]
 800793c:	3402      	adds	r4, #2
 800793e:	1d1a      	adds	r2, r3, #4
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	9203      	str	r2, [sp, #12]
 8007944:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007948:	9305      	str	r3, [sp, #20]
 800794a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007a14 <_vfiprintf_r+0x220>
 800794e:	2203      	movs	r2, #3
 8007950:	4650      	mov	r0, sl
 8007952:	7821      	ldrb	r1, [r4, #0]
 8007954:	f7fe f971 	bl	8005c3a <memchr>
 8007958:	b138      	cbz	r0, 800796a <_vfiprintf_r+0x176>
 800795a:	2240      	movs	r2, #64	@ 0x40
 800795c:	9b04      	ldr	r3, [sp, #16]
 800795e:	eba0 000a 	sub.w	r0, r0, sl
 8007962:	4082      	lsls	r2, r0
 8007964:	4313      	orrs	r3, r2
 8007966:	3401      	adds	r4, #1
 8007968:	9304      	str	r3, [sp, #16]
 800796a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800796e:	2206      	movs	r2, #6
 8007970:	4829      	ldr	r0, [pc, #164]	@ (8007a18 <_vfiprintf_r+0x224>)
 8007972:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007976:	f7fe f960 	bl	8005c3a <memchr>
 800797a:	2800      	cmp	r0, #0
 800797c:	d03f      	beq.n	80079fe <_vfiprintf_r+0x20a>
 800797e:	4b27      	ldr	r3, [pc, #156]	@ (8007a1c <_vfiprintf_r+0x228>)
 8007980:	bb1b      	cbnz	r3, 80079ca <_vfiprintf_r+0x1d6>
 8007982:	9b03      	ldr	r3, [sp, #12]
 8007984:	3307      	adds	r3, #7
 8007986:	f023 0307 	bic.w	r3, r3, #7
 800798a:	3308      	adds	r3, #8
 800798c:	9303      	str	r3, [sp, #12]
 800798e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007990:	443b      	add	r3, r7
 8007992:	9309      	str	r3, [sp, #36]	@ 0x24
 8007994:	e76a      	b.n	800786c <_vfiprintf_r+0x78>
 8007996:	460c      	mov	r4, r1
 8007998:	2001      	movs	r0, #1
 800799a:	fb0c 3202 	mla	r2, ip, r2, r3
 800799e:	e7a8      	b.n	80078f2 <_vfiprintf_r+0xfe>
 80079a0:	2300      	movs	r3, #0
 80079a2:	f04f 0c0a 	mov.w	ip, #10
 80079a6:	4619      	mov	r1, r3
 80079a8:	3401      	adds	r4, #1
 80079aa:	9305      	str	r3, [sp, #20]
 80079ac:	4620      	mov	r0, r4
 80079ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079b2:	3a30      	subs	r2, #48	@ 0x30
 80079b4:	2a09      	cmp	r2, #9
 80079b6:	d903      	bls.n	80079c0 <_vfiprintf_r+0x1cc>
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0c6      	beq.n	800794a <_vfiprintf_r+0x156>
 80079bc:	9105      	str	r1, [sp, #20]
 80079be:	e7c4      	b.n	800794a <_vfiprintf_r+0x156>
 80079c0:	4604      	mov	r4, r0
 80079c2:	2301      	movs	r3, #1
 80079c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80079c8:	e7f0      	b.n	80079ac <_vfiprintf_r+0x1b8>
 80079ca:	ab03      	add	r3, sp, #12
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	462a      	mov	r2, r5
 80079d0:	4630      	mov	r0, r6
 80079d2:	4b13      	ldr	r3, [pc, #76]	@ (8007a20 <_vfiprintf_r+0x22c>)
 80079d4:	a904      	add	r1, sp, #16
 80079d6:	f7fd fbcd 	bl	8005174 <_printf_float>
 80079da:	4607      	mov	r7, r0
 80079dc:	1c78      	adds	r0, r7, #1
 80079de:	d1d6      	bne.n	800798e <_vfiprintf_r+0x19a>
 80079e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079e2:	07d9      	lsls	r1, r3, #31
 80079e4:	d405      	bmi.n	80079f2 <_vfiprintf_r+0x1fe>
 80079e6:	89ab      	ldrh	r3, [r5, #12]
 80079e8:	059a      	lsls	r2, r3, #22
 80079ea:	d402      	bmi.n	80079f2 <_vfiprintf_r+0x1fe>
 80079ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079ee:	f7fe f923 	bl	8005c38 <__retarget_lock_release_recursive>
 80079f2:	89ab      	ldrh	r3, [r5, #12]
 80079f4:	065b      	lsls	r3, r3, #25
 80079f6:	f53f af1f 	bmi.w	8007838 <_vfiprintf_r+0x44>
 80079fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079fc:	e71e      	b.n	800783c <_vfiprintf_r+0x48>
 80079fe:	ab03      	add	r3, sp, #12
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	462a      	mov	r2, r5
 8007a04:	4630      	mov	r0, r6
 8007a06:	4b06      	ldr	r3, [pc, #24]	@ (8007a20 <_vfiprintf_r+0x22c>)
 8007a08:	a904      	add	r1, sp, #16
 8007a0a:	f7fd fe51 	bl	80056b0 <_printf_i>
 8007a0e:	e7e4      	b.n	80079da <_vfiprintf_r+0x1e6>
 8007a10:	0800b0d8 	.word	0x0800b0d8
 8007a14:	0800b0de 	.word	0x0800b0de
 8007a18:	0800b0e2 	.word	0x0800b0e2
 8007a1c:	08005175 	.word	0x08005175
 8007a20:	080077d1 	.word	0x080077d1

08007a24 <__swbuf_r>:
 8007a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a26:	460e      	mov	r6, r1
 8007a28:	4614      	mov	r4, r2
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	b118      	cbz	r0, 8007a36 <__swbuf_r+0x12>
 8007a2e:	6a03      	ldr	r3, [r0, #32]
 8007a30:	b90b      	cbnz	r3, 8007a36 <__swbuf_r+0x12>
 8007a32:	f7fd ffe9 	bl	8005a08 <__sinit>
 8007a36:	69a3      	ldr	r3, [r4, #24]
 8007a38:	60a3      	str	r3, [r4, #8]
 8007a3a:	89a3      	ldrh	r3, [r4, #12]
 8007a3c:	071a      	lsls	r2, r3, #28
 8007a3e:	d501      	bpl.n	8007a44 <__swbuf_r+0x20>
 8007a40:	6923      	ldr	r3, [r4, #16]
 8007a42:	b943      	cbnz	r3, 8007a56 <__swbuf_r+0x32>
 8007a44:	4621      	mov	r1, r4
 8007a46:	4628      	mov	r0, r5
 8007a48:	f000 f82a 	bl	8007aa0 <__swsetup_r>
 8007a4c:	b118      	cbz	r0, 8007a56 <__swbuf_r+0x32>
 8007a4e:	f04f 37ff 	mov.w	r7, #4294967295
 8007a52:	4638      	mov	r0, r7
 8007a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	6922      	ldr	r2, [r4, #16]
 8007a5a:	b2f6      	uxtb	r6, r6
 8007a5c:	1a98      	subs	r0, r3, r2
 8007a5e:	6963      	ldr	r3, [r4, #20]
 8007a60:	4637      	mov	r7, r6
 8007a62:	4283      	cmp	r3, r0
 8007a64:	dc05      	bgt.n	8007a72 <__swbuf_r+0x4e>
 8007a66:	4621      	mov	r1, r4
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f7ff fd9b 	bl	80075a4 <_fflush_r>
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	d1ed      	bne.n	8007a4e <__swbuf_r+0x2a>
 8007a72:	68a3      	ldr	r3, [r4, #8]
 8007a74:	3b01      	subs	r3, #1
 8007a76:	60a3      	str	r3, [r4, #8]
 8007a78:	6823      	ldr	r3, [r4, #0]
 8007a7a:	1c5a      	adds	r2, r3, #1
 8007a7c:	6022      	str	r2, [r4, #0]
 8007a7e:	701e      	strb	r6, [r3, #0]
 8007a80:	6962      	ldr	r2, [r4, #20]
 8007a82:	1c43      	adds	r3, r0, #1
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d004      	beq.n	8007a92 <__swbuf_r+0x6e>
 8007a88:	89a3      	ldrh	r3, [r4, #12]
 8007a8a:	07db      	lsls	r3, r3, #31
 8007a8c:	d5e1      	bpl.n	8007a52 <__swbuf_r+0x2e>
 8007a8e:	2e0a      	cmp	r6, #10
 8007a90:	d1df      	bne.n	8007a52 <__swbuf_r+0x2e>
 8007a92:	4621      	mov	r1, r4
 8007a94:	4628      	mov	r0, r5
 8007a96:	f7ff fd85 	bl	80075a4 <_fflush_r>
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	d0d9      	beq.n	8007a52 <__swbuf_r+0x2e>
 8007a9e:	e7d6      	b.n	8007a4e <__swbuf_r+0x2a>

08007aa0 <__swsetup_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4b29      	ldr	r3, [pc, #164]	@ (8007b48 <__swsetup_r+0xa8>)
 8007aa4:	4605      	mov	r5, r0
 8007aa6:	6818      	ldr	r0, [r3, #0]
 8007aa8:	460c      	mov	r4, r1
 8007aaa:	b118      	cbz	r0, 8007ab4 <__swsetup_r+0x14>
 8007aac:	6a03      	ldr	r3, [r0, #32]
 8007aae:	b90b      	cbnz	r3, 8007ab4 <__swsetup_r+0x14>
 8007ab0:	f7fd ffaa 	bl	8005a08 <__sinit>
 8007ab4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ab8:	0719      	lsls	r1, r3, #28
 8007aba:	d422      	bmi.n	8007b02 <__swsetup_r+0x62>
 8007abc:	06da      	lsls	r2, r3, #27
 8007abe:	d407      	bmi.n	8007ad0 <__swsetup_r+0x30>
 8007ac0:	2209      	movs	r2, #9
 8007ac2:	602a      	str	r2, [r5, #0]
 8007ac4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8007acc:	81a3      	strh	r3, [r4, #12]
 8007ace:	e033      	b.n	8007b38 <__swsetup_r+0x98>
 8007ad0:	0758      	lsls	r0, r3, #29
 8007ad2:	d512      	bpl.n	8007afa <__swsetup_r+0x5a>
 8007ad4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ad6:	b141      	cbz	r1, 8007aea <__swsetup_r+0x4a>
 8007ad8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007adc:	4299      	cmp	r1, r3
 8007ade:	d002      	beq.n	8007ae6 <__swsetup_r+0x46>
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	f7fe ff09 	bl	80068f8 <_free_r>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007aea:	89a3      	ldrh	r3, [r4, #12]
 8007aec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007af0:	81a3      	strh	r3, [r4, #12]
 8007af2:	2300      	movs	r3, #0
 8007af4:	6063      	str	r3, [r4, #4]
 8007af6:	6923      	ldr	r3, [r4, #16]
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	89a3      	ldrh	r3, [r4, #12]
 8007afc:	f043 0308 	orr.w	r3, r3, #8
 8007b00:	81a3      	strh	r3, [r4, #12]
 8007b02:	6923      	ldr	r3, [r4, #16]
 8007b04:	b94b      	cbnz	r3, 8007b1a <__swsetup_r+0x7a>
 8007b06:	89a3      	ldrh	r3, [r4, #12]
 8007b08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b10:	d003      	beq.n	8007b1a <__swsetup_r+0x7a>
 8007b12:	4621      	mov	r1, r4
 8007b14:	4628      	mov	r0, r5
 8007b16:	f000 f882 	bl	8007c1e <__smakebuf_r>
 8007b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b1e:	f013 0201 	ands.w	r2, r3, #1
 8007b22:	d00a      	beq.n	8007b3a <__swsetup_r+0x9a>
 8007b24:	2200      	movs	r2, #0
 8007b26:	60a2      	str	r2, [r4, #8]
 8007b28:	6962      	ldr	r2, [r4, #20]
 8007b2a:	4252      	negs	r2, r2
 8007b2c:	61a2      	str	r2, [r4, #24]
 8007b2e:	6922      	ldr	r2, [r4, #16]
 8007b30:	b942      	cbnz	r2, 8007b44 <__swsetup_r+0xa4>
 8007b32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b36:	d1c5      	bne.n	8007ac4 <__swsetup_r+0x24>
 8007b38:	bd38      	pop	{r3, r4, r5, pc}
 8007b3a:	0799      	lsls	r1, r3, #30
 8007b3c:	bf58      	it	pl
 8007b3e:	6962      	ldrpl	r2, [r4, #20]
 8007b40:	60a2      	str	r2, [r4, #8]
 8007b42:	e7f4      	b.n	8007b2e <__swsetup_r+0x8e>
 8007b44:	2000      	movs	r0, #0
 8007b46:	e7f7      	b.n	8007b38 <__swsetup_r+0x98>
 8007b48:	2000002c 	.word	0x2000002c

08007b4c <_raise_r>:
 8007b4c:	291f      	cmp	r1, #31
 8007b4e:	b538      	push	{r3, r4, r5, lr}
 8007b50:	4605      	mov	r5, r0
 8007b52:	460c      	mov	r4, r1
 8007b54:	d904      	bls.n	8007b60 <_raise_r+0x14>
 8007b56:	2316      	movs	r3, #22
 8007b58:	6003      	str	r3, [r0, #0]
 8007b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5e:	bd38      	pop	{r3, r4, r5, pc}
 8007b60:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007b62:	b112      	cbz	r2, 8007b6a <_raise_r+0x1e>
 8007b64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b68:	b94b      	cbnz	r3, 8007b7e <_raise_r+0x32>
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	f000 f830 	bl	8007bd0 <_getpid_r>
 8007b70:	4622      	mov	r2, r4
 8007b72:	4601      	mov	r1, r0
 8007b74:	4628      	mov	r0, r5
 8007b76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b7a:	f000 b817 	b.w	8007bac <_kill_r>
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d00a      	beq.n	8007b98 <_raise_r+0x4c>
 8007b82:	1c59      	adds	r1, r3, #1
 8007b84:	d103      	bne.n	8007b8e <_raise_r+0x42>
 8007b86:	2316      	movs	r3, #22
 8007b88:	6003      	str	r3, [r0, #0]
 8007b8a:	2001      	movs	r0, #1
 8007b8c:	e7e7      	b.n	8007b5e <_raise_r+0x12>
 8007b8e:	2100      	movs	r1, #0
 8007b90:	4620      	mov	r0, r4
 8007b92:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007b96:	4798      	blx	r3
 8007b98:	2000      	movs	r0, #0
 8007b9a:	e7e0      	b.n	8007b5e <_raise_r+0x12>

08007b9c <raise>:
 8007b9c:	4b02      	ldr	r3, [pc, #8]	@ (8007ba8 <raise+0xc>)
 8007b9e:	4601      	mov	r1, r0
 8007ba0:	6818      	ldr	r0, [r3, #0]
 8007ba2:	f7ff bfd3 	b.w	8007b4c <_raise_r>
 8007ba6:	bf00      	nop
 8007ba8:	2000002c 	.word	0x2000002c

08007bac <_kill_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	2300      	movs	r3, #0
 8007bb0:	4d06      	ldr	r5, [pc, #24]	@ (8007bcc <_kill_r+0x20>)
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	4608      	mov	r0, r1
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	602b      	str	r3, [r5, #0]
 8007bba:	f7fa fde9 	bl	8002790 <_kill>
 8007bbe:	1c43      	adds	r3, r0, #1
 8007bc0:	d102      	bne.n	8007bc8 <_kill_r+0x1c>
 8007bc2:	682b      	ldr	r3, [r5, #0]
 8007bc4:	b103      	cbz	r3, 8007bc8 <_kill_r+0x1c>
 8007bc6:	6023      	str	r3, [r4, #0]
 8007bc8:	bd38      	pop	{r3, r4, r5, pc}
 8007bca:	bf00      	nop
 8007bcc:	20000e44 	.word	0x20000e44

08007bd0 <_getpid_r>:
 8007bd0:	f7fa bddc 	b.w	800278c <_getpid>

08007bd4 <__swhatbuf_r>:
 8007bd4:	b570      	push	{r4, r5, r6, lr}
 8007bd6:	460c      	mov	r4, r1
 8007bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bdc:	4615      	mov	r5, r2
 8007bde:	2900      	cmp	r1, #0
 8007be0:	461e      	mov	r6, r3
 8007be2:	b096      	sub	sp, #88	@ 0x58
 8007be4:	da0c      	bge.n	8007c00 <__swhatbuf_r+0x2c>
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	2100      	movs	r1, #0
 8007bea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007bee:	bf14      	ite	ne
 8007bf0:	2340      	movne	r3, #64	@ 0x40
 8007bf2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	6031      	str	r1, [r6, #0]
 8007bfa:	602b      	str	r3, [r5, #0]
 8007bfc:	b016      	add	sp, #88	@ 0x58
 8007bfe:	bd70      	pop	{r4, r5, r6, pc}
 8007c00:	466a      	mov	r2, sp
 8007c02:	f000 f849 	bl	8007c98 <_fstat_r>
 8007c06:	2800      	cmp	r0, #0
 8007c08:	dbed      	blt.n	8007be6 <__swhatbuf_r+0x12>
 8007c0a:	9901      	ldr	r1, [sp, #4]
 8007c0c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c10:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c14:	4259      	negs	r1, r3
 8007c16:	4159      	adcs	r1, r3
 8007c18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c1c:	e7eb      	b.n	8007bf6 <__swhatbuf_r+0x22>

08007c1e <__smakebuf_r>:
 8007c1e:	898b      	ldrh	r3, [r1, #12]
 8007c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c22:	079d      	lsls	r5, r3, #30
 8007c24:	4606      	mov	r6, r0
 8007c26:	460c      	mov	r4, r1
 8007c28:	d507      	bpl.n	8007c3a <__smakebuf_r+0x1c>
 8007c2a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c2e:	6023      	str	r3, [r4, #0]
 8007c30:	6123      	str	r3, [r4, #16]
 8007c32:	2301      	movs	r3, #1
 8007c34:	6163      	str	r3, [r4, #20]
 8007c36:	b003      	add	sp, #12
 8007c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c3a:	466a      	mov	r2, sp
 8007c3c:	ab01      	add	r3, sp, #4
 8007c3e:	f7ff ffc9 	bl	8007bd4 <__swhatbuf_r>
 8007c42:	9f00      	ldr	r7, [sp, #0]
 8007c44:	4605      	mov	r5, r0
 8007c46:	4639      	mov	r1, r7
 8007c48:	4630      	mov	r0, r6
 8007c4a:	f7fe fec7 	bl	80069dc <_malloc_r>
 8007c4e:	b948      	cbnz	r0, 8007c64 <__smakebuf_r+0x46>
 8007c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c54:	059a      	lsls	r2, r3, #22
 8007c56:	d4ee      	bmi.n	8007c36 <__smakebuf_r+0x18>
 8007c58:	f023 0303 	bic.w	r3, r3, #3
 8007c5c:	f043 0302 	orr.w	r3, r3, #2
 8007c60:	81a3      	strh	r3, [r4, #12]
 8007c62:	e7e2      	b.n	8007c2a <__smakebuf_r+0xc>
 8007c64:	89a3      	ldrh	r3, [r4, #12]
 8007c66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c6e:	81a3      	strh	r3, [r4, #12]
 8007c70:	9b01      	ldr	r3, [sp, #4]
 8007c72:	6020      	str	r0, [r4, #0]
 8007c74:	b15b      	cbz	r3, 8007c8e <__smakebuf_r+0x70>
 8007c76:	4630      	mov	r0, r6
 8007c78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c7c:	f000 f81e 	bl	8007cbc <_isatty_r>
 8007c80:	b128      	cbz	r0, 8007c8e <__smakebuf_r+0x70>
 8007c82:	89a3      	ldrh	r3, [r4, #12]
 8007c84:	f023 0303 	bic.w	r3, r3, #3
 8007c88:	f043 0301 	orr.w	r3, r3, #1
 8007c8c:	81a3      	strh	r3, [r4, #12]
 8007c8e:	89a3      	ldrh	r3, [r4, #12]
 8007c90:	431d      	orrs	r5, r3
 8007c92:	81a5      	strh	r5, [r4, #12]
 8007c94:	e7cf      	b.n	8007c36 <__smakebuf_r+0x18>
	...

08007c98 <_fstat_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	4d06      	ldr	r5, [pc, #24]	@ (8007cb8 <_fstat_r+0x20>)
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	4608      	mov	r0, r1
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	602b      	str	r3, [r5, #0]
 8007ca6:	f7fa fda0 	bl	80027ea <_fstat>
 8007caa:	1c43      	adds	r3, r0, #1
 8007cac:	d102      	bne.n	8007cb4 <_fstat_r+0x1c>
 8007cae:	682b      	ldr	r3, [r5, #0]
 8007cb0:	b103      	cbz	r3, 8007cb4 <_fstat_r+0x1c>
 8007cb2:	6023      	str	r3, [r4, #0]
 8007cb4:	bd38      	pop	{r3, r4, r5, pc}
 8007cb6:	bf00      	nop
 8007cb8:	20000e44 	.word	0x20000e44

08007cbc <_isatty_r>:
 8007cbc:	b538      	push	{r3, r4, r5, lr}
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	4d05      	ldr	r5, [pc, #20]	@ (8007cd8 <_isatty_r+0x1c>)
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	4608      	mov	r0, r1
 8007cc6:	602b      	str	r3, [r5, #0]
 8007cc8:	f7fa fd94 	bl	80027f4 <_isatty>
 8007ccc:	1c43      	adds	r3, r0, #1
 8007cce:	d102      	bne.n	8007cd6 <_isatty_r+0x1a>
 8007cd0:	682b      	ldr	r3, [r5, #0]
 8007cd2:	b103      	cbz	r3, 8007cd6 <_isatty_r+0x1a>
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	bd38      	pop	{r3, r4, r5, pc}
 8007cd8:	20000e44 	.word	0x20000e44

08007cdc <cos>:
 8007cdc:	b530      	push	{r4, r5, lr}
 8007cde:	4d20      	ldr	r5, [pc, #128]	@ (8007d60 <cos+0x84>)
 8007ce0:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8007ce4:	42ac      	cmp	r4, r5
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	b087      	sub	sp, #28
 8007cec:	d806      	bhi.n	8007cfc <cos+0x20>
 8007cee:	2200      	movs	r2, #0
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	b007      	add	sp, #28
 8007cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cf8:	f000 b87e 	b.w	8007df8 <__kernel_cos>
 8007cfc:	4d19      	ldr	r5, [pc, #100]	@ (8007d64 <cos+0x88>)
 8007cfe:	42ac      	cmp	r4, r5
 8007d00:	d903      	bls.n	8007d0a <cos+0x2e>
 8007d02:	f7f8 fae5 	bl	80002d0 <__aeabi_dsub>
 8007d06:	b007      	add	sp, #28
 8007d08:	bd30      	pop	{r4, r5, pc}
 8007d0a:	aa02      	add	r2, sp, #8
 8007d0c:	f000 f9ec 	bl	80080e8 <__ieee754_rem_pio2>
 8007d10:	f000 0003 	and.w	r0, r0, #3
 8007d14:	2801      	cmp	r0, #1
 8007d16:	d009      	beq.n	8007d2c <cos+0x50>
 8007d18:	2802      	cmp	r0, #2
 8007d1a:	d011      	beq.n	8007d40 <cos+0x64>
 8007d1c:	b9b8      	cbnz	r0, 8007d4e <cos+0x72>
 8007d1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d26:	f000 f867 	bl	8007df8 <__kernel_cos>
 8007d2a:	e7ec      	b.n	8007d06 <cos+0x2a>
 8007d2c:	9000      	str	r0, [sp, #0]
 8007d2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d36:	f000 f91f 	bl	8007f78 <__kernel_sin>
 8007d3a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8007d3e:	e7e2      	b.n	8007d06 <cos+0x2a>
 8007d40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d48:	f000 f856 	bl	8007df8 <__kernel_cos>
 8007d4c:	e7f5      	b.n	8007d3a <cos+0x5e>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d5a:	f000 f90d 	bl	8007f78 <__kernel_sin>
 8007d5e:	e7d2      	b.n	8007d06 <cos+0x2a>
 8007d60:	3fe921fb 	.word	0x3fe921fb
 8007d64:	7fefffff 	.word	0x7fefffff

08007d68 <sin>:
 8007d68:	b530      	push	{r4, r5, lr}
 8007d6a:	4d20      	ldr	r5, [pc, #128]	@ (8007dec <sin+0x84>)
 8007d6c:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8007d70:	42ac      	cmp	r4, r5
 8007d72:	4602      	mov	r2, r0
 8007d74:	460b      	mov	r3, r1
 8007d76:	b087      	sub	sp, #28
 8007d78:	d806      	bhi.n	8007d88 <sin+0x20>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	2300      	movs	r3, #0
 8007d82:	f000 f8f9 	bl	8007f78 <__kernel_sin>
 8007d86:	e004      	b.n	8007d92 <sin+0x2a>
 8007d88:	4d19      	ldr	r5, [pc, #100]	@ (8007df0 <sin+0x88>)
 8007d8a:	42ac      	cmp	r4, r5
 8007d8c:	d903      	bls.n	8007d96 <sin+0x2e>
 8007d8e:	f7f8 fa9f 	bl	80002d0 <__aeabi_dsub>
 8007d92:	b007      	add	sp, #28
 8007d94:	bd30      	pop	{r4, r5, pc}
 8007d96:	aa02      	add	r2, sp, #8
 8007d98:	f000 f9a6 	bl	80080e8 <__ieee754_rem_pio2>
 8007d9c:	f000 0003 	and.w	r0, r0, #3
 8007da0:	2801      	cmp	r0, #1
 8007da2:	d009      	beq.n	8007db8 <sin+0x50>
 8007da4:	2802      	cmp	r0, #2
 8007da6:	d00e      	beq.n	8007dc6 <sin+0x5e>
 8007da8:	b9c0      	cbnz	r0, 8007ddc <sin+0x74>
 8007daa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dae:	2301      	movs	r3, #1
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007db6:	e7e4      	b.n	8007d82 <sin+0x1a>
 8007db8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dc0:	f000 f81a 	bl	8007df8 <__kernel_cos>
 8007dc4:	e7e5      	b.n	8007d92 <sin+0x2a>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dd2:	f000 f8d1 	bl	8007f78 <__kernel_sin>
 8007dd6:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8007dda:	e7da      	b.n	8007d92 <sin+0x2a>
 8007ddc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007de0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007de4:	f000 f808 	bl	8007df8 <__kernel_cos>
 8007de8:	e7f5      	b.n	8007dd6 <sin+0x6e>
 8007dea:	bf00      	nop
 8007dec:	3fe921fb 	.word	0x3fe921fb
 8007df0:	7fefffff 	.word	0x7fefffff
 8007df4:	00000000 	.word	0x00000000

08007df8 <__kernel_cos>:
 8007df8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfc:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8007e00:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8007e04:	4680      	mov	r8, r0
 8007e06:	4689      	mov	r9, r1
 8007e08:	e9cd 2300 	strd	r2, r3, [sp]
 8007e0c:	d204      	bcs.n	8007e18 <__kernel_cos+0x20>
 8007e0e:	f7f8 fec7 	bl	8000ba0 <__aeabi_d2iz>
 8007e12:	2800      	cmp	r0, #0
 8007e14:	f000 8086 	beq.w	8007f24 <__kernel_cos+0x12c>
 8007e18:	4642      	mov	r2, r8
 8007e1a:	464b      	mov	r3, r9
 8007e1c:	4640      	mov	r0, r8
 8007e1e:	4649      	mov	r1, r9
 8007e20:	f7f8 fc0e 	bl	8000640 <__aeabi_dmul>
 8007e24:	2200      	movs	r2, #0
 8007e26:	4b4e      	ldr	r3, [pc, #312]	@ (8007f60 <__kernel_cos+0x168>)
 8007e28:	4604      	mov	r4, r0
 8007e2a:	460d      	mov	r5, r1
 8007e2c:	f7f8 fc08 	bl	8000640 <__aeabi_dmul>
 8007e30:	a33f      	add	r3, pc, #252	@ (adr r3, 8007f30 <__kernel_cos+0x138>)
 8007e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e36:	4682      	mov	sl, r0
 8007e38:	468b      	mov	fp, r1
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	f7f8 fbff 	bl	8000640 <__aeabi_dmul>
 8007e42:	a33d      	add	r3, pc, #244	@ (adr r3, 8007f38 <__kernel_cos+0x140>)
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f7f8 fa44 	bl	80002d4 <__adddf3>
 8007e4c:	4622      	mov	r2, r4
 8007e4e:	462b      	mov	r3, r5
 8007e50:	f7f8 fbf6 	bl	8000640 <__aeabi_dmul>
 8007e54:	a33a      	add	r3, pc, #232	@ (adr r3, 8007f40 <__kernel_cos+0x148>)
 8007e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5a:	f7f8 fa39 	bl	80002d0 <__aeabi_dsub>
 8007e5e:	4622      	mov	r2, r4
 8007e60:	462b      	mov	r3, r5
 8007e62:	f7f8 fbed 	bl	8000640 <__aeabi_dmul>
 8007e66:	a338      	add	r3, pc, #224	@ (adr r3, 8007f48 <__kernel_cos+0x150>)
 8007e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6c:	f7f8 fa32 	bl	80002d4 <__adddf3>
 8007e70:	4622      	mov	r2, r4
 8007e72:	462b      	mov	r3, r5
 8007e74:	f7f8 fbe4 	bl	8000640 <__aeabi_dmul>
 8007e78:	a335      	add	r3, pc, #212	@ (adr r3, 8007f50 <__kernel_cos+0x158>)
 8007e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7e:	f7f8 fa27 	bl	80002d0 <__aeabi_dsub>
 8007e82:	4622      	mov	r2, r4
 8007e84:	462b      	mov	r3, r5
 8007e86:	f7f8 fbdb 	bl	8000640 <__aeabi_dmul>
 8007e8a:	a333      	add	r3, pc, #204	@ (adr r3, 8007f58 <__kernel_cos+0x160>)
 8007e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e90:	f7f8 fa20 	bl	80002d4 <__adddf3>
 8007e94:	4622      	mov	r2, r4
 8007e96:	462b      	mov	r3, r5
 8007e98:	f7f8 fbd2 	bl	8000640 <__aeabi_dmul>
 8007e9c:	4622      	mov	r2, r4
 8007e9e:	462b      	mov	r3, r5
 8007ea0:	f7f8 fbce 	bl	8000640 <__aeabi_dmul>
 8007ea4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	460d      	mov	r5, r1
 8007eac:	4640      	mov	r0, r8
 8007eae:	4649      	mov	r1, r9
 8007eb0:	f7f8 fbc6 	bl	8000640 <__aeabi_dmul>
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	4629      	mov	r1, r5
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f7f8 fa08 	bl	80002d0 <__aeabi_dsub>
 8007ec0:	4b28      	ldr	r3, [pc, #160]	@ (8007f64 <__kernel_cos+0x16c>)
 8007ec2:	4680      	mov	r8, r0
 8007ec4:	429e      	cmp	r6, r3
 8007ec6:	4689      	mov	r9, r1
 8007ec8:	d80e      	bhi.n	8007ee8 <__kernel_cos+0xf0>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	460b      	mov	r3, r1
 8007ece:	4650      	mov	r0, sl
 8007ed0:	4659      	mov	r1, fp
 8007ed2:	f7f8 f9fd 	bl	80002d0 <__aeabi_dsub>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	2000      	movs	r0, #0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4922      	ldr	r1, [pc, #136]	@ (8007f68 <__kernel_cos+0x170>)
 8007ede:	f7f8 f9f7 	bl	80002d0 <__aeabi_dsub>
 8007ee2:	b003      	add	sp, #12
 8007ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee8:	2400      	movs	r4, #0
 8007eea:	4b20      	ldr	r3, [pc, #128]	@ (8007f6c <__kernel_cos+0x174>)
 8007eec:	4622      	mov	r2, r4
 8007eee:	429e      	cmp	r6, r3
 8007ef0:	bf8c      	ite	hi
 8007ef2:	4d1f      	ldrhi	r5, [pc, #124]	@ (8007f70 <__kernel_cos+0x178>)
 8007ef4:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8007ef8:	462b      	mov	r3, r5
 8007efa:	2000      	movs	r0, #0
 8007efc:	491a      	ldr	r1, [pc, #104]	@ (8007f68 <__kernel_cos+0x170>)
 8007efe:	f7f8 f9e7 	bl	80002d0 <__aeabi_dsub>
 8007f02:	4622      	mov	r2, r4
 8007f04:	4606      	mov	r6, r0
 8007f06:	460f      	mov	r7, r1
 8007f08:	462b      	mov	r3, r5
 8007f0a:	4650      	mov	r0, sl
 8007f0c:	4659      	mov	r1, fp
 8007f0e:	f7f8 f9df 	bl	80002d0 <__aeabi_dsub>
 8007f12:	4642      	mov	r2, r8
 8007f14:	464b      	mov	r3, r9
 8007f16:	f7f8 f9db 	bl	80002d0 <__aeabi_dsub>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	4630      	mov	r0, r6
 8007f20:	4639      	mov	r1, r7
 8007f22:	e7dc      	b.n	8007ede <__kernel_cos+0xe6>
 8007f24:	2000      	movs	r0, #0
 8007f26:	4910      	ldr	r1, [pc, #64]	@ (8007f68 <__kernel_cos+0x170>)
 8007f28:	e7db      	b.n	8007ee2 <__kernel_cos+0xea>
 8007f2a:	bf00      	nop
 8007f2c:	f3af 8000 	nop.w
 8007f30:	be8838d4 	.word	0xbe8838d4
 8007f34:	bda8fae9 	.word	0xbda8fae9
 8007f38:	bdb4b1c4 	.word	0xbdb4b1c4
 8007f3c:	3e21ee9e 	.word	0x3e21ee9e
 8007f40:	809c52ad 	.word	0x809c52ad
 8007f44:	3e927e4f 	.word	0x3e927e4f
 8007f48:	19cb1590 	.word	0x19cb1590
 8007f4c:	3efa01a0 	.word	0x3efa01a0
 8007f50:	16c15177 	.word	0x16c15177
 8007f54:	3f56c16c 	.word	0x3f56c16c
 8007f58:	5555554c 	.word	0x5555554c
 8007f5c:	3fa55555 	.word	0x3fa55555
 8007f60:	3fe00000 	.word	0x3fe00000
 8007f64:	3fd33332 	.word	0x3fd33332
 8007f68:	3ff00000 	.word	0x3ff00000
 8007f6c:	3fe90000 	.word	0x3fe90000
 8007f70:	3fd20000 	.word	0x3fd20000
 8007f74:	00000000 	.word	0x00000000

08007f78 <__kernel_sin>:
 8007f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7c:	461f      	mov	r7, r3
 8007f7e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007f82:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8007f86:	4604      	mov	r4, r0
 8007f88:	460d      	mov	r5, r1
 8007f8a:	4616      	mov	r6, r2
 8007f8c:	b085      	sub	sp, #20
 8007f8e:	d203      	bcs.n	8007f98 <__kernel_sin+0x20>
 8007f90:	f7f8 fe06 	bl	8000ba0 <__aeabi_d2iz>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d051      	beq.n	800803c <__kernel_sin+0xc4>
 8007f98:	4622      	mov	r2, r4
 8007f9a:	462b      	mov	r3, r5
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	f7f8 fb4e 	bl	8000640 <__aeabi_dmul>
 8007fa4:	4682      	mov	sl, r0
 8007fa6:	468b      	mov	fp, r1
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4620      	mov	r0, r4
 8007fae:	4629      	mov	r1, r5
 8007fb0:	f7f8 fb46 	bl	8000640 <__aeabi_dmul>
 8007fb4:	a33e      	add	r3, pc, #248	@ (adr r3, 80080b0 <__kernel_sin+0x138>)
 8007fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fba:	4680      	mov	r8, r0
 8007fbc:	4689      	mov	r9, r1
 8007fbe:	4650      	mov	r0, sl
 8007fc0:	4659      	mov	r1, fp
 8007fc2:	f7f8 fb3d 	bl	8000640 <__aeabi_dmul>
 8007fc6:	a33c      	add	r3, pc, #240	@ (adr r3, 80080b8 <__kernel_sin+0x140>)
 8007fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fcc:	f7f8 f980 	bl	80002d0 <__aeabi_dsub>
 8007fd0:	4652      	mov	r2, sl
 8007fd2:	465b      	mov	r3, fp
 8007fd4:	f7f8 fb34 	bl	8000640 <__aeabi_dmul>
 8007fd8:	a339      	add	r3, pc, #228	@ (adr r3, 80080c0 <__kernel_sin+0x148>)
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	f7f8 f979 	bl	80002d4 <__adddf3>
 8007fe2:	4652      	mov	r2, sl
 8007fe4:	465b      	mov	r3, fp
 8007fe6:	f7f8 fb2b 	bl	8000640 <__aeabi_dmul>
 8007fea:	a337      	add	r3, pc, #220	@ (adr r3, 80080c8 <__kernel_sin+0x150>)
 8007fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff0:	f7f8 f96e 	bl	80002d0 <__aeabi_dsub>
 8007ff4:	4652      	mov	r2, sl
 8007ff6:	465b      	mov	r3, fp
 8007ff8:	f7f8 fb22 	bl	8000640 <__aeabi_dmul>
 8007ffc:	a334      	add	r3, pc, #208	@ (adr r3, 80080d0 <__kernel_sin+0x158>)
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	f7f8 f967 	bl	80002d4 <__adddf3>
 8008006:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008008:	e9cd 0100 	strd	r0, r1, [sp]
 800800c:	b9db      	cbnz	r3, 8008046 <__kernel_sin+0xce>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	4650      	mov	r0, sl
 8008014:	4659      	mov	r1, fp
 8008016:	f7f8 fb13 	bl	8000640 <__aeabi_dmul>
 800801a:	a32f      	add	r3, pc, #188	@ (adr r3, 80080d8 <__kernel_sin+0x160>)
 800801c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008020:	f7f8 f956 	bl	80002d0 <__aeabi_dsub>
 8008024:	4642      	mov	r2, r8
 8008026:	464b      	mov	r3, r9
 8008028:	f7f8 fb0a 	bl	8000640 <__aeabi_dmul>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	4620      	mov	r0, r4
 8008032:	4629      	mov	r1, r5
 8008034:	f7f8 f94e 	bl	80002d4 <__adddf3>
 8008038:	4604      	mov	r4, r0
 800803a:	460d      	mov	r5, r1
 800803c:	4620      	mov	r0, r4
 800803e:	4629      	mov	r1, r5
 8008040:	b005      	add	sp, #20
 8008042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008046:	2200      	movs	r2, #0
 8008048:	4630      	mov	r0, r6
 800804a:	4639      	mov	r1, r7
 800804c:	4b24      	ldr	r3, [pc, #144]	@ (80080e0 <__kernel_sin+0x168>)
 800804e:	f7f8 faf7 	bl	8000640 <__aeabi_dmul>
 8008052:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008056:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800805a:	4640      	mov	r0, r8
 800805c:	4649      	mov	r1, r9
 800805e:	f7f8 faef 	bl	8000640 <__aeabi_dmul>
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800806a:	f7f8 f931 	bl	80002d0 <__aeabi_dsub>
 800806e:	4652      	mov	r2, sl
 8008070:	465b      	mov	r3, fp
 8008072:	f7f8 fae5 	bl	8000640 <__aeabi_dmul>
 8008076:	4632      	mov	r2, r6
 8008078:	463b      	mov	r3, r7
 800807a:	f7f8 f929 	bl	80002d0 <__aeabi_dsub>
 800807e:	a316      	add	r3, pc, #88	@ (adr r3, 80080d8 <__kernel_sin+0x160>)
 8008080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008084:	4606      	mov	r6, r0
 8008086:	460f      	mov	r7, r1
 8008088:	4640      	mov	r0, r8
 800808a:	4649      	mov	r1, r9
 800808c:	f7f8 fad8 	bl	8000640 <__aeabi_dmul>
 8008090:	4602      	mov	r2, r0
 8008092:	460b      	mov	r3, r1
 8008094:	4630      	mov	r0, r6
 8008096:	4639      	mov	r1, r7
 8008098:	f7f8 f91c 	bl	80002d4 <__adddf3>
 800809c:	4602      	mov	r2, r0
 800809e:	460b      	mov	r3, r1
 80080a0:	4620      	mov	r0, r4
 80080a2:	4629      	mov	r1, r5
 80080a4:	f7f8 f914 	bl	80002d0 <__aeabi_dsub>
 80080a8:	e7c6      	b.n	8008038 <__kernel_sin+0xc0>
 80080aa:	bf00      	nop
 80080ac:	f3af 8000 	nop.w
 80080b0:	5acfd57c 	.word	0x5acfd57c
 80080b4:	3de5d93a 	.word	0x3de5d93a
 80080b8:	8a2b9ceb 	.word	0x8a2b9ceb
 80080bc:	3e5ae5e6 	.word	0x3e5ae5e6
 80080c0:	57b1fe7d 	.word	0x57b1fe7d
 80080c4:	3ec71de3 	.word	0x3ec71de3
 80080c8:	19c161d5 	.word	0x19c161d5
 80080cc:	3f2a01a0 	.word	0x3f2a01a0
 80080d0:	1110f8a6 	.word	0x1110f8a6
 80080d4:	3f811111 	.word	0x3f811111
 80080d8:	55555549 	.word	0x55555549
 80080dc:	3fc55555 	.word	0x3fc55555
 80080e0:	3fe00000 	.word	0x3fe00000
 80080e4:	00000000 	.word	0x00000000

080080e8 <__ieee754_rem_pio2>:
 80080e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ec:	4bc4      	ldr	r3, [pc, #784]	@ (8008400 <__ieee754_rem_pio2+0x318>)
 80080ee:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 80080f2:	b08d      	sub	sp, #52	@ 0x34
 80080f4:	4598      	cmp	r8, r3
 80080f6:	4606      	mov	r6, r0
 80080f8:	460f      	mov	r7, r1
 80080fa:	4614      	mov	r4, r2
 80080fc:	9104      	str	r1, [sp, #16]
 80080fe:	d807      	bhi.n	8008110 <__ieee754_rem_pio2+0x28>
 8008100:	e9c2 6700 	strd	r6, r7, [r2]
 8008104:	2300      	movs	r3, #0
 8008106:	2200      	movs	r2, #0
 8008108:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800810c:	2500      	movs	r5, #0
 800810e:	e026      	b.n	800815e <__ieee754_rem_pio2+0x76>
 8008110:	4bbc      	ldr	r3, [pc, #752]	@ (8008404 <__ieee754_rem_pio2+0x31c>)
 8008112:	4598      	cmp	r8, r3
 8008114:	d876      	bhi.n	8008204 <__ieee754_rem_pio2+0x11c>
 8008116:	9b04      	ldr	r3, [sp, #16]
 8008118:	4dbb      	ldr	r5, [pc, #748]	@ (8008408 <__ieee754_rem_pio2+0x320>)
 800811a:	2b00      	cmp	r3, #0
 800811c:	a3aa      	add	r3, pc, #680	@ (adr r3, 80083c8 <__ieee754_rem_pio2+0x2e0>)
 800811e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008122:	dd38      	ble.n	8008196 <__ieee754_rem_pio2+0xae>
 8008124:	f7f8 f8d4 	bl	80002d0 <__aeabi_dsub>
 8008128:	45a8      	cmp	r8, r5
 800812a:	4606      	mov	r6, r0
 800812c:	460f      	mov	r7, r1
 800812e:	d01a      	beq.n	8008166 <__ieee754_rem_pio2+0x7e>
 8008130:	a3a7      	add	r3, pc, #668	@ (adr r3, 80083d0 <__ieee754_rem_pio2+0x2e8>)
 8008132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008136:	f7f8 f8cb 	bl	80002d0 <__aeabi_dsub>
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	4680      	mov	r8, r0
 8008140:	4689      	mov	r9, r1
 8008142:	4630      	mov	r0, r6
 8008144:	4639      	mov	r1, r7
 8008146:	f7f8 f8c3 	bl	80002d0 <__aeabi_dsub>
 800814a:	a3a1      	add	r3, pc, #644	@ (adr r3, 80083d0 <__ieee754_rem_pio2+0x2e8>)
 800814c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008150:	f7f8 f8be 	bl	80002d0 <__aeabi_dsub>
 8008154:	2501      	movs	r5, #1
 8008156:	e9c4 8900 	strd	r8, r9, [r4]
 800815a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800815e:	4628      	mov	r0, r5
 8008160:	b00d      	add	sp, #52	@ 0x34
 8008162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008166:	a39c      	add	r3, pc, #624	@ (adr r3, 80083d8 <__ieee754_rem_pio2+0x2f0>)
 8008168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816c:	f7f8 f8b0 	bl	80002d0 <__aeabi_dsub>
 8008170:	a39b      	add	r3, pc, #620	@ (adr r3, 80083e0 <__ieee754_rem_pio2+0x2f8>)
 8008172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008176:	4606      	mov	r6, r0
 8008178:	460f      	mov	r7, r1
 800817a:	f7f8 f8a9 	bl	80002d0 <__aeabi_dsub>
 800817e:	4602      	mov	r2, r0
 8008180:	460b      	mov	r3, r1
 8008182:	4680      	mov	r8, r0
 8008184:	4689      	mov	r9, r1
 8008186:	4630      	mov	r0, r6
 8008188:	4639      	mov	r1, r7
 800818a:	f7f8 f8a1 	bl	80002d0 <__aeabi_dsub>
 800818e:	a394      	add	r3, pc, #592	@ (adr r3, 80083e0 <__ieee754_rem_pio2+0x2f8>)
 8008190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008194:	e7dc      	b.n	8008150 <__ieee754_rem_pio2+0x68>
 8008196:	f7f8 f89d 	bl	80002d4 <__adddf3>
 800819a:	45a8      	cmp	r8, r5
 800819c:	4606      	mov	r6, r0
 800819e:	460f      	mov	r7, r1
 80081a0:	d018      	beq.n	80081d4 <__ieee754_rem_pio2+0xec>
 80081a2:	a38b      	add	r3, pc, #556	@ (adr r3, 80083d0 <__ieee754_rem_pio2+0x2e8>)
 80081a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a8:	f7f8 f894 	bl	80002d4 <__adddf3>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	4680      	mov	r8, r0
 80081b2:	4689      	mov	r9, r1
 80081b4:	4630      	mov	r0, r6
 80081b6:	4639      	mov	r1, r7
 80081b8:	f7f8 f88a 	bl	80002d0 <__aeabi_dsub>
 80081bc:	a384      	add	r3, pc, #528	@ (adr r3, 80083d0 <__ieee754_rem_pio2+0x2e8>)
 80081be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c2:	f7f8 f887 	bl	80002d4 <__adddf3>
 80081c6:	f04f 35ff 	mov.w	r5, #4294967295
 80081ca:	e9c4 8900 	strd	r8, r9, [r4]
 80081ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80081d2:	e7c4      	b.n	800815e <__ieee754_rem_pio2+0x76>
 80081d4:	a380      	add	r3, pc, #512	@ (adr r3, 80083d8 <__ieee754_rem_pio2+0x2f0>)
 80081d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081da:	f7f8 f87b 	bl	80002d4 <__adddf3>
 80081de:	a380      	add	r3, pc, #512	@ (adr r3, 80083e0 <__ieee754_rem_pio2+0x2f8>)
 80081e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e4:	4606      	mov	r6, r0
 80081e6:	460f      	mov	r7, r1
 80081e8:	f7f8 f874 	bl	80002d4 <__adddf3>
 80081ec:	4602      	mov	r2, r0
 80081ee:	460b      	mov	r3, r1
 80081f0:	4680      	mov	r8, r0
 80081f2:	4689      	mov	r9, r1
 80081f4:	4630      	mov	r0, r6
 80081f6:	4639      	mov	r1, r7
 80081f8:	f7f8 f86a 	bl	80002d0 <__aeabi_dsub>
 80081fc:	a378      	add	r3, pc, #480	@ (adr r3, 80083e0 <__ieee754_rem_pio2+0x2f8>)
 80081fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008202:	e7de      	b.n	80081c2 <__ieee754_rem_pio2+0xda>
 8008204:	4b81      	ldr	r3, [pc, #516]	@ (800840c <__ieee754_rem_pio2+0x324>)
 8008206:	4598      	cmp	r8, r3
 8008208:	f200 80cf 	bhi.w	80083aa <__ieee754_rem_pio2+0x2c2>
 800820c:	f000 f962 	bl	80084d4 <fabs>
 8008210:	a375      	add	r3, pc, #468	@ (adr r3, 80083e8 <__ieee754_rem_pio2+0x300>)
 8008212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008216:	4606      	mov	r6, r0
 8008218:	460f      	mov	r7, r1
 800821a:	f7f8 fa11 	bl	8000640 <__aeabi_dmul>
 800821e:	2200      	movs	r2, #0
 8008220:	4b7b      	ldr	r3, [pc, #492]	@ (8008410 <__ieee754_rem_pio2+0x328>)
 8008222:	f7f8 f857 	bl	80002d4 <__adddf3>
 8008226:	f7f8 fcbb 	bl	8000ba0 <__aeabi_d2iz>
 800822a:	4605      	mov	r5, r0
 800822c:	f7f8 f99e 	bl	800056c <__aeabi_i2d>
 8008230:	4602      	mov	r2, r0
 8008232:	460b      	mov	r3, r1
 8008234:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008238:	a363      	add	r3, pc, #396	@ (adr r3, 80083c8 <__ieee754_rem_pio2+0x2e0>)
 800823a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823e:	f7f8 f9ff 	bl	8000640 <__aeabi_dmul>
 8008242:	4602      	mov	r2, r0
 8008244:	460b      	mov	r3, r1
 8008246:	4630      	mov	r0, r6
 8008248:	4639      	mov	r1, r7
 800824a:	f7f8 f841 	bl	80002d0 <__aeabi_dsub>
 800824e:	a360      	add	r3, pc, #384	@ (adr r3, 80083d0 <__ieee754_rem_pio2+0x2e8>)
 8008250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008254:	4682      	mov	sl, r0
 8008256:	468b      	mov	fp, r1
 8008258:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800825c:	f7f8 f9f0 	bl	8000640 <__aeabi_dmul>
 8008260:	2d1f      	cmp	r5, #31
 8008262:	4606      	mov	r6, r0
 8008264:	460f      	mov	r7, r1
 8008266:	dc0c      	bgt.n	8008282 <__ieee754_rem_pio2+0x19a>
 8008268:	4b6a      	ldr	r3, [pc, #424]	@ (8008414 <__ieee754_rem_pio2+0x32c>)
 800826a:	1e6a      	subs	r2, r5, #1
 800826c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008270:	4543      	cmp	r3, r8
 8008272:	d006      	beq.n	8008282 <__ieee754_rem_pio2+0x19a>
 8008274:	4632      	mov	r2, r6
 8008276:	463b      	mov	r3, r7
 8008278:	4650      	mov	r0, sl
 800827a:	4659      	mov	r1, fp
 800827c:	f7f8 f828 	bl	80002d0 <__aeabi_dsub>
 8008280:	e00e      	b.n	80082a0 <__ieee754_rem_pio2+0x1b8>
 8008282:	463b      	mov	r3, r7
 8008284:	4632      	mov	r2, r6
 8008286:	4650      	mov	r0, sl
 8008288:	4659      	mov	r1, fp
 800828a:	f7f8 f821 	bl	80002d0 <__aeabi_dsub>
 800828e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008292:	9305      	str	r3, [sp, #20]
 8008294:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008298:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800829c:	2b10      	cmp	r3, #16
 800829e:	dc02      	bgt.n	80082a6 <__ieee754_rem_pio2+0x1be>
 80082a0:	e9c4 0100 	strd	r0, r1, [r4]
 80082a4:	e039      	b.n	800831a <__ieee754_rem_pio2+0x232>
 80082a6:	a34c      	add	r3, pc, #304	@ (adr r3, 80083d8 <__ieee754_rem_pio2+0x2f0>)
 80082a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082b0:	f7f8 f9c6 	bl	8000640 <__aeabi_dmul>
 80082b4:	4606      	mov	r6, r0
 80082b6:	460f      	mov	r7, r1
 80082b8:	4602      	mov	r2, r0
 80082ba:	460b      	mov	r3, r1
 80082bc:	4650      	mov	r0, sl
 80082be:	4659      	mov	r1, fp
 80082c0:	f7f8 f806 	bl	80002d0 <__aeabi_dsub>
 80082c4:	4602      	mov	r2, r0
 80082c6:	460b      	mov	r3, r1
 80082c8:	4680      	mov	r8, r0
 80082ca:	4689      	mov	r9, r1
 80082cc:	4650      	mov	r0, sl
 80082ce:	4659      	mov	r1, fp
 80082d0:	f7f7 fffe 	bl	80002d0 <__aeabi_dsub>
 80082d4:	4632      	mov	r2, r6
 80082d6:	463b      	mov	r3, r7
 80082d8:	f7f7 fffa 	bl	80002d0 <__aeabi_dsub>
 80082dc:	a340      	add	r3, pc, #256	@ (adr r3, 80083e0 <__ieee754_rem_pio2+0x2f8>)
 80082de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e2:	4606      	mov	r6, r0
 80082e4:	460f      	mov	r7, r1
 80082e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ea:	f7f8 f9a9 	bl	8000640 <__aeabi_dmul>
 80082ee:	4632      	mov	r2, r6
 80082f0:	463b      	mov	r3, r7
 80082f2:	f7f7 ffed 	bl	80002d0 <__aeabi_dsub>
 80082f6:	4602      	mov	r2, r0
 80082f8:	460b      	mov	r3, r1
 80082fa:	4606      	mov	r6, r0
 80082fc:	460f      	mov	r7, r1
 80082fe:	4640      	mov	r0, r8
 8008300:	4649      	mov	r1, r9
 8008302:	f7f7 ffe5 	bl	80002d0 <__aeabi_dsub>
 8008306:	9a05      	ldr	r2, [sp, #20]
 8008308:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	2b31      	cmp	r3, #49	@ 0x31
 8008310:	dc20      	bgt.n	8008354 <__ieee754_rem_pio2+0x26c>
 8008312:	46c2      	mov	sl, r8
 8008314:	46cb      	mov	fp, r9
 8008316:	e9c4 0100 	strd	r0, r1, [r4]
 800831a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800831e:	4650      	mov	r0, sl
 8008320:	4642      	mov	r2, r8
 8008322:	464b      	mov	r3, r9
 8008324:	4659      	mov	r1, fp
 8008326:	f7f7 ffd3 	bl	80002d0 <__aeabi_dsub>
 800832a:	463b      	mov	r3, r7
 800832c:	4632      	mov	r2, r6
 800832e:	f7f7 ffcf 	bl	80002d0 <__aeabi_dsub>
 8008332:	9b04      	ldr	r3, [sp, #16]
 8008334:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	f6bf af10 	bge.w	800815e <__ieee754_rem_pio2+0x76>
 800833e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8008342:	6063      	str	r3, [r4, #4]
 8008344:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008348:	f8c4 8000 	str.w	r8, [r4]
 800834c:	60a0      	str	r0, [r4, #8]
 800834e:	60e3      	str	r3, [r4, #12]
 8008350:	426d      	negs	r5, r5
 8008352:	e704      	b.n	800815e <__ieee754_rem_pio2+0x76>
 8008354:	a326      	add	r3, pc, #152	@ (adr r3, 80083f0 <__ieee754_rem_pio2+0x308>)
 8008356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800835e:	f7f8 f96f 	bl	8000640 <__aeabi_dmul>
 8008362:	4606      	mov	r6, r0
 8008364:	460f      	mov	r7, r1
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	4640      	mov	r0, r8
 800836c:	4649      	mov	r1, r9
 800836e:	f7f7 ffaf 	bl	80002d0 <__aeabi_dsub>
 8008372:	4602      	mov	r2, r0
 8008374:	460b      	mov	r3, r1
 8008376:	4682      	mov	sl, r0
 8008378:	468b      	mov	fp, r1
 800837a:	4640      	mov	r0, r8
 800837c:	4649      	mov	r1, r9
 800837e:	f7f7 ffa7 	bl	80002d0 <__aeabi_dsub>
 8008382:	4632      	mov	r2, r6
 8008384:	463b      	mov	r3, r7
 8008386:	f7f7 ffa3 	bl	80002d0 <__aeabi_dsub>
 800838a:	a31b      	add	r3, pc, #108	@ (adr r3, 80083f8 <__ieee754_rem_pio2+0x310>)
 800838c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008390:	4606      	mov	r6, r0
 8008392:	460f      	mov	r7, r1
 8008394:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008398:	f7f8 f952 	bl	8000640 <__aeabi_dmul>
 800839c:	4632      	mov	r2, r6
 800839e:	463b      	mov	r3, r7
 80083a0:	f7f7 ff96 	bl	80002d0 <__aeabi_dsub>
 80083a4:	4606      	mov	r6, r0
 80083a6:	460f      	mov	r7, r1
 80083a8:	e764      	b.n	8008274 <__ieee754_rem_pio2+0x18c>
 80083aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008418 <__ieee754_rem_pio2+0x330>)
 80083ac:	4598      	cmp	r8, r3
 80083ae:	d935      	bls.n	800841c <__ieee754_rem_pio2+0x334>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	f7f7 ff8c 	bl	80002d0 <__aeabi_dsub>
 80083b8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80083bc:	e9c4 0100 	strd	r0, r1, [r4]
 80083c0:	e6a4      	b.n	800810c <__ieee754_rem_pio2+0x24>
 80083c2:	bf00      	nop
 80083c4:	f3af 8000 	nop.w
 80083c8:	54400000 	.word	0x54400000
 80083cc:	3ff921fb 	.word	0x3ff921fb
 80083d0:	1a626331 	.word	0x1a626331
 80083d4:	3dd0b461 	.word	0x3dd0b461
 80083d8:	1a600000 	.word	0x1a600000
 80083dc:	3dd0b461 	.word	0x3dd0b461
 80083e0:	2e037073 	.word	0x2e037073
 80083e4:	3ba3198a 	.word	0x3ba3198a
 80083e8:	6dc9c883 	.word	0x6dc9c883
 80083ec:	3fe45f30 	.word	0x3fe45f30
 80083f0:	2e000000 	.word	0x2e000000
 80083f4:	3ba3198a 	.word	0x3ba3198a
 80083f8:	252049c1 	.word	0x252049c1
 80083fc:	397b839a 	.word	0x397b839a
 8008400:	3fe921fb 	.word	0x3fe921fb
 8008404:	4002d97b 	.word	0x4002d97b
 8008408:	3ff921fb 	.word	0x3ff921fb
 800840c:	413921fb 	.word	0x413921fb
 8008410:	3fe00000 	.word	0x3fe00000
 8008414:	0800b230 	.word	0x0800b230
 8008418:	7fefffff 	.word	0x7fefffff
 800841c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008420:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8008424:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008428:	460f      	mov	r7, r1
 800842a:	f7f8 fbb9 	bl	8000ba0 <__aeabi_d2iz>
 800842e:	f7f8 f89d 	bl	800056c <__aeabi_i2d>
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	4630      	mov	r0, r6
 8008438:	4639      	mov	r1, r7
 800843a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800843e:	f7f7 ff47 	bl	80002d0 <__aeabi_dsub>
 8008442:	2200      	movs	r2, #0
 8008444:	4b21      	ldr	r3, [pc, #132]	@ (80084cc <__ieee754_rem_pio2+0x3e4>)
 8008446:	f7f8 f8fb 	bl	8000640 <__aeabi_dmul>
 800844a:	460f      	mov	r7, r1
 800844c:	4606      	mov	r6, r0
 800844e:	f7f8 fba7 	bl	8000ba0 <__aeabi_d2iz>
 8008452:	f7f8 f88b 	bl	800056c <__aeabi_i2d>
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	4630      	mov	r0, r6
 800845c:	4639      	mov	r1, r7
 800845e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008462:	f7f7 ff35 	bl	80002d0 <__aeabi_dsub>
 8008466:	2200      	movs	r2, #0
 8008468:	4b18      	ldr	r3, [pc, #96]	@ (80084cc <__ieee754_rem_pio2+0x3e4>)
 800846a:	f7f8 f8e9 	bl	8000640 <__aeabi_dmul>
 800846e:	f04f 0803 	mov.w	r8, #3
 8008472:	2600      	movs	r6, #0
 8008474:	2700      	movs	r7, #0
 8008476:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800847a:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800847e:	4632      	mov	r2, r6
 8008480:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008484:	463b      	mov	r3, r7
 8008486:	46c2      	mov	sl, r8
 8008488:	f108 38ff 	add.w	r8, r8, #4294967295
 800848c:	f7f8 fb40 	bl	8000b10 <__aeabi_dcmpeq>
 8008490:	2800      	cmp	r0, #0
 8008492:	d1f4      	bne.n	800847e <__ieee754_rem_pio2+0x396>
 8008494:	4b0e      	ldr	r3, [pc, #56]	@ (80084d0 <__ieee754_rem_pio2+0x3e8>)
 8008496:	462a      	mov	r2, r5
 8008498:	9301      	str	r3, [sp, #4]
 800849a:	2302      	movs	r3, #2
 800849c:	4621      	mov	r1, r4
 800849e:	9300      	str	r3, [sp, #0]
 80084a0:	a806      	add	r0, sp, #24
 80084a2:	4653      	mov	r3, sl
 80084a4:	f000 f81a 	bl	80084dc <__kernel_rem_pio2>
 80084a8:	9b04      	ldr	r3, [sp, #16]
 80084aa:	4605      	mov	r5, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f6bf ae56 	bge.w	800815e <__ieee754_rem_pio2+0x76>
 80084b2:	e9d4 2100 	ldrd	r2, r1, [r4]
 80084b6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80084ba:	e9c4 2300 	strd	r2, r3, [r4]
 80084be:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80084c2:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80084c6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80084ca:	e741      	b.n	8008350 <__ieee754_rem_pio2+0x268>
 80084cc:	41700000 	.word	0x41700000
 80084d0:	0800b2b0 	.word	0x0800b2b0

080084d4 <fabs>:
 80084d4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80084d8:	4619      	mov	r1, r3
 80084da:	4770      	bx	lr

080084dc <__kernel_rem_pio2>:
 80084dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80084e4:	9308      	str	r3, [sp, #32]
 80084e6:	9104      	str	r1, [sp, #16]
 80084e8:	4bb6      	ldr	r3, [pc, #728]	@ (80087c4 <__kernel_rem_pio2+0x2e8>)
 80084ea:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 80084ec:	f112 0f14 	cmn.w	r2, #20
 80084f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80084f4:	bfa8      	it	ge
 80084f6:	1ed4      	subge	r4, r2, #3
 80084f8:	9302      	str	r3, [sp, #8]
 80084fa:	9b08      	ldr	r3, [sp, #32]
 80084fc:	bfb8      	it	lt
 80084fe:	2400      	movlt	r4, #0
 8008500:	f103 33ff 	add.w	r3, r3, #4294967295
 8008504:	9306      	str	r3, [sp, #24]
 8008506:	bfa4      	itt	ge
 8008508:	2318      	movge	r3, #24
 800850a:	fb94 f4f3 	sdivge	r4, r4, r3
 800850e:	f06f 0317 	mvn.w	r3, #23
 8008512:	fb04 3303 	mla	r3, r4, r3, r3
 8008516:	eb03 0a02 	add.w	sl, r3, r2
 800851a:	9a06      	ldr	r2, [sp, #24]
 800851c:	9b02      	ldr	r3, [sp, #8]
 800851e:	1aa7      	subs	r7, r4, r2
 8008520:	eb03 0802 	add.w	r8, r3, r2
 8008524:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8008526:	2500      	movs	r5, #0
 8008528:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800852c:	2200      	movs	r2, #0
 800852e:	2300      	movs	r3, #0
 8008530:	9009      	str	r0, [sp, #36]	@ 0x24
 8008532:	ae20      	add	r6, sp, #128	@ 0x80
 8008534:	4545      	cmp	r5, r8
 8008536:	dd14      	ble.n	8008562 <__kernel_rem_pio2+0x86>
 8008538:	f04f 0800 	mov.w	r8, #0
 800853c:	9a08      	ldr	r2, [sp, #32]
 800853e:	ab20      	add	r3, sp, #128	@ 0x80
 8008540:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8008544:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 8008548:	9b02      	ldr	r3, [sp, #8]
 800854a:	4598      	cmp	r8, r3
 800854c:	dc35      	bgt.n	80085ba <__kernel_rem_pio2+0xde>
 800854e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008550:	2200      	movs	r2, #0
 8008552:	f1a3 0908 	sub.w	r9, r3, #8
 8008556:	2300      	movs	r3, #0
 8008558:	462f      	mov	r7, r5
 800855a:	2600      	movs	r6, #0
 800855c:	e9cd 2300 	strd	r2, r3, [sp]
 8008560:	e01f      	b.n	80085a2 <__kernel_rem_pio2+0xc6>
 8008562:	42ef      	cmn	r7, r5
 8008564:	d40b      	bmi.n	800857e <__kernel_rem_pio2+0xa2>
 8008566:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800856a:	e9cd 2300 	strd	r2, r3, [sp]
 800856e:	f7f7 fffd 	bl	800056c <__aeabi_i2d>
 8008572:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008576:	e8e6 0102 	strd	r0, r1, [r6], #8
 800857a:	3501      	adds	r5, #1
 800857c:	e7da      	b.n	8008534 <__kernel_rem_pio2+0x58>
 800857e:	4610      	mov	r0, r2
 8008580:	4619      	mov	r1, r3
 8008582:	e7f8      	b.n	8008576 <__kernel_rem_pio2+0x9a>
 8008584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008588:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800858c:	f7f8 f858 	bl	8000640 <__aeabi_dmul>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008598:	f7f7 fe9c 	bl	80002d4 <__adddf3>
 800859c:	e9cd 0100 	strd	r0, r1, [sp]
 80085a0:	3601      	adds	r6, #1
 80085a2:	9b06      	ldr	r3, [sp, #24]
 80085a4:	3f08      	subs	r7, #8
 80085a6:	429e      	cmp	r6, r3
 80085a8:	ddec      	ble.n	8008584 <__kernel_rem_pio2+0xa8>
 80085aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085ae:	f108 0801 	add.w	r8, r8, #1
 80085b2:	e8eb 2302 	strd	r2, r3, [fp], #8
 80085b6:	3508      	adds	r5, #8
 80085b8:	e7c6      	b.n	8008548 <__kernel_rem_pio2+0x6c>
 80085ba:	9b02      	ldr	r3, [sp, #8]
 80085bc:	aa0c      	add	r2, sp, #48	@ 0x30
 80085be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80085c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085c4:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80085c6:	f8dd b008 	ldr.w	fp, [sp, #8]
 80085ca:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80085ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80085d0:	ab98      	add	r3, sp, #608	@ 0x260
 80085d2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80085d6:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 80085da:	ab70      	add	r3, sp, #448	@ 0x1c0
 80085dc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80085e0:	ae0c      	add	r6, sp, #48	@ 0x30
 80085e2:	4698      	mov	r8, r3
 80085e4:	46b1      	mov	r9, r6
 80085e6:	465f      	mov	r7, fp
 80085e8:	9307      	str	r3, [sp, #28]
 80085ea:	2f00      	cmp	r7, #0
 80085ec:	f1a8 0808 	sub.w	r8, r8, #8
 80085f0:	dc71      	bgt.n	80086d6 <__kernel_rem_pio2+0x1fa>
 80085f2:	4652      	mov	r2, sl
 80085f4:	4620      	mov	r0, r4
 80085f6:	4629      	mov	r1, r5
 80085f8:	f000 fa96 	bl	8008b28 <scalbn>
 80085fc:	2200      	movs	r2, #0
 80085fe:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8008602:	4604      	mov	r4, r0
 8008604:	460d      	mov	r5, r1
 8008606:	f7f8 f81b 	bl	8000640 <__aeabi_dmul>
 800860a:	f000 fb05 	bl	8008c18 <floor>
 800860e:	2200      	movs	r2, #0
 8008610:	4b6d      	ldr	r3, [pc, #436]	@ (80087c8 <__kernel_rem_pio2+0x2ec>)
 8008612:	f7f8 f815 	bl	8000640 <__aeabi_dmul>
 8008616:	4602      	mov	r2, r0
 8008618:	460b      	mov	r3, r1
 800861a:	4620      	mov	r0, r4
 800861c:	4629      	mov	r1, r5
 800861e:	f7f7 fe57 	bl	80002d0 <__aeabi_dsub>
 8008622:	460d      	mov	r5, r1
 8008624:	4604      	mov	r4, r0
 8008626:	f7f8 fabb 	bl	8000ba0 <__aeabi_d2iz>
 800862a:	9005      	str	r0, [sp, #20]
 800862c:	f7f7 ff9e 	bl	800056c <__aeabi_i2d>
 8008630:	4602      	mov	r2, r0
 8008632:	460b      	mov	r3, r1
 8008634:	4620      	mov	r0, r4
 8008636:	4629      	mov	r1, r5
 8008638:	f7f7 fe4a 	bl	80002d0 <__aeabi_dsub>
 800863c:	f1ba 0f00 	cmp.w	sl, #0
 8008640:	4680      	mov	r8, r0
 8008642:	4689      	mov	r9, r1
 8008644:	dd6d      	ble.n	8008722 <__kernel_rem_pio2+0x246>
 8008646:	f10b 31ff 	add.w	r1, fp, #4294967295
 800864a:	ab0c      	add	r3, sp, #48	@ 0x30
 800864c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008650:	9c05      	ldr	r4, [sp, #20]
 8008652:	f1ca 0018 	rsb	r0, sl, #24
 8008656:	fa43 f200 	asr.w	r2, r3, r0
 800865a:	4414      	add	r4, r2
 800865c:	4082      	lsls	r2, r0
 800865e:	1a9b      	subs	r3, r3, r2
 8008660:	aa0c      	add	r2, sp, #48	@ 0x30
 8008662:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008666:	f1ca 0217 	rsb	r2, sl, #23
 800866a:	9405      	str	r4, [sp, #20]
 800866c:	4113      	asrs	r3, r2
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	9b00      	ldr	r3, [sp, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	dd64      	ble.n	8008740 <__kernel_rem_pio2+0x264>
 8008676:	2200      	movs	r2, #0
 8008678:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800867c:	4614      	mov	r4, r2
 800867e:	9b05      	ldr	r3, [sp, #20]
 8008680:	3301      	adds	r3, #1
 8008682:	9305      	str	r3, [sp, #20]
 8008684:	4593      	cmp	fp, r2
 8008686:	f300 80ab 	bgt.w	80087e0 <__kernel_rem_pio2+0x304>
 800868a:	f1ba 0f00 	cmp.w	sl, #0
 800868e:	dd07      	ble.n	80086a0 <__kernel_rem_pio2+0x1c4>
 8008690:	f1ba 0f01 	cmp.w	sl, #1
 8008694:	f000 80b2 	beq.w	80087fc <__kernel_rem_pio2+0x320>
 8008698:	f1ba 0f02 	cmp.w	sl, #2
 800869c:	f000 80b9 	beq.w	8008812 <__kernel_rem_pio2+0x336>
 80086a0:	9b00      	ldr	r3, [sp, #0]
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d14c      	bne.n	8008740 <__kernel_rem_pio2+0x264>
 80086a6:	4642      	mov	r2, r8
 80086a8:	464b      	mov	r3, r9
 80086aa:	2000      	movs	r0, #0
 80086ac:	4947      	ldr	r1, [pc, #284]	@ (80087cc <__kernel_rem_pio2+0x2f0>)
 80086ae:	f7f7 fe0f 	bl	80002d0 <__aeabi_dsub>
 80086b2:	4680      	mov	r8, r0
 80086b4:	4689      	mov	r9, r1
 80086b6:	2c00      	cmp	r4, #0
 80086b8:	d042      	beq.n	8008740 <__kernel_rem_pio2+0x264>
 80086ba:	4652      	mov	r2, sl
 80086bc:	2000      	movs	r0, #0
 80086be:	4943      	ldr	r1, [pc, #268]	@ (80087cc <__kernel_rem_pio2+0x2f0>)
 80086c0:	f000 fa32 	bl	8008b28 <scalbn>
 80086c4:	4602      	mov	r2, r0
 80086c6:	460b      	mov	r3, r1
 80086c8:	4640      	mov	r0, r8
 80086ca:	4649      	mov	r1, r9
 80086cc:	f7f7 fe00 	bl	80002d0 <__aeabi_dsub>
 80086d0:	4680      	mov	r8, r0
 80086d2:	4689      	mov	r9, r1
 80086d4:	e034      	b.n	8008740 <__kernel_rem_pio2+0x264>
 80086d6:	2200      	movs	r2, #0
 80086d8:	4b3d      	ldr	r3, [pc, #244]	@ (80087d0 <__kernel_rem_pio2+0x2f4>)
 80086da:	4620      	mov	r0, r4
 80086dc:	4629      	mov	r1, r5
 80086de:	f7f7 ffaf 	bl	8000640 <__aeabi_dmul>
 80086e2:	f7f8 fa5d 	bl	8000ba0 <__aeabi_d2iz>
 80086e6:	f7f7 ff41 	bl	800056c <__aeabi_i2d>
 80086ea:	4602      	mov	r2, r0
 80086ec:	460b      	mov	r3, r1
 80086ee:	e9cd 2300 	strd	r2, r3, [sp]
 80086f2:	2200      	movs	r2, #0
 80086f4:	4b37      	ldr	r3, [pc, #220]	@ (80087d4 <__kernel_rem_pio2+0x2f8>)
 80086f6:	f7f7 ffa3 	bl	8000640 <__aeabi_dmul>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	4620      	mov	r0, r4
 8008700:	4629      	mov	r1, r5
 8008702:	f7f7 fde5 	bl	80002d0 <__aeabi_dsub>
 8008706:	f7f8 fa4b 	bl	8000ba0 <__aeabi_d2iz>
 800870a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800870e:	f849 0b04 	str.w	r0, [r9], #4
 8008712:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008716:	f7f7 fddd 	bl	80002d4 <__adddf3>
 800871a:	3f01      	subs	r7, #1
 800871c:	4604      	mov	r4, r0
 800871e:	460d      	mov	r5, r1
 8008720:	e763      	b.n	80085ea <__kernel_rem_pio2+0x10e>
 8008722:	d106      	bne.n	8008732 <__kernel_rem_pio2+0x256>
 8008724:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008728:	aa0c      	add	r2, sp, #48	@ 0x30
 800872a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800872e:	15db      	asrs	r3, r3, #23
 8008730:	e79d      	b.n	800866e <__kernel_rem_pio2+0x192>
 8008732:	2200      	movs	r2, #0
 8008734:	4b28      	ldr	r3, [pc, #160]	@ (80087d8 <__kernel_rem_pio2+0x2fc>)
 8008736:	f7f8 fa09 	bl	8000b4c <__aeabi_dcmpge>
 800873a:	2800      	cmp	r0, #0
 800873c:	d13f      	bne.n	80087be <__kernel_rem_pio2+0x2e2>
 800873e:	9000      	str	r0, [sp, #0]
 8008740:	2200      	movs	r2, #0
 8008742:	2300      	movs	r3, #0
 8008744:	4640      	mov	r0, r8
 8008746:	4649      	mov	r1, r9
 8008748:	f7f8 f9e2 	bl	8000b10 <__aeabi_dcmpeq>
 800874c:	2800      	cmp	r0, #0
 800874e:	f000 80af 	beq.w	80088b0 <__kernel_rem_pio2+0x3d4>
 8008752:	2200      	movs	r2, #0
 8008754:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008758:	9902      	ldr	r1, [sp, #8]
 800875a:	428b      	cmp	r3, r1
 800875c:	da61      	bge.n	8008822 <__kernel_rem_pio2+0x346>
 800875e:	2a00      	cmp	r2, #0
 8008760:	d076      	beq.n	8008850 <__kernel_rem_pio2+0x374>
 8008762:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008766:	ab0c      	add	r3, sp, #48	@ 0x30
 8008768:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800876c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008770:	2b00      	cmp	r3, #0
 8008772:	d0f6      	beq.n	8008762 <__kernel_rem_pio2+0x286>
 8008774:	4652      	mov	r2, sl
 8008776:	2000      	movs	r0, #0
 8008778:	4914      	ldr	r1, [pc, #80]	@ (80087cc <__kernel_rem_pio2+0x2f0>)
 800877a:	f000 f9d5 	bl	8008b28 <scalbn>
 800877e:	465d      	mov	r5, fp
 8008780:	4606      	mov	r6, r0
 8008782:	460f      	mov	r7, r1
 8008784:	f04f 0900 	mov.w	r9, #0
 8008788:	ab70      	add	r3, sp, #448	@ 0x1c0
 800878a:	f8df a044 	ldr.w	sl, [pc, #68]	@ 80087d0 <__kernel_rem_pio2+0x2f4>
 800878e:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 8008792:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 8008796:	2d00      	cmp	r5, #0
 8008798:	f280 80c0 	bge.w	800891c <__kernel_rem_pio2+0x440>
 800879c:	465d      	mov	r5, fp
 800879e:	2d00      	cmp	r5, #0
 80087a0:	f2c0 80f0 	blt.w	8008984 <__kernel_rem_pio2+0x4a8>
 80087a4:	4b0d      	ldr	r3, [pc, #52]	@ (80087dc <__kernel_rem_pio2+0x300>)
 80087a6:	f04f 0900 	mov.w	r9, #0
 80087aa:	9306      	str	r3, [sp, #24]
 80087ac:	ab70      	add	r3, sp, #448	@ 0x1c0
 80087ae:	f04f 0a00 	mov.w	sl, #0
 80087b2:	2700      	movs	r7, #0
 80087b4:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 80087b8:	ebab 0605 	sub.w	r6, fp, r5
 80087bc:	e0d6      	b.n	800896c <__kernel_rem_pio2+0x490>
 80087be:	2302      	movs	r3, #2
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	e758      	b.n	8008676 <__kernel_rem_pio2+0x19a>
 80087c4:	0800b3f8 	.word	0x0800b3f8
 80087c8:	40200000 	.word	0x40200000
 80087cc:	3ff00000 	.word	0x3ff00000
 80087d0:	3e700000 	.word	0x3e700000
 80087d4:	41700000 	.word	0x41700000
 80087d8:	3fe00000 	.word	0x3fe00000
 80087dc:	0800b3b8 	.word	0x0800b3b8
 80087e0:	f856 3b04 	ldr.w	r3, [r6], #4
 80087e4:	b944      	cbnz	r4, 80087f8 <__kernel_rem_pio2+0x31c>
 80087e6:	b123      	cbz	r3, 80087f2 <__kernel_rem_pio2+0x316>
 80087e8:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80087ec:	f846 3c04 	str.w	r3, [r6, #-4]
 80087f0:	2301      	movs	r3, #1
 80087f2:	461c      	mov	r4, r3
 80087f4:	3201      	adds	r2, #1
 80087f6:	e745      	b.n	8008684 <__kernel_rem_pio2+0x1a8>
 80087f8:	1acb      	subs	r3, r1, r3
 80087fa:	e7f7      	b.n	80087ec <__kernel_rem_pio2+0x310>
 80087fc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008800:	ab0c      	add	r3, sp, #48	@ 0x30
 8008802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008806:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800880a:	a90c      	add	r1, sp, #48	@ 0x30
 800880c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008810:	e746      	b.n	80086a0 <__kernel_rem_pio2+0x1c4>
 8008812:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008816:	ab0c      	add	r3, sp, #48	@ 0x30
 8008818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800881c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008820:	e7f3      	b.n	800880a <__kernel_rem_pio2+0x32e>
 8008822:	a90c      	add	r1, sp, #48	@ 0x30
 8008824:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008828:	3b01      	subs	r3, #1
 800882a:	430a      	orrs	r2, r1
 800882c:	e794      	b.n	8008758 <__kernel_rem_pio2+0x27c>
 800882e:	3401      	adds	r4, #1
 8008830:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008834:	2a00      	cmp	r2, #0
 8008836:	d0fa      	beq.n	800882e <__kernel_rem_pio2+0x352>
 8008838:	9b08      	ldr	r3, [sp, #32]
 800883a:	aa20      	add	r2, sp, #128	@ 0x80
 800883c:	445b      	add	r3, fp
 800883e:	f10b 0801 	add.w	r8, fp, #1
 8008842:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008846:	445c      	add	r4, fp
 8008848:	4544      	cmp	r4, r8
 800884a:	da04      	bge.n	8008856 <__kernel_rem_pio2+0x37a>
 800884c:	46a3      	mov	fp, r4
 800884e:	e6bf      	b.n	80085d0 <__kernel_rem_pio2+0xf4>
 8008850:	2401      	movs	r4, #1
 8008852:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008854:	e7ec      	b.n	8008830 <__kernel_rem_pio2+0x354>
 8008856:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008858:	46ab      	mov	fp, r5
 800885a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800885e:	f7f7 fe85 	bl	800056c <__aeabi_i2d>
 8008862:	f04f 0900 	mov.w	r9, #0
 8008866:	2600      	movs	r6, #0
 8008868:	2700      	movs	r7, #0
 800886a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800886c:	e9c5 0100 	strd	r0, r1, [r5]
 8008870:	3b08      	subs	r3, #8
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	9b06      	ldr	r3, [sp, #24]
 8008876:	4599      	cmp	r9, r3
 8008878:	dd07      	ble.n	800888a <__kernel_rem_pio2+0x3ae>
 800887a:	9b07      	ldr	r3, [sp, #28]
 800887c:	f108 0801 	add.w	r8, r8, #1
 8008880:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 8008884:	3508      	adds	r5, #8
 8008886:	9307      	str	r3, [sp, #28]
 8008888:	e7de      	b.n	8008848 <__kernel_rem_pio2+0x36c>
 800888a:	9900      	ldr	r1, [sp, #0]
 800888c:	f109 0901 	add.w	r9, r9, #1
 8008890:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8008894:	9100      	str	r1, [sp, #0]
 8008896:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800889a:	f7f7 fed1 	bl	8000640 <__aeabi_dmul>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4630      	mov	r0, r6
 80088a4:	4639      	mov	r1, r7
 80088a6:	f7f7 fd15 	bl	80002d4 <__adddf3>
 80088aa:	4606      	mov	r6, r0
 80088ac:	460f      	mov	r7, r1
 80088ae:	e7e1      	b.n	8008874 <__kernel_rem_pio2+0x398>
 80088b0:	f1ca 0200 	rsb	r2, sl, #0
 80088b4:	4640      	mov	r0, r8
 80088b6:	4649      	mov	r1, r9
 80088b8:	f000 f936 	bl	8008b28 <scalbn>
 80088bc:	2200      	movs	r2, #0
 80088be:	4b97      	ldr	r3, [pc, #604]	@ (8008b1c <__kernel_rem_pio2+0x640>)
 80088c0:	4604      	mov	r4, r0
 80088c2:	460d      	mov	r5, r1
 80088c4:	f7f8 f942 	bl	8000b4c <__aeabi_dcmpge>
 80088c8:	b300      	cbz	r0, 800890c <__kernel_rem_pio2+0x430>
 80088ca:	2200      	movs	r2, #0
 80088cc:	4b94      	ldr	r3, [pc, #592]	@ (8008b20 <__kernel_rem_pio2+0x644>)
 80088ce:	4620      	mov	r0, r4
 80088d0:	4629      	mov	r1, r5
 80088d2:	f7f7 feb5 	bl	8000640 <__aeabi_dmul>
 80088d6:	f7f8 f963 	bl	8000ba0 <__aeabi_d2iz>
 80088da:	4606      	mov	r6, r0
 80088dc:	f7f7 fe46 	bl	800056c <__aeabi_i2d>
 80088e0:	2200      	movs	r2, #0
 80088e2:	4b8e      	ldr	r3, [pc, #568]	@ (8008b1c <__kernel_rem_pio2+0x640>)
 80088e4:	f7f7 feac 	bl	8000640 <__aeabi_dmul>
 80088e8:	460b      	mov	r3, r1
 80088ea:	4602      	mov	r2, r0
 80088ec:	4629      	mov	r1, r5
 80088ee:	4620      	mov	r0, r4
 80088f0:	f7f7 fcee 	bl	80002d0 <__aeabi_dsub>
 80088f4:	f7f8 f954 	bl	8000ba0 <__aeabi_d2iz>
 80088f8:	ab0c      	add	r3, sp, #48	@ 0x30
 80088fa:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 80088fe:	f10b 0b01 	add.w	fp, fp, #1
 8008902:	f10a 0a18 	add.w	sl, sl, #24
 8008906:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800890a:	e733      	b.n	8008774 <__kernel_rem_pio2+0x298>
 800890c:	4620      	mov	r0, r4
 800890e:	4629      	mov	r1, r5
 8008910:	f7f8 f946 	bl	8000ba0 <__aeabi_d2iz>
 8008914:	ab0c      	add	r3, sp, #48	@ 0x30
 8008916:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800891a:	e72b      	b.n	8008774 <__kernel_rem_pio2+0x298>
 800891c:	ab0c      	add	r3, sp, #48	@ 0x30
 800891e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008922:	f7f7 fe23 	bl	800056c <__aeabi_i2d>
 8008926:	4632      	mov	r2, r6
 8008928:	463b      	mov	r3, r7
 800892a:	f7f7 fe89 	bl	8000640 <__aeabi_dmul>
 800892e:	464a      	mov	r2, r9
 8008930:	e868 0102 	strd	r0, r1, [r8], #-8
 8008934:	4653      	mov	r3, sl
 8008936:	4630      	mov	r0, r6
 8008938:	4639      	mov	r1, r7
 800893a:	f7f7 fe81 	bl	8000640 <__aeabi_dmul>
 800893e:	3d01      	subs	r5, #1
 8008940:	4606      	mov	r6, r0
 8008942:	460f      	mov	r7, r1
 8008944:	e727      	b.n	8008796 <__kernel_rem_pio2+0x2ba>
 8008946:	f8dd c018 	ldr.w	ip, [sp, #24]
 800894a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800894e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8008952:	f8cd c018 	str.w	ip, [sp, #24]
 8008956:	f7f7 fe73 	bl	8000640 <__aeabi_dmul>
 800895a:	4602      	mov	r2, r0
 800895c:	460b      	mov	r3, r1
 800895e:	4648      	mov	r0, r9
 8008960:	4651      	mov	r1, sl
 8008962:	f7f7 fcb7 	bl	80002d4 <__adddf3>
 8008966:	4681      	mov	r9, r0
 8008968:	468a      	mov	sl, r1
 800896a:	3701      	adds	r7, #1
 800896c:	9b02      	ldr	r3, [sp, #8]
 800896e:	429f      	cmp	r7, r3
 8008970:	dc01      	bgt.n	8008976 <__kernel_rem_pio2+0x49a>
 8008972:	42be      	cmp	r6, r7
 8008974:	dae7      	bge.n	8008946 <__kernel_rem_pio2+0x46a>
 8008976:	ab48      	add	r3, sp, #288	@ 0x120
 8008978:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800897c:	e9c6 9a00 	strd	r9, sl, [r6]
 8008980:	3d01      	subs	r5, #1
 8008982:	e70c      	b.n	800879e <__kernel_rem_pio2+0x2c2>
 8008984:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8008986:	2b02      	cmp	r3, #2
 8008988:	dc09      	bgt.n	800899e <__kernel_rem_pio2+0x4c2>
 800898a:	2b00      	cmp	r3, #0
 800898c:	dc2c      	bgt.n	80089e8 <__kernel_rem_pio2+0x50c>
 800898e:	d04e      	beq.n	8008a2e <__kernel_rem_pio2+0x552>
 8008990:	9b05      	ldr	r3, [sp, #20]
 8008992:	f003 0007 	and.w	r0, r3, #7
 8008996:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800899a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899e:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 80089a0:	2b03      	cmp	r3, #3
 80089a2:	d1f5      	bne.n	8008990 <__kernel_rem_pio2+0x4b4>
 80089a4:	ab48      	add	r3, sp, #288	@ 0x120
 80089a6:	441c      	add	r4, r3
 80089a8:	4625      	mov	r5, r4
 80089aa:	46da      	mov	sl, fp
 80089ac:	f1ba 0f00 	cmp.w	sl, #0
 80089b0:	dc63      	bgt.n	8008a7a <__kernel_rem_pio2+0x59e>
 80089b2:	4625      	mov	r5, r4
 80089b4:	46da      	mov	sl, fp
 80089b6:	f1ba 0f01 	cmp.w	sl, #1
 80089ba:	dc7b      	bgt.n	8008ab4 <__kernel_rem_pio2+0x5d8>
 80089bc:	2000      	movs	r0, #0
 80089be:	2100      	movs	r1, #0
 80089c0:	f1bb 0f01 	cmp.w	fp, #1
 80089c4:	f300 8093 	bgt.w	8008aee <__kernel_rem_pio2+0x612>
 80089c8:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80089cc:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80089d0:	9b00      	ldr	r3, [sp, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f040 8092 	bne.w	8008afc <__kernel_rem_pio2+0x620>
 80089d8:	9b04      	ldr	r3, [sp, #16]
 80089da:	e9c3 7800 	strd	r7, r8, [r3]
 80089de:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80089e2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80089e6:	e7d3      	b.n	8008990 <__kernel_rem_pio2+0x4b4>
 80089e8:	465d      	mov	r5, fp
 80089ea:	2000      	movs	r0, #0
 80089ec:	2100      	movs	r1, #0
 80089ee:	ab48      	add	r3, sp, #288	@ 0x120
 80089f0:	441c      	add	r4, r3
 80089f2:	2d00      	cmp	r5, #0
 80089f4:	da32      	bge.n	8008a5c <__kernel_rem_pio2+0x580>
 80089f6:	9b00      	ldr	r3, [sp, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d035      	beq.n	8008a68 <__kernel_rem_pio2+0x58c>
 80089fc:	4602      	mov	r2, r0
 80089fe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008a02:	9c04      	ldr	r4, [sp, #16]
 8008a04:	2501      	movs	r5, #1
 8008a06:	e9c4 2300 	strd	r2, r3, [r4]
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8008a12:	f7f7 fc5d 	bl	80002d0 <__aeabi_dsub>
 8008a16:	ac48      	add	r4, sp, #288	@ 0x120
 8008a18:	45ab      	cmp	fp, r5
 8008a1a:	da28      	bge.n	8008a6e <__kernel_rem_pio2+0x592>
 8008a1c:	9b00      	ldr	r3, [sp, #0]
 8008a1e:	b113      	cbz	r3, 8008a26 <__kernel_rem_pio2+0x54a>
 8008a20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008a24:	4619      	mov	r1, r3
 8008a26:	9b04      	ldr	r3, [sp, #16]
 8008a28:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008a2c:	e7b0      	b.n	8008990 <__kernel_rem_pio2+0x4b4>
 8008a2e:	2000      	movs	r0, #0
 8008a30:	2100      	movs	r1, #0
 8008a32:	ab48      	add	r3, sp, #288	@ 0x120
 8008a34:	441c      	add	r4, r3
 8008a36:	f1bb 0f00 	cmp.w	fp, #0
 8008a3a:	da08      	bge.n	8008a4e <__kernel_rem_pio2+0x572>
 8008a3c:	9b00      	ldr	r3, [sp, #0]
 8008a3e:	b113      	cbz	r3, 8008a46 <__kernel_rem_pio2+0x56a>
 8008a40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008a44:	4619      	mov	r1, r3
 8008a46:	9b04      	ldr	r3, [sp, #16]
 8008a48:	e9c3 0100 	strd	r0, r1, [r3]
 8008a4c:	e7a0      	b.n	8008990 <__kernel_rem_pio2+0x4b4>
 8008a4e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8008a52:	f7f7 fc3f 	bl	80002d4 <__adddf3>
 8008a56:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a5a:	e7ec      	b.n	8008a36 <__kernel_rem_pio2+0x55a>
 8008a5c:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8008a60:	f7f7 fc38 	bl	80002d4 <__adddf3>
 8008a64:	3d01      	subs	r5, #1
 8008a66:	e7c4      	b.n	80089f2 <__kernel_rem_pio2+0x516>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	e7c9      	b.n	8008a02 <__kernel_rem_pio2+0x526>
 8008a6e:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8008a72:	f7f7 fc2f 	bl	80002d4 <__adddf3>
 8008a76:	3501      	adds	r5, #1
 8008a78:	e7ce      	b.n	8008a18 <__kernel_rem_pio2+0x53c>
 8008a7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a7e:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8008a82:	4640      	mov	r0, r8
 8008a84:	4649      	mov	r1, r9
 8008a86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a8a:	f7f7 fc23 	bl	80002d4 <__adddf3>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	460b      	mov	r3, r1
 8008a92:	4606      	mov	r6, r0
 8008a94:	460f      	mov	r7, r1
 8008a96:	4640      	mov	r0, r8
 8008a98:	4649      	mov	r1, r9
 8008a9a:	f7f7 fc19 	bl	80002d0 <__aeabi_dsub>
 8008a9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008aa2:	f7f7 fc17 	bl	80002d4 <__adddf3>
 8008aa6:	e865 0102 	strd	r0, r1, [r5], #-8
 8008aaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008aae:	e9c5 6700 	strd	r6, r7, [r5]
 8008ab2:	e77b      	b.n	80089ac <__kernel_rem_pio2+0x4d0>
 8008ab4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ab8:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8008abc:	4640      	mov	r0, r8
 8008abe:	4649      	mov	r1, r9
 8008ac0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ac4:	f7f7 fc06 	bl	80002d4 <__adddf3>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	460b      	mov	r3, r1
 8008acc:	4606      	mov	r6, r0
 8008ace:	460f      	mov	r7, r1
 8008ad0:	4640      	mov	r0, r8
 8008ad2:	4649      	mov	r1, r9
 8008ad4:	f7f7 fbfc 	bl	80002d0 <__aeabi_dsub>
 8008ad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008adc:	f7f7 fbfa 	bl	80002d4 <__adddf3>
 8008ae0:	e865 0102 	strd	r0, r1, [r5], #-8
 8008ae4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ae8:	e9c5 6700 	strd	r6, r7, [r5]
 8008aec:	e763      	b.n	80089b6 <__kernel_rem_pio2+0x4da>
 8008aee:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8008af2:	f7f7 fbef 	bl	80002d4 <__adddf3>
 8008af6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008afa:	e761      	b.n	80089c0 <__kernel_rem_pio2+0x4e4>
 8008afc:	9b04      	ldr	r3, [sp, #16]
 8008afe:	9a04      	ldr	r2, [sp, #16]
 8008b00:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8008b04:	601f      	str	r7, [r3, #0]
 8008b06:	605c      	str	r4, [r3, #4]
 8008b08:	609d      	str	r5, [r3, #8]
 8008b0a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008b0e:	60d3      	str	r3, [r2, #12]
 8008b10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008b14:	6110      	str	r0, [r2, #16]
 8008b16:	6153      	str	r3, [r2, #20]
 8008b18:	e73a      	b.n	8008990 <__kernel_rem_pio2+0x4b4>
 8008b1a:	bf00      	nop
 8008b1c:	41700000 	.word	0x41700000
 8008b20:	3e700000 	.word	0x3e700000
 8008b24:	00000000 	.word	0x00000000

08008b28 <scalbn>:
 8008b28:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8008b2c:	4616      	mov	r6, r2
 8008b2e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008b32:	4683      	mov	fp, r0
 8008b34:	468c      	mov	ip, r1
 8008b36:	460b      	mov	r3, r1
 8008b38:	b982      	cbnz	r2, 8008b5c <scalbn+0x34>
 8008b3a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008b3e:	4303      	orrs	r3, r0
 8008b40:	d039      	beq.n	8008bb6 <scalbn+0x8e>
 8008b42:	4b2f      	ldr	r3, [pc, #188]	@ (8008c00 <scalbn+0xd8>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	f7f7 fd7b 	bl	8000640 <__aeabi_dmul>
 8008b4a:	4b2e      	ldr	r3, [pc, #184]	@ (8008c04 <scalbn+0xdc>)
 8008b4c:	4683      	mov	fp, r0
 8008b4e:	429e      	cmp	r6, r3
 8008b50:	468c      	mov	ip, r1
 8008b52:	da0d      	bge.n	8008b70 <scalbn+0x48>
 8008b54:	a326      	add	r3, pc, #152	@ (adr r3, 8008bf0 <scalbn+0xc8>)
 8008b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5a:	e01b      	b.n	8008b94 <scalbn+0x6c>
 8008b5c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8008b60:	42ba      	cmp	r2, r7
 8008b62:	d109      	bne.n	8008b78 <scalbn+0x50>
 8008b64:	4602      	mov	r2, r0
 8008b66:	f7f7 fbb5 	bl	80002d4 <__adddf3>
 8008b6a:	4683      	mov	fp, r0
 8008b6c:	468c      	mov	ip, r1
 8008b6e:	e022      	b.n	8008bb6 <scalbn+0x8e>
 8008b70:	460b      	mov	r3, r1
 8008b72:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008b76:	3a36      	subs	r2, #54	@ 0x36
 8008b78:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008b7c:	428e      	cmp	r6, r1
 8008b7e:	dd0c      	ble.n	8008b9a <scalbn+0x72>
 8008b80:	a31d      	add	r3, pc, #116	@ (adr r3, 8008bf8 <scalbn+0xd0>)
 8008b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b86:	461c      	mov	r4, r3
 8008b88:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8008b8c:	f361 74df 	bfi	r4, r1, #31, #1
 8008b90:	4621      	mov	r1, r4
 8008b92:	481d      	ldr	r0, [pc, #116]	@ (8008c08 <scalbn+0xe0>)
 8008b94:	f7f7 fd54 	bl	8000640 <__aeabi_dmul>
 8008b98:	e7e7      	b.n	8008b6a <scalbn+0x42>
 8008b9a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008b9e:	4432      	add	r2, r6
 8008ba0:	428a      	cmp	r2, r1
 8008ba2:	dced      	bgt.n	8008b80 <scalbn+0x58>
 8008ba4:	2a00      	cmp	r2, #0
 8008ba6:	dd0a      	ble.n	8008bbe <scalbn+0x96>
 8008ba8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008bac:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008bb0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008bb4:	46ac      	mov	ip, r5
 8008bb6:	4658      	mov	r0, fp
 8008bb8:	4661      	mov	r1, ip
 8008bba:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8008bbe:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008bc2:	da09      	bge.n	8008bd8 <scalbn+0xb0>
 8008bc4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8008bc8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8008bcc:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8008bd0:	480e      	ldr	r0, [pc, #56]	@ (8008c0c <scalbn+0xe4>)
 8008bd2:	f041 011f 	orr.w	r1, r1, #31
 8008bd6:	e7bd      	b.n	8008b54 <scalbn+0x2c>
 8008bd8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008bdc:	3236      	adds	r2, #54	@ 0x36
 8008bde:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008be2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008be6:	4658      	mov	r0, fp
 8008be8:	4629      	mov	r1, r5
 8008bea:	2200      	movs	r2, #0
 8008bec:	4b08      	ldr	r3, [pc, #32]	@ (8008c10 <scalbn+0xe8>)
 8008bee:	e7d1      	b.n	8008b94 <scalbn+0x6c>
 8008bf0:	c2f8f359 	.word	0xc2f8f359
 8008bf4:	01a56e1f 	.word	0x01a56e1f
 8008bf8:	8800759c 	.word	0x8800759c
 8008bfc:	7e37e43c 	.word	0x7e37e43c
 8008c00:	43500000 	.word	0x43500000
 8008c04:	ffff3cb0 	.word	0xffff3cb0
 8008c08:	8800759c 	.word	0x8800759c
 8008c0c:	c2f8f359 	.word	0xc2f8f359
 8008c10:	3c900000 	.word	0x3c900000
 8008c14:	00000000 	.word	0x00000000

08008c18 <floor>:
 8008c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c1c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008c20:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8008c24:	2e13      	cmp	r6, #19
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	4680      	mov	r8, r0
 8008c30:	dc35      	bgt.n	8008c9e <floor+0x86>
 8008c32:	2e00      	cmp	r6, #0
 8008c34:	da17      	bge.n	8008c66 <floor+0x4e>
 8008c36:	a334      	add	r3, pc, #208	@ (adr r3, 8008d08 <floor+0xf0>)
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	f7f7 fb4a 	bl	80002d4 <__adddf3>
 8008c40:	2200      	movs	r2, #0
 8008c42:	2300      	movs	r3, #0
 8008c44:	f7f7 ff8c 	bl	8000b60 <__aeabi_dcmpgt>
 8008c48:	b150      	cbz	r0, 8008c60 <floor+0x48>
 8008c4a:	2c00      	cmp	r4, #0
 8008c4c:	da57      	bge.n	8008cfe <floor+0xe6>
 8008c4e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8008c52:	432c      	orrs	r4, r5
 8008c54:	2500      	movs	r5, #0
 8008c56:	42ac      	cmp	r4, r5
 8008c58:	4c2d      	ldr	r4, [pc, #180]	@ (8008d10 <floor+0xf8>)
 8008c5a:	bf08      	it	eq
 8008c5c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008c60:	4623      	mov	r3, r4
 8008c62:	462a      	mov	r2, r5
 8008c64:	e024      	b.n	8008cb0 <floor+0x98>
 8008c66:	4f2b      	ldr	r7, [pc, #172]	@ (8008d14 <floor+0xfc>)
 8008c68:	4137      	asrs	r7, r6
 8008c6a:	ea01 0c07 	and.w	ip, r1, r7
 8008c6e:	ea5c 0c00 	orrs.w	ip, ip, r0
 8008c72:	d01d      	beq.n	8008cb0 <floor+0x98>
 8008c74:	a324      	add	r3, pc, #144	@ (adr r3, 8008d08 <floor+0xf0>)
 8008c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7a:	f7f7 fb2b 	bl	80002d4 <__adddf3>
 8008c7e:	2200      	movs	r2, #0
 8008c80:	2300      	movs	r3, #0
 8008c82:	f7f7 ff6d 	bl	8000b60 <__aeabi_dcmpgt>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	d0ea      	beq.n	8008c60 <floor+0x48>
 8008c8a:	2c00      	cmp	r4, #0
 8008c8c:	bfbe      	ittt	lt
 8008c8e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8008c92:	4133      	asrlt	r3, r6
 8008c94:	18e4      	addlt	r4, r4, r3
 8008c96:	2500      	movs	r5, #0
 8008c98:	ea24 0407 	bic.w	r4, r4, r7
 8008c9c:	e7e0      	b.n	8008c60 <floor+0x48>
 8008c9e:	2e33      	cmp	r6, #51	@ 0x33
 8008ca0:	dd0a      	ble.n	8008cb8 <floor+0xa0>
 8008ca2:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8008ca6:	d103      	bne.n	8008cb0 <floor+0x98>
 8008ca8:	f7f7 fb14 	bl	80002d4 <__adddf3>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb8:	f04f 3cff 	mov.w	ip, #4294967295
 8008cbc:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8008cc0:	fa2c f707 	lsr.w	r7, ip, r7
 8008cc4:	4207      	tst	r7, r0
 8008cc6:	d0f3      	beq.n	8008cb0 <floor+0x98>
 8008cc8:	a30f      	add	r3, pc, #60	@ (adr r3, 8008d08 <floor+0xf0>)
 8008cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cce:	f7f7 fb01 	bl	80002d4 <__adddf3>
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	f7f7 ff43 	bl	8000b60 <__aeabi_dcmpgt>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d0c0      	beq.n	8008c60 <floor+0x48>
 8008cde:	2c00      	cmp	r4, #0
 8008ce0:	da0a      	bge.n	8008cf8 <floor+0xe0>
 8008ce2:	2e14      	cmp	r6, #20
 8008ce4:	d101      	bne.n	8008cea <floor+0xd2>
 8008ce6:	3401      	adds	r4, #1
 8008ce8:	e006      	b.n	8008cf8 <floor+0xe0>
 8008cea:	2301      	movs	r3, #1
 8008cec:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8008cf0:	40b3      	lsls	r3, r6
 8008cf2:	441d      	add	r5, r3
 8008cf4:	4545      	cmp	r5, r8
 8008cf6:	d3f6      	bcc.n	8008ce6 <floor+0xce>
 8008cf8:	ea25 0507 	bic.w	r5, r5, r7
 8008cfc:	e7b0      	b.n	8008c60 <floor+0x48>
 8008cfe:	2500      	movs	r5, #0
 8008d00:	462c      	mov	r4, r5
 8008d02:	e7ad      	b.n	8008c60 <floor+0x48>
 8008d04:	f3af 8000 	nop.w
 8008d08:	8800759c 	.word	0x8800759c
 8008d0c:	7e37e43c 	.word	0x7e37e43c
 8008d10:	bff00000 	.word	0xbff00000
 8008d14:	000fffff 	.word	0x000fffff

08008d18 <_init>:
 8008d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1a:	bf00      	nop
 8008d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d1e:	bc08      	pop	{r3}
 8008d20:	469e      	mov	lr, r3
 8008d22:	4770      	bx	lr

08008d24 <_fini>:
 8008d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d26:	bf00      	nop
 8008d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d2a:	bc08      	pop	{r3}
 8008d2c:	469e      	mov	lr, r3
 8008d2e:	4770      	bx	lr
